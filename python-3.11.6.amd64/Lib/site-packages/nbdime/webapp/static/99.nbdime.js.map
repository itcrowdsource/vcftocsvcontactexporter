{"version":3,"file":"99.nbdime.js","mappings":"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","sources":["webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/ui/safe/SafeHandler.ts","webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/ui/safe/SafeMethods.ts","webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/ui/safe/safe.ts","webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/util/Options.ts","webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/util/lengths.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2020-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  MathItem, MathDocument, and Handler for the safe extension\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {MathItem} from '../../core/MathItem.js';\nimport {MathDocument, MathDocumentConstructor} from '../../core/MathDocument.js';\nimport {Handler} from '../../core/Handler.js';\n\nimport {Safe} from './safe.js';\n\n/*==========================================================================*/\n\n/**\n * Generic constructor for Mixins\n */\nexport type Constructor<T> = new(...args: any[]) => T;\n\n/*==========================================================================*/\n\n/**\n * The properties needed in the MathDocument for sanitizing the internal MathML\n */\nexport interface SafeMathDocument<N, T, D> extends MathDocument<N, T, D> {\n\n  /**\n   * The Safe object for this document\n   */\n  safe: Safe<N, T, D>;\n\n}\n\n\n/**\n * The mixin for adding safe render action to MathDocuments\n *\n * @param {B} BaseDocument             The MathDocument class to be extended\n * @return {SafeMathDocument<N,T,D>}   The extended MathDocument class\n */\nexport function SafeMathDocumentMixin<N, T, D, B extends MathDocumentConstructor<MathDocument<N, T, D>>>(\n  BaseDocument: B\n): Constructor<SafeMathDocument<N, T, D>> & B {\n\n  return class extends BaseDocument {\n\n    /**\n     * @override\n     */\n    public static OPTIONS = {\n      ...BaseDocument.OPTIONS,\n      safeOptions: {\n        ...Safe.OPTIONS,\n      },\n      SafeClass: Safe\n    };\n\n    /**\n     * An instance of the Safe object\n     */\n    public safe: Safe<N, T, D>;\n\n    /**\n     * Extend the MathItem class used for this MathDocument\n     *\n     * @override\n     * @constructor\n     */\n    constructor(...args: any[]) {\n      super(...args);\n      this.safe = new this.options.SafeClass(this, this.options.safeOptions);\n      const ProcessBits = (this.constructor as typeof BaseDocument).ProcessBits;\n      if (!ProcessBits.has('safe')) {\n        ProcessBits.allocate('safe');\n      }\n      for (const jax of this.inputJax) {\n        if (jax.name.match(/MathML/)) {\n          (jax as any).mathml.filterAttribute = this.safe.mmlAttribute.bind(this.safe);\n          (jax as any).mathml.filterClassList = this.safe.mmlClassList.bind(this.safe);\n        } else if (jax.name.match(/TeX/)) {\n          jax.postFilters.add(this.sanitize.bind(jax), -5.5);\n        }\n      }\n    }\n\n    /**\n     * @param {{document:SafeDocument<N,T,D>}} data   The document to use for the filter\n     *                                                (note: this has been bound to the input jax)\n     */\n    protected sanitize(data: {math: MathItem<N, T, D>, document: SafeMathDocument<N, T, D>}) {\n      data.math.root = (this as any).parseOptions.root;\n      data.document.safe.sanitize(data.math, data.document);\n    }\n  };\n\n}\n\n\n/*==========================================================================*/\n\n/**\n * Add context-menu support to a Handler instance\n *\n * @param {Handler} handler   The Handler instance to enhance\n * @return {Handler}          The handler that was modified (for purposes of chaining extensions)\n */\nexport function SafeHandler<N, T, D>(handler: Handler<N, T, D>): Handler<N, T, D> {\n  handler.documentClass = SafeMathDocumentMixin(handler.documentClass);\n  return handler;\n}\n","/*************************************************************\n *\n *  Copyright (c) 2020-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Support functions for the safe extension\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {length2em} from '../../util/lengths.js';\nimport {Safe, FilterFunction} from './safe.js';\n\n/**\n * The default attribute-filtering functions\n */\nexport const SafeMethods: {[name: string]: FilterFunction<any, any, any>} = {\n\n  /**\n   * Filter HREF URL's\n   *\n   * @param {Safe<N,T,D>} safe  The Safe object being used\n   * @param {string} url        The URL being tested\n   * @return {string|null}      The URL if OK and null if not\n   *\n   * @template N  The HTMLElement node class\n   * @template T  The Text node class\n   * @template D  The Document class\n   */\n  filterURL<N, T, D>(safe: Safe<N, T, D>, url: string): string | null {\n    const protocol = (url.match(/^\\s*([a-z]+):/i) || [null, ''])[1].toLowerCase();\n    const allow = safe.allow.URLs;\n    return (allow === 'all' || (allow === 'safe' &&\n                                (safe.options.safeProtocols[protocol] || !protocol))) ? url : null;\n  },\n\n  /**\n   * Filter a class list\n   *\n   * @param {Safe<N,T,D>} safe  The Safe object being used\n   * @param {string} list       The class list being tested\n   * @return {string|null}      The class list if OK and null if not\n   *\n   * @template N  The HTMLElement node class\n   * @template T  The Text node class\n   * @template D  The Document class\n   */\n  filterClassList<N, T, D>(safe: Safe<N, T, D>, list: string): string | null {\n    const classes = list.trim().replace(/\\s\\s+/g, ' ').split(/ /);\n    return classes.map((name) => this.filterClass(safe, name) || '').join(' ').trim().replace(/\\s\\s+/g, '');\n  },\n\n  /**\n   * Filter a class name\n   *\n   * @param {Safe<N,T,D>} safe  The Safe object being used\n   * @param {string} CLASS      The class being tested\n   * @return {string|null}      The class if OK and null if not\n   *\n   * @template N  The HTMLElement node class\n   * @template T  The Text node class\n   * @template D  The Document class\n   */\n  filterClass<N, T, D>(safe: Safe<N, T, D>, CLASS: string): string | null {\n    const allow = safe.allow.classes;\n    return (allow === 'all' || (allow === 'safe' && CLASS.match(safe.options.classPattern))) ? CLASS : null;\n  },\n\n  /**\n   * Filter ids\n   *\n   * @param {Safe<N,T,D>} safe  The Safe object being used\n   * @param {string} id         The id being tested\n   * @return {string|null}      The id if OK and null if not\n   *\n   * @template N  The HTMLElement node class\n   * @template T  The Text node class\n   * @template D  The Document class\n   */\n  filterID<N, T, D>(safe: Safe<N, T, D>, id: string): string | null {\n    const allow = safe.allow.cssIDs;\n    return (allow === 'all' || (allow === 'safe' && id.match(safe.options.idPattern))) ? id : null;\n  },\n\n  /**\n   * Filter style strings\n   *\n   * @param {Safe<N,T,D>} safe  The Safe object being used\n   * @param {string} styles     The style string being tested\n   * @return {string}           The sanitized style string\n   *\n   * @template N  The HTMLElement node class\n   * @template T  The Text node class\n   * @template D  The Document class\n   */\n  filterStyles<N, T, D>(safe: Safe<N, T, D>, styles: string): string {\n    if (safe.allow.styles === 'all') return styles;\n    if (safe.allow.styles !== 'safe') return null;\n    const adaptor = safe.adaptor;\n    const options = safe.options;\n    try {\n      //\n      //  Create div1 with styles set to the given styles, and div2 with blank styles\n      //\n      const div1 = adaptor.node('div', {style: styles});\n      const div2 = adaptor.node('div');\n      //\n      //  Check each allowed style and transfer OK ones to div2\n      //  If the style has Top/Right/Bottom/Left, look at all four separately\n      //\n      for (const style of Object.keys(options.safeStyles)) {\n        if (options.styleParts[style]) {\n          for (const sufix of ['Top', 'Right', 'Bottom', 'Left']) {\n            const name = style + sufix;\n            const value = this.filterStyle(safe, name, div1);\n            if (value) {\n              adaptor.setStyle(div2, name, value);\n            }\n          }\n        } else {\n          const value = this.filterStyle(safe, style, div1);\n          if (value) {\n            adaptor.setStyle(div2, style, value);\n          }\n        }\n      }\n      //\n      //  Return the div2 style string\n      //\n      styles = adaptor.allStyles(div2);\n    } catch (err) {\n      styles = '';\n    }\n    return styles;\n  },\n\n  /**\n   * Filter an individual name:value style pair\n   *\n   * @param {Safe<N,T,D>} safe  The Safe object being used\n   * @param {string} style      The style name being tested\n   * @param {N} div             The temp DIV node containing the style object to be tested\n   * @return {string|null}      The sanitized style string or null if invalid\n   *\n   * @template N  The HTMLElement node class\n   * @template T  The Text node class\n   * @template D  The Document class\n   */\n  filterStyle<N, T, D>(safe: Safe<N, T, D>, style: string, div: N): string | null {\n    const value = safe.adaptor.getStyle(div, style);\n    if (typeof value !== 'string' || value === '' || value.match(/^\\s*calc/) ||\n        (value.match(/javascript:/) && !safe.options.safeProtocols.javascript) ||\n        (value.match(/data:/) && !safe.options.safeProtocols.data)) {\n      return null;\n    }\n    const name = style.replace(/Top|Right|Left|Bottom/, '');\n    if (!safe.options.safeStyles[style] && !safe.options.safeStyles[name]) {\n      return null;\n    }\n    return this.filterStyleValue(safe, style, value, div);\n  },\n\n  /**\n   * Filter a style's value, handling compound values (e.g., borders that have widths as well as styles and colors)\n   *\n   * @param {Safe<N,T,D>} safe  The Safe object being used\n   * @param {string} style      The style name being tested\n   * @param {string} value      The value of the style to test\n   * @param {N} div             The temp DIV node containing the style object to be tested\n   * @return {string|null}      The sanitized style string or null if invalid\n   *\n   * @template N  The HTMLElement node class\n   * @template T  The Text node class\n   * @template D  The Document class\n   */\n  filterStyleValue<N, T, D>(safe: Safe<N, T, D>, style: string, value: string, div: N): string | null {\n    const name = safe.options.styleLengths[style];\n    if (!name) {\n      return value;\n    }\n    if (typeof name !== 'string') {\n      return this.filterStyleLength(safe, style, value);\n    }\n    const length = this.filterStyleLength(safe, name, safe.adaptor.getStyle(div, name));\n    if (!length) {\n      return null;\n    }\n    safe.adaptor.setStyle(div, name, length);\n    return safe.adaptor.getStyle(div, style);\n  },\n\n  /**\n   * Filter a length value\n   *\n   * @param {Safe<N,T,D>} safe  The Safe object being used\n   * @param {string} style      The style name being tested\n   * @param {string} value      The value of the style to test\n   * @return {string|null}      The sanitized length value\n   *\n   * @template N  The HTMLElement node class\n   * @template T  The Text node class\n   * @template D  The Document class\n   */\n  filterStyleLength<N, T, D>(safe: Safe<N, T, D>, style: string, value: string): string | null {\n    if (!value.match(/^(.+)(em|ex|ch|rem|px|mm|cm|in|pt|pc|%)$/)) return null;\n    const em = length2em(value, 1);\n    const lengths = safe.options.styleLengths[style];\n    const [m, M] = (Array.isArray(lengths) ? lengths : [-safe.options.lengthMax, safe.options.lengthMax]);\n    return (m <= em && em <= M ? value : (em < m ? m : M).toFixed(3).replace(/\\.?0+$/, '') + 'em');\n  },\n\n  /**\n   * Filter a font size\n   *\n   * @param {Safe<N,T,D>} safe  The Safe object being used\n   * @param {string} size       The font size to test\n   * @return {string|null}      The sanitized style string or null if invalid\n   *\n   * @template N  The HTMLElement node class\n   * @template T  The Text node class\n   * @template D  The Document class\n   */\n  filterFontSize<N, T, D>(safe: Safe<N, T, D>, size: string): string | null {\n    return this.filterStyleLength(safe, 'fontSize', size);\n  },\n\n  /**\n   * Filter scriptsizemultiplier\n   *\n   * @param {Safe<N,T,D>} safe  The Safe object being used\n   * @param {string} size       The script size multiplier to test\n   * @return {string}           The sanitized size\n   *\n   * @template N  The HTMLElement node class\n   * @template T  The Text node class\n   * @template D  The Document class\n   */\n  filterSizeMultiplier<N, T, D>(safe: Safe<N, T, D>, size: string): string {\n    const [m, M] = safe.options.scriptsizemultiplierRange || [-Infinity, Infinity];\n    return Math.min(M, Math.max(m, parseFloat(size))).toString();\n  },\n\n  /**\n   *  Filter scriptLevel\n   *\n   * @param {Safe<N,T,D>} safe  The Safe object being used\n   * @param {string} size       The scriptlevel to test\n   * @return {string|null}      The sanitized scriptlevel or null\n   *\n   * @template N  The HTMLElement node class\n   * @template T  The Text node class\n   * @template D  The Document class\n   */\n  filterScriptLevel<N, T, D>(safe: Safe<N, T, D>, level: string): string | null {\n    const [m, M] = safe.options.scriptlevelRange || [-Infinity, Infinity];\n    return Math.min(M, Math.max(m, parseInt(level))).toString();\n  },\n\n  /**\n   * Filter a data-* attribute\n   *\n   * @param {Safe<N,T,D>} safe  The Safe object being used\n   * @param {string} value      The attribute's value\n   * @param {string} id         The attribute's id (e.g., data-mjx-variant)\n   * @return {number|null}      The sanitized value or null\n   *\n   * @template N  The HTMLElement node class\n   * @template T  The Text node class\n   * @template D  The Document class\n   */\n  filterData<N, T, D>(safe: Safe<N, T, D>, value: string, id: string): string | null {\n    return (id.match(safe.options.dataPattern) ? value : null);\n  }\n\n};\n","/*************************************************************\n *\n *  Copyright (c) 2020-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Support for the safe extension\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {Property} from '../../core/Tree/Node.js';\nimport {MmlNode} from '../../core/MmlTree/MmlNode.js';\nimport {MathItem} from '../../core/MathItem.js';\nimport {MathDocument} from '../../core/MathDocument.js';\nimport {OptionList, expandable} from '../../util/Options.js';\nimport {DOMAdaptor} from '../../core/DOMAdaptor.js';\nimport {SafeMethods} from './SafeMethods.js';\n\n\n/**\n * Function type for filtering attributes\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport type FilterFunction<N, T, D> = (safe: Safe<N, T, D>, value: Property, ...args: any[]) => Property;\n\n/**\n * The Safe object for sanitizing the internal MathML representation of an expression\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport class Safe<N, T, D> {\n\n  /**\n   * The options controlling the handling of the safe extension\n   */\n  public static OPTIONS: OptionList = {\n    allow: {\n      //\n      //  Values can be \"all\", \"safe\", or \"none\"\n      //\n      URLs:    'safe',   // safe are in safeProtocols below\n      classes: 'safe',   // safe start with mjx- (can be set by pattern below)\n      cssIDs:  'safe',   // safe start with mjx- (can be set by pattern below)\n      styles:  'safe'    // safe are in safeStyles below\n    },\n    //\n    // Largest padding/border/margin, etc. in em's\n    //\n    lengthMax: 3,\n    //\n    // Valid range for scriptsizemultiplier\n    //\n    scriptsizemultiplierRange: [.6, 1],\n    //\n    // Valid range for scriptlevel\n    //\n    scriptlevelRange: [-2, 2],\n    //\n    // Pattern for allowed class names\n    //\n    classPattern: /^mjx-[-a-zA-Z0-9_.]+$/,\n    //\n    // Pattern for allowed ids\n    //\n    idPattern: /^mjx-[-a-zA-Z0-9_.]+$/,\n    //\n    // Pattern for data attributes\n    //\n    dataPattern: /^data-mjx-/,\n    //\n    //  Which URL protocols are allowed\n    //\n    safeProtocols: expandable({\n      http: true,\n      https: true,\n      file: true,\n      javascript: false,\n      data: false\n    }),\n    //\n    //  Which styles are allowed\n    //\n    safeStyles: expandable({\n      color: true,\n      backgroundColor: true,\n      border: true,\n      cursor: true,\n      margin: true,\n      padding: true,\n      textShadow: true,\n      fontFamily: true,\n      fontSize: true,\n      fontStyle: true,\n      fontWeight: true,\n      opacity: true,\n      outline: true\n    }),\n    //\n    //  CSS styles that have Top/Right/Bottom/Left versions\n    //\n    styleParts: expandable({\n      border: true,\n      padding: true,\n      margin: true,\n      outline: true\n    }),\n    //\n    //  CSS styles that are lengths needing max/min testing\n    //    A string value means test that style value;\n    //    An array gives [min,max] in em's\n    //    Otherwise use [-lengthMax,lengthMax] from above\n    //\n    styleLengths: expandable({\n      borderTop: 'borderTopWidth',\n      borderRight: 'borderRightWidth',\n      borderBottom: 'borderBottomWidth',\n      borderLeft: 'borderLeftWidth',\n      paddingTop: true,\n      paddingRight: true,\n      paddingBottom: true,\n      paddingLeft: true,\n      marginTop: true,\n      marginRight: true,\n      marginBottom: true,\n      marginLeft: true,\n      outlineTop: true,\n      outlineRight: true,\n      outlineBottom: true,\n      outlineLeft: true,\n      fontSize: [.707, 1.44]\n    })\n  };\n\n  /**\n   * The attribute-to-filter-method mapping\n   */\n  public filterAttributes: Map<string, string> = new Map([\n    //\n    //  Methods called for MathML attribute processing\n    //\n    ['href', 'filterURL'],\n    ['src',  'filterURL'],\n    ['altimg', 'filterURL'],\n    ['class', 'filterClassList'],\n    ['style', 'filterStyles'],\n    ['id', 'filterID'],\n    ['fontsize', 'filterFontSize'],\n    ['mathsize', 'filterFontSize'],\n    ['scriptminsize', 'filterFontSize'],\n    ['scriptsizemultiplier', 'filterSizeMultiplier'],\n    ['scriptlevel', 'filterScriptLevel'],\n    ['data-', 'filterData']\n  ]);\n\n  /**\n   * The safe options from the document option list\n   */\n  public options: OptionList;\n\n  /**\n   * Shorthand for options.allow\n   */\n  public allow: OptionList;\n\n  /**\n   * The DOM adaptor from the document\n   */\n  public adaptor: DOMAdaptor<N, T, D>;\n\n  /**\n   * The methods for filtering the MathML attributes\n   */\n  public filterMethods: {[name: string]: FilterFunction<N, T, D>} = {\n    ...SafeMethods\n  };\n\n  /**\n   * @param {MathDocument<N,T,D>} document  The MathDocument we are sanitizing\n   * @param {OptionList} options            The safeOptions from the document\n   */\n  constructor(document: MathDocument<N, T, D>, options: OptionList) {\n    this.adaptor = document.adaptor;\n    this.options = options;\n    this.allow = this.options.allow;\n  }\n\n  /**\n   * Sanitize a MathItem's root MathML tree\n   *\n   * @param {MathItem<N,T,D>} math           The MathItem to sanitize\n   * @param {MathDocument<N,T,D>} document   The MathDocument in which it lives\n   */\n  public sanitize(math: MathItem<N, T, D>, document: MathDocument<N, T, D>) {\n    try {\n      math.root.walkTree(this.sanitizeNode.bind(this));\n    } catch (err) {\n      document.options.compileError(document, math, err);\n    }\n  }\n\n  /**\n   * Sanitize a node's attributes\n   *\n   * @param {MmlNode} node      The node to sanitize\n   */\n  protected sanitizeNode(node: MmlNode) {\n    const attributes = node.attributes.getAllAttributes();\n    for (const id of Object.keys(attributes)) {\n      const method = this.filterAttributes.get(id);\n      if (method) {\n        const value = this.filterMethods[method](this, attributes[id]);\n        if (value) {\n          if (value !== (typeof value === 'number' ? parseFloat(attributes[id] as string) : attributes[id])) {\n            attributes[id] = value;\n          }\n        } else {\n          delete attributes[id];\n        }\n      }\n    }\n  }\n\n  /**\n   * Sanitize a MathML input attribute\n   *\n   * @param {string} id      The name of the attribute\n   * @param {string} value   The value of the attribute\n   * @return {string|null}   The sanitized value\n   */\n  public mmlAttribute(id: string, value: string): string | null {\n    if (id === 'class') return null;\n    const method = this.filterAttributes.get(id);\n    const filter = (method || (id.substr(0, 5) === 'data-' ? this.filterAttributes.get('data-') : null));\n    if (!filter) {\n      return value;\n    }\n    const result = this.filterMethods[filter](this, value, id);\n    return (typeof result === 'number' || typeof result === 'boolean' ? String(result) : result);\n  }\n\n  /**\n   * Sanitize a list of class names\n   *\n   * @param {string[]} list   The list of class names\n   * @return {string[]}       The sanitized list\n   */\n  public mmlClassList(list: string[]): string[] {\n    return list.map((name) => this.filterMethods.filterClass(this, name) as string)\n               .filter((value) => value !== null);\n  }\n\n}\n","/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements functions for handling option lists\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\n\n/*****************************************************************/\n/* tslint:disable-next-line:jsdoc-require */\nconst OBJECT = {}.constructor;\n\n/**\n *  Check if an object is an object literal (as opposed to an instance of a class)\n */\nexport function isObject(obj: any) {\n  return typeof obj === 'object' && obj !== null &&\n    (obj.constructor === OBJECT || obj.constructor === Expandable);\n}\n\n/*****************************************************************/\n/**\n * Generic list of options\n */\nexport type OptionList = {[name: string]: any};\n\n/*****************************************************************/\n/**\n *  Used to append an array to an array in default options\n *  E.g., an option of the form\n *\n *    {\n *      name: {[APPEND]: [1, 2, 3]}\n *    }\n *\n *  where 'name' is an array in the default options would end up with name having its\n *  original value with 1, 2, and 3 appended.\n */\nexport const APPEND = '[+]';\n\n/**\n *  Used to remove elements from an array in default options\n *  E.g., an option of the form\n *\n *    {\n *      name: {[REMOVE]: [2]}\n *    }\n *\n *  where 'name' is an array in the default options would end up with name having its\n *  original value but with any entry of 2 removed  So if the original value was [1, 2, 3, 2],\n *  then the final value will be [1, 3] instead.\n */\nexport const REMOVE = '[-]';\n\n\n/**\n *  Provides options for the option utlities.\n */\nexport const OPTIONS = {\n  invalidOption: 'warn' as ('fatal' | 'warn'),\n  /**\n   * Function to report messages for invalid options\n   *\n   * @param {string} message   The message for the invalid parameter.\n   * @param {string} key       The invalid key itself.\n   */\n  optionError: (message: string, _key: string) => {\n    if (OPTIONS.invalidOption === 'fatal') {\n      throw new Error(message);\n    }\n    console.warn('MathJax: ' + message);\n  }\n};\n\n\n/**\n * A Class to use for options that should not produce warnings if an undefined key is used\n */\nexport class Expandable {}\n\n/**\n * Produces an instance of Expandable with the given values (to be used in defining options\n * that can use keys that don't have default values).  E.g., default options of the form:\n *\n *  OPTIONS = {\n *     types: expandable({\n *       a: 1,\n *       b: 2\n *     })\n *  }\n *\n *  would allow user options of\n *\n *  {\n *     types: {\n *       c: 3\n *     }\n *  }\n *\n *  without reporting an error.\n */\nexport function expandable(def: OptionList) {\n  return Object.assign(Object.create(Expandable.prototype), def);\n}\n\n/*****************************************************************/\n/**\n *  Make sure an option is an Array\n */\nexport function makeArray(x: any): any[] {\n  return Array.isArray(x) ? x : [x];\n}\n\n/*****************************************************************/\n/**\n * Get all keys and symbols from an object\n *\n * @param {Optionlist} def        The object whose keys are to be returned\n * @return {(string | symbol)[]}  The list of keys for the object\n */\nexport function keys(def: OptionList): (string | symbol)[] {\n  if (!def) {\n    return [];\n  }\n  return (Object.keys(def) as (string | symbol)[]).concat(Object.getOwnPropertySymbols(def));\n}\n\n/*****************************************************************/\n/**\n * Make a deep copy of an object\n *\n * @param {OptionList} def  The object to be copied\n * @return {OptionList}     The copy of the object\n */\nexport function copy(def: OptionList): OptionList {\n  let props: OptionList = {};\n  for (const key of keys(def)) {\n    let prop = Object.getOwnPropertyDescriptor(def, key);\n    let value = prop.value;\n    if (Array.isArray(value)) {\n      prop.value = insert([], value, false);\n    } else if (isObject(value)) {\n      prop.value = copy(value);\n    }\n    if (prop.enumerable) {\n      props[key as string] = prop;\n    }\n  }\n  return Object.defineProperties(def.constructor === Expandable ? expandable({}) : {}, props);\n}\n\n/*****************************************************************/\n/**\n * Insert one object into another (with optional warnings about\n * keys that aren't in the original)\n *\n * @param {OptionList} dst  The option list to merge into\n * @param {OptionList} src  The options to be merged\n * @param {boolean} warn    True if a warning should be issued for a src option that isn't already in dst\n * @return {OptionList}     The modified destination option list (dst)\n */\nexport function insert(dst: OptionList, src: OptionList, warn: boolean = true): OptionList {\n  for (let key of keys(src) as string[]) {\n    //\n    // Check if the key is valid (i.e., is in the defaults or in an expandable block)\n    //\n    if (warn && dst[key] === undefined && dst.constructor !== Expandable) {\n      if (typeof key === 'symbol') {\n        key = (key as symbol).toString();\n      }\n      OPTIONS.optionError(`Invalid option \"${key}\" (no default value).`, key);\n      continue;\n    }\n    //\n    // Shorthands for the source and destination values\n    //\n    let sval = src[key], dval = dst[key];\n    //\n    // If the source is an object literal and the destination exists and is either an\n    //   object or a function (so can have properties added to it)...\n    //\n    if (isObject(sval) && dval !== null &&\n        (typeof dval === 'object' || typeof dval === 'function')) {\n      const ids = keys(sval);\n      //\n      // Check for APPEND or REMOVE objects:\n      //\n      if (\n        //\n        // If the destination value is an array...\n        //\n        Array.isArray(dval) &&\n          (\n            //\n            // If there is only one key and it is APPEND or REMOVE and the keys value is an array...\n            //\n            (ids.length === 1 && (ids[0] === APPEND || ids[0] === REMOVE) && Array.isArray(sval[ids[0]])) ||\n              //\n              // Or if there are two keys and they are APPEND and REMOVE and both keys' values\n              //   are arrays...\n              //\n              (ids.length === 2 && ids.sort().join(',') === APPEND + ',' + REMOVE &&\n               Array.isArray(sval[APPEND]) && Array.isArray(sval[REMOVE]))\n          )\n      ) {\n        //\n        // Then remove any values to be removed\n        //\n        if (sval[REMOVE]) {\n          dval = dst[key] = dval.filter(x => sval[REMOVE].indexOf(x) < 0);\n        }\n        //\n        // And append any values to be added (make a copy so as not to modify the original)\n        //\n        if (sval[APPEND]) {\n          dst[key] = [...dval, ...sval[APPEND]];\n        }\n      } else {\n        //\n        // Otherwise insert the values of the source object into the destination object\n        //\n        insert(dval, sval, warn);\n      }\n    } else if (Array.isArray(sval)) {\n      //\n      // If the source is an array, replace the destination with an empty array\n      //   and copy the source values into it.\n      //\n      dst[key] = [];\n      insert(dst[key], sval, false);\n    } else if (isObject(sval)) {\n      //\n      // If the source is an object literal, set the destination to a copy of it\n      //\n      dst[key] = copy(sval);\n    } else {\n      //\n      // Otherwise set the destination to the source value\n      //\n      dst[key] = sval;\n    }\n  }\n  return dst;\n}\n\n/*****************************************************************/\n/**\n * Merge options without warnings (so we can add new default values into an\n * existing default list)\n *\n * @param {OptionList} options  The option list to be merged into\n * @param {OptionList[]} defs   The option lists to merge into the first one\n * @return {OptionList}         The modified options list\n */\nexport function defaultOptions(options: OptionList, ...defs: OptionList[]): OptionList {\n  defs.forEach(def => insert(options, def, false));\n  return options;\n}\n\n/*****************************************************************/\n/**\n * Merge options with warnings about undefined ones (so we can merge\n * user options into the default list)\n *\n * @param {OptionList} options  The option list to be merged into\n * @param {OptionList[]} defs   The option lists to merge into the first one\n * @return {OptionList}         The modified options list\n */\nexport function userOptions(options: OptionList, ...defs: OptionList[]): OptionList {\n  defs.forEach(def => insert(options, def, true));\n  return options;\n}\n\n/*****************************************************************/\n/**\n * Select a subset of options by key name\n *\n * @param {OptionList} options  The option list from which option values will be taken\n * @param {string[]} keys       The names of the options to extract\n * @return {OptionList}         The option list consisting of only the ones whose keys were given\n */\nexport function selectOptions(options: OptionList, ...keys: string[]): OptionList {\n  let subset: OptionList = {};\n  for (const key of keys) {\n    if (options.hasOwnProperty(key)) {\n      subset[key] = options[key];\n    }\n  }\n  return subset;\n}\n\n/*****************************************************************/\n/**\n * Select a subset of options by keys from an object\n *\n * @param {OptionList} options  The option list from which the option values will be taken\n * @param {OptionList} object   The option list whose keys will be used to select the options\n * @return {OptionList}         The option list consisting of the option values from the first\n *                               list whose keys are those from the second list.\n */\nexport function selectOptionsFromKeys(options: OptionList, object: OptionList): OptionList {\n  return selectOptions(options, ...Object.keys(object));\n}\n\n/*****************************************************************/\n/**\n *  Separate options into sets: the ones having the same keys\n *  as the second object, the third object, etc, and the ones that don't.\n *  (Used to separate an option list into the options needed for several\n *   subobjects.)\n *\n * @param {OptionList} options    The option list to be split into parts\n * @param {OptionList[]} objects  The list of option lists whose keys are used to break up\n *                                 the original options into separate pieces.\n * @return {OptionList[]}         The option lists taken from the original based on the\n *                                 keys of the other objects.  The first one in the list\n *                                 consists of the values not appearing in any of the others\n *                                 (i.e., whose keys were not in any of the others).\n */\nexport function separateOptions(options: OptionList, ...objects: OptionList[]): OptionList[] {\n  let results: OptionList[] = [];\n  for (const object of objects) {\n    let exists: OptionList = {}, missing: OptionList = {};\n    for (const key of Object.keys(options || {})) {\n      (object[key] === undefined ? missing : exists)[key] = options[key];\n    }\n    results.push(exists);\n    options = missing;\n  }\n  results.unshift(options);\n  return results;\n}\n\n\n/*****************************************************************/\n/**\n *  Look up a value from object literal, being sure it is an\n *  actual property (not inherited), with a default if not found.\n *\n * @param {string} name         The name of the key to look up.\n * @param {OptionList} lookup   The list of options to check.\n * @param {any} def             The default value if the key isn't found.\n */\nexport function lookup(name: string, lookup: OptionList, def: any = null) {\n  return (lookup.hasOwnProperty(name) ? lookup[name] : def);\n}\n\n","/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Utility functions for handling dimensions (lengths)\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\n/**\n *  A very large number\n */\nexport const BIGDIMEN = 1000000;\n\n/**\n *  Sizes of various units in pixels\n */\nexport const UNITS: {[unit: string]: number} = {\n  px: 1,\n  'in': 96,            // 96 px to an inch\n  cm: 96 / 2.54,       // 2.54 cm to an inch\n  mm: 96 / 25.4        // 10 mm to a cm\n};\n\n/**\n *  Sizes of various relative units in em's\n */\nexport const RELUNITS: {[unit: string]: number} = {\n  em: 1,\n  ex: .431,        // this.TEX.x_height;\n  pt: 1 / 10,      // 10 pt to an em\n  pc: 12 / 10,     // 12 pc to a pt\n  mu: 1 / 18       // 18mu to an em for the scriptlevel\n};\n\n/**\n *  The various named spaces\n */\nexport const MATHSPACE: {[name: string]: number} = {\n  /* tslint:disable:whitespace */\n  veryverythinmathspace:           1/18,\n  verythinmathspace:               2/18,\n  thinmathspace:                   3/18,\n  mediummathspace:                 4/18,\n  thickmathspace:                  5/18,\n  verythickmathspace:              6/18,\n  veryverythickmathspace:          7/18,\n  negativeveryverythinmathspace:  -1/18,\n  negativeverythinmathspace:      -2/18,\n  negativethinmathspace:          -3/18,\n  negativemediummathspace:        -4/18,\n  negativethickmathspace:         -5/18,\n  negativeverythickmathspace:     -6/18,\n  negativeveryverythickmathspace: -7/18,\n  /* tslint:enable */\n\n  thin:   .04,\n  medium: .06,\n  thick:  .1,\n\n  normal:  1,\n  big:     2,\n  small:   1 / Math.sqrt(2),\n\n  infinity:  BIGDIMEN\n};\n\n\n/**\n * @param {string|number} length  A dimension (giving number and units) to be converted to ems\n * @param {number} size           The default size of the dimension (for percentage values)\n * @param {number} scale          The current scaling factor (to handle absolute units)\n * @param {number} em             The size of an em in pixels\n * @return {number}               The dimension converted to ems\n */\nexport function length2em(length: string | number, size: number = 0, scale: number = 1, em: number = 16): number {\n  if (typeof length !== 'string') {\n    length = String(length);\n  }\n  if (length === '' || length == null) {\n    return size;\n  }\n  if (MATHSPACE[length]) {\n    return MATHSPACE[length];\n  }\n  let match = length.match(/^\\s*([-+]?(?:\\.\\d+|\\d+(?:\\.\\d*)?))?(pt|em|ex|mu|px|pc|in|mm|cm|%)?/);\n  if (!match) {\n    return size;\n  }\n  let m = parseFloat(match[1] || '1'), unit = match[2];\n  if (UNITS.hasOwnProperty(unit)) {\n    return m * UNITS[unit] / em / scale;\n  }\n  if (RELUNITS.hasOwnProperty(unit)) {\n    return m * RELUNITS[unit];\n  }\n  if (unit === '%') {\n    return m / 100 * size;  // percentage of the size\n  }\n  return m * size;            // relative to size\n}\n\n/**\n * @param {number} m  A number to be shown as a percent\n * @return {string}   The number m as a percent\n */\nexport function percent(m: number): string {\n  return (100 * m).toFixed(1).replace(/\\.?0+$/, '') + '%';\n}\n\n/**\n * @param {number} m  A number to be shown in ems\n * @return {string}   The number with units of ems\n */\nexport function em(m: number): string {\n  if (Math.abs(m) < .001) return '0';\n  return (m.toFixed(3).replace(/\\.?0+$/, '')) + 'em';\n}\n\n/**\n * @param {number} m   A number to be shown in ems, but rounded to pixel boundaries\n * @param {number} em  The number of pixels in an em\n * @return {string}    The number with units of em\n */\nexport function emRounded(m: number, em: number = 16): string {\n  m = (Math.round(m * em) + .05) / em;\n  if (Math.abs(m) < .001) return '0em';\n  return m.toFixed(3).replace(/\\.?0+$/, '') + 'em';\n}\n\n\n/**\n * @param {number} m   A number of em's to be shown as pixels\n * @param {number} M   The minimum number of pixels to allow\n * @param {number} em  The number of pixels in an em\n * @return {string}    The number with units of px\n */\nexport function px(m: number, M: number = -BIGDIMEN, em: number = 16): string {\n  m *= em;\n  if (M && m < M) m = M;\n  if (Math.abs(m) < .1) return '0';\n  return m.toFixed(1).replace(/\\.0$/, '') + 'px';\n}\n"],"names":["SafeMathDocumentMixin","BaseDocument","args","safe","options","SafeClass","safeOptions","ProcessBits","constructor","has","allocate","inputJax","jax","name","match","mathml","filterAttribute","mmlAttribute","bind","filterClassList","mmlClassList","postFilters","add","sanitize","data","math","root","this","parseOptions","document","OPTIONS","Safe","handler","documentClass","SafeMethods","filterURL","url","protocol","toLowerCase","allow","URLs","safeProtocols","list","trim","replace","split","map","filterClass","join","CLASS","classes","classPattern","filterID","id","cssIDs","idPattern","filterStyles","styles","adaptor","div1","node","style","div2","Object","keys","safeStyles","styleParts","value","filterStyle","setStyle","allStyles","err","div","getStyle","javascript","filterStyleValue","styleLengths","filterStyleLength","length","em","length2em","lengths","Array","isArray","lengthMax","m","M","toFixed","filterFontSize","size","filterSizeMultiplier","scriptsizemultiplierRange","Infinity","Math","min","max","parseFloat","toString","filterScriptLevel","level","scriptlevelRange","parseInt","filterData","dataPattern","filterAttributes","Map","filterMethods","walkTree","sanitizeNode","compileError","attributes","getAllAttributes","method","get","filter","substr","result","String","expandable","http","https","file","color","backgroundColor","border","cursor","margin","padding","textShadow","fontFamily","fontSize","fontStyle","fontWeight","opacity","outline","borderTop","borderRight","borderBottom","borderLeft","paddingTop","paddingRight","paddingBottom","paddingLeft","marginTop","marginRight","marginBottom","marginLeft","outlineTop","outlineRight","outlineBottom","outlineLeft","OBJECT","isObject","obj","Expandable","APPEND","REMOVE","invalidOption","optionError","message","_key","Error","console","warn","def","assign","create","prototype","concat","getOwnPropertySymbols","copy","props","key","prop","getOwnPropertyDescriptor","insert","enumerable","defineProperties","dst","src","undefined","sval","dval","ids","sort","x","indexOf","selectOptions","subset","hasOwnProperty","defs","forEach","object","results","objects","exists","missing","push","unshift","lookup","BIGDIMEN","UNITS","px","cm","mm","RELUNITS","ex","pt","pc","mu","MATHSPACE","veryverythinmathspace","verythinmathspace","thinmathspace","mediummathspace","thickmathspace","verythickmathspace","veryverythickmathspace","negativeveryverythinmathspace","negativeverythinmathspace","negativethinmathspace","negativemediummathspace","negativethickmathspace","negativeverythickmathspace","negativeveryverythickmathspace","thin","medium","thick","normal","big","small","sqrt","infinity","scale","unit","abs","round"],"sourceRoot":""}