{"version":3,"file":"4303.nbdime.js","mappings":"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","sources":["webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/core/Tree/Factory.ts","webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/input/tex/NodeFactory.ts","webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/input/tex/ParseMethods.ts","webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/input/tex/ParseOptions.ts","webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/input/tex/StackItem.ts","webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/input/tex/StackItemFactory.ts","webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/input/tex/TexConstants.ts","webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/input/tex/base/BaseConfiguration.ts","webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/input/tex/base/BaseItems.ts","webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/input/tex/base/BaseMappings.ts","webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/input/tex/base/BaseMethods.ts","webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/util/lengths.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  The generic Factory class for creating arbitrary objects\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\n/*****************************************************************/\n/**\n * The Factory node interfaces (one for the node instance, one for the node class)\n */\n\nexport interface FactoryNode {\n  readonly kind: string;\n}\n\n/**\n * @template N  The Node type being created by the factory\n */\nexport interface FactoryNodeClass<N extends FactoryNode> {\n  /**\n   * @param {Factory<N, FactoryNodeClass<N>>} factory  The factory for creating more nodes\n   * @param {any[]} args  Any additional arguments needed by the node\n   * @return {N}  The newly created node\n   */\n  new(factory: Factory<N, FactoryNodeClass<N>>, ...args: any[]): N;\n}\n\n/*****************************************************************/\n/**\n * The Factory interface\n *\n * Factory<N, C> takes a node type N and a node class C, which give\n * the interfaces for the node instance and the node constructors. We\n * need both for two reasons: first, you can't use typeof N to get C,\n * since N is a type not an object, and if N has static members, we\n * may want to access them from the results of getNodeClass(kind)\n * (this is done in MmlNodes, for example).\n *\n * @template N  The node type created by the factory\n * @template C  The class of the node being constructed (for access to static properties)\n */\nexport interface Factory<N extends FactoryNode, C extends FactoryNodeClass<N>> {\n  /**\n   * @param {string} kind  The kind of node to create\n   * @return {N}  The newly created node of the given kind\n   */\n  create(kind: string): N;\n\n  /**\n   * Defines a class for a given node kind\n   *\n   * @param {string} kind  The kind whose class is being defined\n   * @param {C} nodeClass  The class for the given kind\n   */\n  setNodeClass(kind: string, nodeClass: C): void;\n\n  /**\n   * @param {string} kind  The kind of node whose class is to be returned\n   * @return {C}  The class object for the given kind\n   */\n  getNodeClass(kind: string): C;\n\n  /**\n   * @param {string} kind  The kind whose definition is to be deleted\n   */\n  deleteNodeClass(kind: string): void;\n\n  /**\n   * @param {N} node  The node to test if it is of a given kind\n   * @param {string} kind  The kind to test for\n   * @return {boolean}  True if the node is of the given kind, false otherwise\n   */\n  nodeIsKind(node: N, kind: string): boolean;\n\n  /**\n   * @return {string[]}  The names of all the available kinds of nodes\n   */\n  getKinds(): string[];\n}\n\n\n/*****************************************************************/\n/**\n * The generic AbstractFactoryClass interface\n *   (needed for access to defaultNodes via the constructor)\n *\n * @template N  The node type created by the factory\n * @template C  The class of the node being constructed (for access to static properties)\n */\ninterface AbstractFactoryClass<N extends FactoryNode, C extends FactoryNodeClass<N>> extends Function {\n  defaultNodes: {[kind: string]: C};\n}\n\n\n/*****************************************************************/\n/**\n * The generic AbstractFactory class\n *\n * @template N  The node type created by the factory\n * @template C  The class of the node being constructed (for access to static properties)\n */\nexport abstract class AbstractFactory<N extends FactoryNode, C extends FactoryNodeClass<N>> implements Factory<N, C> {\n\n  /**\n   * The default collection of objects to use for the node map\n   */\n  public static defaultNodes = {};\n\n  /**\n   * The default kind\n   */\n  public defaultKind = 'unknown';\n\n  /**\n   * The map of node kinds to node classes\n   */\n  protected nodeMap: Map<string, C> = new Map();\n\n  /**\n   * An object containing functions for creating the various node kinds\n   */\n  protected node: {[kind: string]: (...args: any[]) => N} = {};\n\n  /**\n   * @override\n   */\n  constructor(nodes: {[kind: string]: C} = null) {\n    if (nodes === null) {\n      nodes = (this.constructor as AbstractFactoryClass<N, C>).defaultNodes;\n    }\n    for (const kind of Object.keys(nodes)) {\n      this.setNodeClass(kind, nodes[kind]);\n    }\n  }\n\n  /**\n   * @override\n   */\n  public create(kind: string, ...args: any[]) {\n    return (this.node[kind] || this.node[this.defaultKind])(...args);\n  }\n\n  /**\n   * @override\n   */\n  public setNodeClass(kind: string, nodeClass: C) {\n    this.nodeMap.set(kind, nodeClass);\n    let THIS = this;\n    let KIND = this.nodeMap.get(kind);\n    this.node[kind] = (...args: any[]) => {\n      return new KIND(THIS, ...args);\n    };\n  }\n  /**\n   * @override\n   */\n  public getNodeClass(kind: string): C {\n    return this.nodeMap.get(kind);\n  }\n\n  /**\n   * @override\n   */\n  public deleteNodeClass(kind: string) {\n    this.nodeMap.delete(kind);\n    delete this.node[kind];\n  }\n\n  /**\n   * @override\n   */\n  public nodeIsKind(node: N, kind: string) {\n    return (node instanceof this.getNodeClass(kind));\n  }\n\n  /**\n   * @override\n   */\n  public getKinds() {\n    return Array.from(this.nodeMap.keys());\n  }\n\n}\n","/*************************************************************\n *\n *  Copyright (c) 2009-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Node factory for creating MmlNodes. This allows extension\n *     packages to add node constructors or overwrite existing ones.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\nimport {TextNode, MmlNode} from '../../core/MmlTree/MmlNode.js';\nimport {MmlFactory} from '../../core/MmlTree/MmlFactory.js';\nimport ParseOptions from './ParseOptions.js';\nimport NodeUtil from './NodeUtil.js';\n\n\nexport type NodeFactoryMethod = (factory: NodeFactory, kind: string, ...rest: any[]) => MmlNode;\n\nexport class NodeFactory {\n\n  /**\n   * Parser configuration that can be used to pass information between node methods.\n   * @type {ParseOption}\n   */\n  public configuration: ParseOptions;\n\n\n  /**\n   * The external node factory.\n   * @type {MmlFactory}\n   */\n  protected mmlFactory: MmlFactory = null;\n\n\n  /**\n   * The factory table populated with some default methods.\n   */\n  private factory: {[kind: string]: NodeFactoryMethod} =\n    {'node': NodeFactory.createNode,\n     'token': NodeFactory.createToken,\n     'text': NodeFactory.createText,\n     'error': NodeFactory.createError\n    };\n\n  /**\n   * Default node generation function.\n   * @param {NodeFactory} factory The current node factory.\n   * @param {string} kind The type of node to create.\n   * @param {MmlNode[]} children Its children.\n   * @param {any=} def Its properties.\n   * @param {TextNode=} text An optional text node if this is a token.\n   * @return {MmlNode} The newly created Mml node.\n   */\n  public static createNode(factory: NodeFactory, kind: string,\n                           children: MmlNode[] = [], def: any = {},\n                           text?: TextNode): MmlNode {\n    const node = factory.mmlFactory.create(kind);\n    node.setChildren(children);\n    if (text) {\n      node.appendChild(text);\n    }\n    NodeUtil.setProperties(node, def);\n    return node;\n  }\n\n\n  /**\n   * Default token generation function.\n   * @param {NodeFactory} factory The current node factory.\n   * @param {string} kind The type of node to create.\n   * @param {any} def Its properties.\n   * @param {string} text Text of the token.\n   * @return {MmlNode} The newly created token node.\n   */\n  public static createToken(factory: NodeFactory, kind: string,\n                            def: any = {}, text: string = ''): MmlNode  {\n    const textNode = factory.create('text', text);\n    return factory.create('node', kind, [], def, textNode);\n  }\n\n\n  /**\n   * Default text node generation function.\n   * @param {NodeFactory} factory The current node factory.\n   * @param {string} text The text for the new node.\n   * @return {TextNode} The newly created text node.\n   */\n  public static createText(factory: NodeFactory, text: string): TextNode  {\n    if (text == null) {\n      return null;\n    }\n    return (factory.mmlFactory.create('text') as TextNode).setText(text);\n  }\n\n\n  /**\n   * Default error node generation function.\n   * @param {NodeFactory} factory The current node factory.\n   * @param {string} message The error message.\n   * @return {MmlNode} The newly created error node.\n   */\n  public static createError(factory: NodeFactory, message: string): MmlNode  {\n    let text = factory.create('text', message);\n    let mtext = factory.create('node', 'mtext', [], {}, text);\n    let error = factory.create('node', 'merror', [mtext], {'data-mjx-error': message});\n    return error;\n  }\n\n\n  /**\n   * @param {MmlFactory} mmlFactory   The MmlFactory for the TeX jax to use\n   */\n  public setMmlFactory(mmlFactory: MmlFactory) {\n    this.mmlFactory = mmlFactory;\n  }\n\n  /**\n   * Adds a method to the factory.\n   * @param {string} kind The type of node the method creates.\n   * @param {NodeFactoryMethod} func The node creator.\n   */\n  public set(kind: string, func: NodeFactoryMethod) {\n    this.factory[kind] = func;\n  }\n\n\n  /**\n   * Adds a set of node creators to the factory.\n   * @param {Object.<NodeFactoryMethod>} maps The set of functions.\n   */\n  public setCreators(maps: {[kind: string]: NodeFactoryMethod}) {\n    for (let kind in maps) {\n      this.set(kind, maps[kind]);\n    }\n  }\n\n\n  /**\n   * Creates a node for the internal data structure from the factory.\n   * @param {string} kind The type of node to be created.\n   * @param {any[]} ...rest The arguments for the node.\n   * @return {MmlNode} The created node.\n   */\n  public create(kind: string, ...rest: any[]): MmlNode {\n    const func = this.factory[kind] || this.factory['node'];\n    const node = func(this, rest[0], ...rest.slice(1));\n    if (kind === 'node') {\n      this.configuration.addNode(rest[0], node);\n    }\n    return node;\n  }\n\n\n  /**\n   * @param {string} kind The method for generating a node of given kind.\n   */\n  public get(kind: string) {\n    return this.factory[kind];\n  }\n\n}\n","/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Base methods for TeX Parsing.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\nimport {Symbol} from './Symbol.js';\nimport TexParser from './TexParser.js';\nimport NodeUtil from './NodeUtil.js';\nimport {TexConstant} from './TexConstants.js';\nimport {MmlNode} from '../../core/MmlTree/MmlNode.js';\nimport ParseUtil from './ParseUtil.js';\n\n\nnamespace ParseMethods {\n\n  /**\n   * Handle a variable (a single letter or multi-letter if allowed).\n   * @param {TexParser} parser The current tex parser.\n   * @param {string} c The letter to transform into an mi.\n   */\n  export function variable(parser: TexParser, c: string) {\n    // @test Identifier Font\n    const def = ParseUtil.getFontDef(parser);\n    const env = parser.stack.env;\n    if (env.multiLetterIdentifiers && env.font !== '') {\n      c = parser.string.substr(parser.i - 1).match(env.multiLetterIdentifiers as any as RegExp)[0];\n      parser.i += c.length - 1;\n      if (def.mathvariant === TexConstant.Variant.NORMAL && env.noAutoOP && c.length > 1) {\n        def.autoOP = false;\n      }\n    }\n    // @test Identifier\n    const node = parser.create('token', 'mi', def, c);\n    parser.Push(node);\n  }\n\n\n  /**\n   * Handle a number (a sequence of digits, with decimal separator, etc.).\n   * @param {TexParser} parser The current tex parser.\n   * @param {string} c The first character of a number than can be parsed with\n   *     the digits pattern.\n   */\n  export function digit(parser: TexParser, c: string) {\n    let mml: MmlNode;\n    const pattern = parser.configuration.options['digits'];\n    const n = parser.string.slice(parser.i - 1).match(pattern);\n    // @test Integer Font\n    const def = ParseUtil.getFontDef(parser);\n    if (n) {\n      // @test Integer, Number, Decimal (European)\n      mml = parser.create('token', 'mn', def, n[0].replace(/[{}]/g, ''));\n      parser.i += n[0].length - 1;\n    } else {\n      // @test Decimal Point, Decimal Point European\n      mml = parser.create('token', 'mo', def, c);\n    }\n    parser.Push(mml);\n  }\n\n  /**\n   * Lookup a control-sequence and process it.\n   * @param {TexParser} parser The current tex parser.\n   * @param {string} c The string '\\'.\n   */\n  export function controlSequence(parser: TexParser, _c: string) {\n    const name = parser.GetCS();\n    parser.parse('macro', [parser, name]);\n  }\n\n\n  /**\n   * Handle normal mathchar (as an mi).\n   * @param {TexParser} parser The current tex parser.\n   * @param {Symbol} mchar The parsed symbol.\n   */\n  export function mathchar0mi(parser: TexParser, mchar: Symbol) {\n    const def = mchar.attributes || {mathvariant: TexConstant.Variant.ITALIC};\n    // @test Greek\n    const node = parser.create('token', 'mi', def, mchar.char);\n    parser.Push(node);\n  }\n\n  /**\n   * Handle normal mathchar (as an mo).\n   * @param {TexParser} parser The current tex parser.\n   * @param {Symbol} mchar The parsed symbol.\n   */\n  export function mathchar0mo(parser: TexParser, mchar: Symbol) {\n    const def = mchar.attributes || {};\n    def['stretchy'] = false;\n    // @test Large Set\n    const node = parser.create('token', 'mo', def, mchar.char);\n    NodeUtil.setProperty(node, 'fixStretchy', true);\n    parser.configuration.addNode('fixStretchy', node);\n    // PROBLEM: Attributes stop working when Char7 are explicitly set.\n    parser.Push(node);\n  }\n\n  /**\n   * Handle mathchar in current family.\n   * @param {TexParser} parser The current tex parser.\n   * @param {Symbol} mchar The parsed symbol.\n   */\n  export function mathchar7(parser: TexParser, mchar: Symbol) {\n    const def = mchar.attributes || {mathvariant: TexConstant.Variant.NORMAL};\n    if (parser.stack.env['font']) {\n      // @test MathChar7 Single Font\n      def['mathvariant'] = parser.stack.env['font'];\n    }\n    // @test MathChar7 Single, MathChar7 Operator, MathChar7 Multi\n    const node = parser.create('token', 'mi', def, mchar.char);\n    parser.Push(node);\n  }\n\n  /**\n   * Handle delimiter.\n   * @param {TexParser} parser The current tex parser.\n   * @param {Symbol} delim The parsed delimiter symbol.\n   */\n  export function delimiter(parser: TexParser, delim: Symbol) {\n    let def = delim.attributes || {};\n    // @test Fenced2, Delimiter (AMS)\n    def = Object.assign({fence: false, stretchy: false}, def);\n    const node = parser.create('token', 'mo', def, delim.char);\n    parser.Push(node);\n  }\n\n\n  /**\n   * Parse an environment.\n   * @param {TexParser} parser The current tex parser.\n   * @param {string} env The name of the environment.\n   * @param {Function} func The parse method for the environment.\n   * @param {any[]} args A list of additional arguments.\n   */\n  export function environment(parser: TexParser, env: string, func: Function, args: any[]) {\n    const end = args[0];\n    let mml = parser.itemFactory.create('begin').setProperties({name: env, end: end});\n    mml = func(parser, mml, ...args.slice(1));\n    parser.Push(mml);\n  }\n\n}\n\nexport default ParseMethods;\n","/*************************************************************\n *\n *  Copyright (c) 2018-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Factory generating maps to keep options for the TeX parser.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\nimport StackItemFactory from './StackItemFactory.js';\nimport {Tags} from './Tags.js';\nimport {SubHandlers} from './MapHandler.js';\nimport {NodeFactory} from './NodeFactory.js';\nimport NodeUtil from './NodeUtil.js';\nimport {MmlNode} from '../../core/MmlTree/MmlNode.js';\nimport TexParser from './TexParser.js';\nimport {defaultOptions, OptionList} from '../../util/Options.js';\nimport {ParserConfiguration} from './Configuration.js';\n\n\n/**\n * @class\n */\nexport default class ParseOptions {\n\n  /**\n   * A set of sub handlers\n   * @type {SubHandlers}\n   */\n  public handlers: SubHandlers;\n\n  /**\n   * A set of options, mapping names to string or boolean values.\n   * @type {OptionList}\n   */\n  public options: OptionList = {};\n\n  /**\n   * The current item factory.\n   * @type {StackItemFactory}\n   */\n  public itemFactory: StackItemFactory;\n\n  /**\n   * The current node factory.\n   * @type {NodeFactory}\n   */\n  public nodeFactory: NodeFactory;\n\n  /**\n   * The current tagging object.\n   * @type {Tags}\n   */\n  public tags: Tags;\n\n  /**\n   * Storage area for parser-specific package data (indexed by package name)\n   * @type {Map<string, any>}\n   */\n  public packageData: Map<string, any> = new Map();\n\n  // Fields for ephemeral options, i.e., options that will be cleared for each\n  // run of the parser.\n  /**\n   * Stack of previous tex parsers. This is used to keep track of parser\n   * settings when expressions are recursively parsed.\n   * @type {TexParser[]}\n   */\n  public parsers: TexParser[] = [];\n\n\n  /**\n   * The current root node.\n   * @type {MmlNode}\n   */\n  public root: MmlNode = null;\n\n  /**\n   * List of node lists saved with respect to some property or their kind.\n   * @type {{[key: string]: MmlNode[]}}\n   */\n  public nodeLists: {[key: string]: MmlNode[]} = {};\n\n  /**\n   * Error state of the parser.\n   * @type {boolean}\n   */\n  public error: boolean = false;\n\n\n\n  /**\n   * @constructor\n   * @param {Configuration} configuration Configuration object of the current\n   *     TeX parser.\n   * @param {OptionList[]} options   [TeX options, Tag options, {packages}]\n   */\n  public constructor(configuration: ParserConfiguration, options: OptionList[] = []) {\n    this.handlers = configuration.handlers;\n    // Add node factory methods from packages.\n    this.nodeFactory = new NodeFactory();\n    this.nodeFactory.configuration = this;\n    this.nodeFactory.setCreators(configuration.nodes);\n    // Add stackitems from packages.\n    this.itemFactory = new StackItemFactory(configuration.items);\n    this.itemFactory.configuration = this;\n    // Set default options for parser from packages and for tags.\n    defaultOptions(this.options, ...options);\n    defaultOptions(this.options, configuration.options);\n  }\n\n\n  // Methods for dealing with ephemeral fields.\n  /**\n   * Pushes a new tex parser onto the stack.\n   * @param {TexParser} parser The new parser.\n   */\n  public pushParser(parser: TexParser) {\n    this.parsers.unshift(parser);\n  }\n\n\n  /**\n   * Pops a parser of the tex parser stack.\n   */\n  public popParser() {\n    this.parsers.shift();\n  }\n\n\n  /**\n   * @return {TexParser} The currently active tex parser.\n   */\n  public get parser(): TexParser {\n    return this.parsers[0];\n  }\n\n  /**\n   * Clears all the ephemeral options.\n   */\n  public clear() {\n    this.parsers = [];\n    this.root = null;\n    this.nodeLists = {};\n    this.error = false;\n    this.tags.resetTag();\n  }\n\n\n  /**\n   * Saves a tree node to a list of nodes for post processing.\n   * @param {string} property The property name that will be used for\n   *     postprocessing.\n   * @param {MmlNode} node The node to save.\n   */\n  public addNode(property: string, node: MmlNode) {\n    let list = this.nodeLists[property];\n    if (!list) {\n      list = this.nodeLists[property] = [];\n    }\n    list.push(node);\n    if (node.kind !== property) {\n      //\n      // If the list is not just for its kind, record that it is in this list\n      //   so that if it is copied, the copy can also be added to the list.\n      //\n      const inlists = (NodeUtil.getProperty(node, 'in-lists') as string || '');\n      const lists = (inlists ? inlists.split(/,/) : []).concat(property).join(',');\n      NodeUtil.setProperty(node, 'in-lists', lists);\n    }\n  }\n\n\n  /**\n   * Gets a saved node list with respect to a given property. It first ensures\n   * that all the nodes are \"live\", i.e., actually live in the current\n   * tree. Sometimes nodes are created, saved in the node list but discarded\n   * later in the parsing. These will be filtered out here.\n   *\n   * NB: Do not use this method before the root field of the options is\n   * set. Otherwise, your node list will always be empty!\n   * @param {string} property The property for which to retrieve the node list.\n   */\n  public getList(property: string) {\n    let list = this.nodeLists[property] || [];\n    let result = [];\n    for (let node of list) {\n      if (this.inTree(node)) {\n        result.push(node);\n      }\n    }\n    this.nodeLists[property] = result;\n    return result;\n  }\n\n\n  /**\n   * Remove a list of nodes from a saved list (e.g., when a filter removes the\n   * node from the DOM, like for munderover => munder).\n   *\n   * @param {string} property The property from which to remove nodes.\n   * @param {MmlNode[]} nodes The nodes to remove.\n   */\n  public removeFromList(property: string, nodes: MmlNode[]) {\n    const list = this.nodeLists[property] || [];\n    for (const node of nodes) {\n      const i = list.indexOf(node);\n      if (i >= 0) {\n        list.splice(i, 1);\n      }\n    }\n  }\n\n\n  /**\n   * Tests if the node is in the tree spanned by the current root node.\n   * @param {MmlNode} node The node to test.\n   */\n  private inTree(node: MmlNode) {\n    while (node && node !== this.root) {\n      node = node.parent;\n    }\n    return !!node;\n  }\n\n}\n","/*************************************************************\n *\n *  Copyright (c) 2009-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Stack items hold information on the TexParser stack.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\nimport {MmlNode} from '../../core/MmlTree/MmlNode.js';\nimport {FactoryNodeClass} from '../../core/Tree/Factory.js';\nimport TexError from './TexError.js';\nimport StackItemFactory from './StackItemFactory.js';\n\n// Union types for abbreviation.\nexport type EnvProp = string | number | boolean;\n\nexport type EnvList = {[key: string]: EnvProp};\n\n// This is the type for all fields that used to be set with With.\nexport type Prop = string | number | boolean | MmlNode | PropList;\n\nexport type PropList = {[key: string]: Prop};\n\nexport type CheckType = [(MmlNode | StackItem)[], boolean];\n\n\nexport interface NodeStack {\n\n  /**\n   * Get or set the topmost element on the node stack without removing it.\n   * @return {MmlNode} The topmost node on the stack.\n   */\n  First: MmlNode;\n\n  /**\n   * Get or set the last element on the node stack without removing it.\n   * @return {MmlNode} The last node on the stack.\n   */\n  Last: MmlNode;\n\n  /**\n   * @return {MmlNode} The topmost node on the item's node stack.\n   */\n  Pop(): MmlNode | void;\n\n  /**\n   * Pushes new nodes onto the items node stack.\n   * @param {MmlNode[]} ...nodes A list of nodes.\n   */\n  Push(...nodes: MmlNode[]): void;\n\n  /**\n   * Get the top n elements on the node stack without removing them.\n   * @param {number=} n Number of elements that should be returned.\n   * @return {MmlNode[]} List of nodes on top of stack.\n   */\n  Peek(n?: number): MmlNode[];\n\n  /**\n   * @return {number} The size of the stack.\n   */\n  Size(): number;\n\n  /**\n   * Clears the stack.\n   */\n  Clear(): void;\n\n  /**\n   * Returns nodes on the stack item's node stack as an Mml node. I.e., in case\n   * the item contains more than one node, it creates an mrow.\n   * @param {boolean=} inferred If set the mrow will be an inferred mrow.\n   * @param {boolean=} forceRow If set an mrow will be created, regardless of\n   *     how many nodes the item contains.\n   * @return {MmlNode} The topmost Mml node.\n   */\n  toMml(inferred?: boolean, forceRow?: boolean): MmlNode;\n\n}\n\n\nexport abstract class MmlStack implements NodeStack {\n\n  /**\n   * @constructor\n   * @extends {NodeStack}\n   * @param {MmlNode[]} nodes An initial list of nodes to put on the stack.\n   */\n  constructor(private _nodes: MmlNode[]) { }\n\n  /**\n   * @return {MmlNode[]} The nodes on the stack.\n   */\n  protected get nodes(): MmlNode[] {\n    return this._nodes;\n  }\n\n  /**\n   * @override\n   */\n  public Push(...nodes: MmlNode[]) {\n    this._nodes.push(...nodes);\n  }\n\n\n  /**\n   * @override\n   */\n  public Pop(): MmlNode {\n    return this._nodes.pop();\n  }\n\n\n  /**\n   * @override\n   */\n  public get First(): MmlNode {\n    return this._nodes[this.Size() - 1];\n  }\n\n\n  /**\n   * @override\n   */\n  public set First(node: MmlNode) {\n    this._nodes[this.Size() - 1] = node;\n  }\n\n\n  /**\n   * @override\n   */\n  public get Last(): MmlNode {\n    return this._nodes[0];\n  }\n\n\n  /**\n   * @override\n   */\n  public set Last(node: MmlNode) {\n    this._nodes[0] = node;\n  }\n\n\n  /**\n   * @override\n   */\n  public Peek(n?: number): MmlNode[] {\n    if (n == null) {\n      n = 1;\n    }\n    return this._nodes.slice(this.Size() - n);\n  }\n\n\n  /**\n   * @override\n   */\n  public Size(): number {\n    return this._nodes.length;\n  }\n\n\n  /**\n   * @override\n   */\n  public Clear(): void {\n    this._nodes = [];\n  }\n\n\n  protected abstract get factory(): StackItemFactory;\n\n  /**\n   * @override\n   */\n  public toMml(inferred: boolean = true, forceRow?: boolean) {\n    if (this._nodes.length === 1 && !forceRow) {\n      return this.First;\n    }\n    // @test Two Identifiers\n    return this.create(\n      'node', inferred ? 'inferredMrow' : 'mrow', this._nodes, {});\n  }\n\n\n  /**\n   * Convenience method to create nodes with the node factory on this stack.\n   * @param {string} kind The kind of node to create.\n   * @param {any[]} ...rest The remaining arguments for the creation method.\n   * @return {MmlNode} The newly created node.\n   */\n  public create(kind: string, ...rest: any[]): MmlNode {\n    return this.factory.configuration.nodeFactory.create(kind, ...rest);\n  }\n\n}\n\nexport interface StackItem extends NodeStack {\n\n\n  /**\n   * Type of stack item.\n   * @type {string}\n   */\n  kind: string;\n\n  /**\n   * Is this a closing item, e.g., end.\n   * @type {boolean}\n   */\n  isClose: boolean;\n\n  /**\n   * Is this an opening item, e.g., begin.\n   * @type {boolean}\n   */\n  isOpen: boolean;\n\n  /**\n   * Is this a finalising item, i.e., one that only collects nodes.\n   * @type {boolean}\n   */\n  isFinal: boolean;\n\n  /**\n   * Global properties of the parser.\n   * @type {EnvList}\n   */\n   global: EnvList;\n\n  /**\n   * Local properties of the stack item.\n   * @type {EnvList}\n   */\n   env: EnvList;\n\n  /**\n   * Copy local properties when pushed to stack?\n   * @type {boolean}\n   */\n   copyEnv: boolean;\n\n  /**\n   * Tests if item is of the given type.\n   * @param {string} kind The type.\n   * @return {boolean} True if item is of that type.\n   */\n  isKind(kind: string): boolean;\n\n  /**\n   * Get a property of the item.\n   * @param {string} key Property name.\n   * @return {Prop} Property value if it exists.\n   */\n  getProperty(key: string): Prop;\n\n  /**\n   * Set a property.\n   * @param {string} key Property name.\n   * @param {Prop} value Property value.\n   * @return {StackItem} The item for pipelining.\n   */\n  setProperty(key: string, value: Prop): StackItem;\n\n  /**\n   * Sets a list of properties.\n   * @param {PropList} def The properties to set.\n   * @return {StackItem} Returns the stack item object for pipelining.\n   */\n  setProperties(def: PropList): StackItem;\n\n  /**\n   * Convenience method for returning the string property \"name\".\n   * @return {string} The value for the name property.\n   */\n  getName(): string;\n\n  /**\n   * TeX parsing in MathJax is essentially implemented via a nested stack\n   * automaton. That is the tex parser works on a stack, and each item on the\n   * stack can have a data stack of its own. Data on the stack is either a stack\n   * item or a node.\n   *\n   * The checkItem method effectively implements the recursive checking of\n   * input data from the parser against data recursively given on the stack.\n   *\n   * I.e., new input is parsed resulting in a new item. When pushed on the stack\n   * it is checked against the top most item on the stack. This either leads to\n   * the item being pushed onto the stack or combined with the top most\n   * element(s), pushing a new item, which is recursively checked, unless an\n   * error is thrown.\n   *\n   * A simple example: If \\\\end{foo} is parsed, an endItem is created, pushed on\n   * the stack. Nodes on the stack are collapsed into content of the 'foo'\n   * environment, until a beginItem for 'foo' is found.  If a beginItem is not\n   * for 'foo' or does not exist an error is thrown.\n   *\n   * @param {StackItem} item The pushed item.\n   * @return {CheckType} True/false or an item or node.\n   */\n  checkItem(item: StackItem): CheckType;\n\n}\n\nexport interface StackItemClass extends FactoryNodeClass<StackItem> {\n  // new (factory: StackItemFactory, ...args: any[]): StackItem;\n}\n\n\n/**\n * Abstract basic item class that implements most of the stack item\n * functionality. In particular, it contains the base method for checkItem.\n */\nexport abstract class BaseItem extends MmlStack implements StackItem {\n\n  /**\n   * The fail value.\n   * @type {CheckType}\n   */\n  protected static fail: CheckType = [null, false];\n\n  /**\n   * The success value.\n   * @type {CheckType}\n   */\n  protected static success: CheckType = [null, true];\n\n  /**\n   * A list of basic errors.\n   * @type {{[key: string]: string[]}}\n   */\n  protected static errors: {[key: string]: string[]} = {\n    // @test ExtraOpenMissingClose\n    end: ['MissingBeginExtraEnd', 'Missing \\\\begin{%1} or extra \\\\end{%1}'],\n    // @test ExtraCloseMissingOpen\n    close: ['ExtraCloseMissingOpen', 'Extra close brace or missing open brace'],\n    // @test MissingLeftExtraRight\n    right: ['MissingLeftExtraRight', 'Missing \\\\left or extra \\\\right'],\n    middle: ['ExtraMiddle', 'Extra \\\\middle']\n  };\n\n\n  /**\n   * @override\n   */\n  public global: EnvList = {};\n\n  private _env: EnvList;\n\n  private _properties: PropList = {};\n\n\n  /**\n   * @constructor\n   * @extends {MmlStack}\n   */\n  constructor(protected factory: StackItemFactory, ...nodes: MmlNode[]) {\n    super(nodes);\n    if (this.isOpen) {\n      this._env = {};\n    }\n  }\n\n  /**\n   * @return {string} The type of the stack item.\n   */\n    public get kind(): string {\n    return 'base';\n  }\n\n  /**\n   * @return {EnvList} Get the private environment\n   */\n  public get env(): EnvList {\n    return this._env;\n  }\n\n  /**\n   * Set the private environment\n   * @param {EnvList} value New private environemt.\n   */\n  public set env(value: EnvList) {\n    this._env = value;\n  }\n\n  /**\n   * Default is to copy local environment when pushed on stack\n   */\n  public get copyEnv() {\n    return true;\n  }\n\n  /**\n   * @override\n   */\n  public getProperty(key: string): Prop {\n    return this._properties[key];\n  }\n\n  /**\n   * @override\n   */\n  public setProperty(key: string, value: Prop) {\n    this._properties[key] = value;\n    return this;\n  }\n\n\n  /**\n   * @return {boolean} True if item is an opening entity, i.e., it expects a\n   *     closing counterpart on the stack later.\n   */\n  get isOpen(): boolean {\n    return false;\n  }\n\n  /**\n   * @return {boolean} True if item is an closing entity, i.e., it needs an\n   *     opening counterpart already on the stack.\n   */\n  get isClose(): boolean {\n    return false;\n  }\n\n\n  /**\n   * @return {boolean} True if item is final, i.e., it contains one or multiple\n   *      finished parsed nodes.\n   */\n  get isFinal(): boolean {\n    return false;\n  }\n\n\n  /**\n   * @override\n   */\n  public isKind(kind: string) {\n    return kind === this.kind;\n  }\n\n\n  /**\n   * @override\n   */\n  public checkItem(item: StackItem): CheckType {\n    if (item.isKind('over') && this.isOpen) {\n      item.setProperty('num', this.toMml(false));\n      this.Clear();\n    }\n    if (item.isKind('cell') && this.isOpen) {\n      if (item.getProperty('linebreak')) {\n        return BaseItem.fail;\n      }\n      // @test Ampersand-error\n      throw new TexError('Misplaced', 'Misplaced %1', item.getName());\n    }\n    if (item.isClose && this.getErrors(item.kind)) {\n      // @test ExtraOpenMissingClose, ExtraCloseMissingOpen,\n      //       MissingLeftExtraRight, MissingBeginExtraEnd\n      const [id, message] = this.getErrors(item.kind);\n      throw new TexError(id, message, item.getName());\n    }\n    if (!item.isFinal) {\n      return BaseItem.success;\n    }\n    this.Push(item.First);\n    return BaseItem.fail;\n  }\n\n\n  /**\n   * Clears the item's environment.\n   */\n  public clearEnv() {\n    for (const id of Object.keys(this.env)) {\n      delete this.env[id];\n    }\n  }\n\n\n  /**\n   * @override\n   */\n  public setProperties(def: PropList) {\n    Object.assign(this._properties, def);\n    return this;\n  }\n\n\n  /**\n   * @override\n   */\n  public getName() {\n    return this.getProperty('name') as string;\n  }\n\n\n  /**\n   * @override\n   */\n  public toString() {\n    return this.kind + '[' + this.nodes.join('; ') + ']';\n  }\n\n\n  /**\n   * Get error messages for a particular types of stack items. This reads error\n   * messages from the static errors object, which can be extended in\n   * subclasses.\n   * @param {string} kind The stack item type.\n   * @return {string[]} The list of arguments for the TeXError.\n   */\n  public getErrors(kind: string): string[] {\n    const CLASS = (this.constructor as typeof BaseItem);\n    return (CLASS.errors || {})[kind] || BaseItem.errors[kind];\n  }\n\n}\n","/*************************************************************\n *\n *  Copyright (c) 2009-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview A factory for stack items. This allows particular items to be\n *     overwritten later.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\nimport {StackItemClass, StackItem, BaseItem} from './StackItem.js';\nimport ParseOptions from './ParseOptions.js';\nimport {AbstractFactory} from '../../core/Tree/Factory.js';\n\n\nclass DummyItem extends BaseItem {}\n\n/**\n * The StackItemFactory is initially populated with the default stack item\n * classes. They can be changed, deleted or added to, if and when necessary.\n *\n * @constructor\n * @extends {AbstractFactory}\n */\nexport default class StackItemFactory extends AbstractFactory<StackItem, StackItemClass> {\n\n  /**\n   * @override\n   */\n  public static DefaultStackItems: {[kind: string]: StackItemClass} = {\n    [DummyItem.prototype.kind]: DummyItem\n  };\n\n\n  /**\n   * @override\n   */\n  public defaultKind = 'dummy';\n\n\n  /**\n   * The parser configuration.\n   * @type {ParseOptions}\n   */\n  public configuration: ParseOptions = null;\n\n}\n","/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Constant definitions for the TeX Parser. These should\n *     eventually be combined with the MathML structure.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\nexport namespace TexConstant {\n\n  export const Variant = {\n    NORMAL: 'normal',\n    BOLD: 'bold',\n    ITALIC: 'italic',\n    BOLDITALIC: 'bold-italic',\n    DOUBLESTRUCK: 'double-struck',\n    FRAKTUR: 'fraktur',\n    BOLDFRAKTUR: 'bold-fraktur',\n    SCRIPT: 'script',\n    BOLDSCRIPT: 'bold-script',\n    SANSSERIF: 'sans-serif',\n    BOLDSANSSERIF: 'bold-sans-serif',\n    SANSSERIFITALIC: 'sans-serif-italic',\n    SANSSERIFBOLDITALIC: 'sans-serif-bold-italic',\n    MONOSPACE: 'monospace',\n    INITIAL: 'inital',\n    TAILED: 'tailed',\n    LOOPED: 'looped',\n    STRETCHED: 'stretched',\n    CALLIGRAPHIC: '-tex-calligraphic',\n    BOLDCALLIGRAPHIC: '-tex-bold-calligraphic',\n    OLDSTYLE: '-tex-oldstyle',\n    BOLDOLDSTYLE: '-tex-bold-oldstyle',\n    MATHITALIC: '-tex-mathit'\n  };\n\n  export const Form = {\n    PREFIX: 'prefix',\n    INFIX: 'infix',\n    POSTFIX: 'postfix'\n  };\n\n  export const LineBreak = {\n    AUTO: 'auto',\n    NEWLINE: 'newline',\n    NOBREAK: 'nobreak',\n    GOODBREAK: 'goodbreak',\n    BADBREAK: 'badbreak'\n  };\n\n  export const LineBreakStyle = {\n    BEFORE: 'before',\n    AFTER: 'after',\n    DUPLICATE: 'duplicate',\n    INFIXLINBREAKSTYLE: 'infixlinebreakstyle'\n  };\n\n  export const IndentAlign = {\n    LEFT: 'left',\n    CENTER: 'center',\n    RIGHT: 'right',\n    AUTO: 'auto',\n    ID: 'id',\n    INDENTALIGN: 'indentalign'\n  };\n\n  export const IndentShift = {\n    INDENTSHIFT: 'indentshift'\n  };\n\n  export const LineThickness = {\n    THIN: 'thin',\n    MEDIUM: 'medium',\n    THICK: 'thick'\n  };\n\n  export const Notation = {\n    LONGDIV: 'longdiv',\n    ACTUARIAL: 'actuarial',\n    PHASORANGLE: 'phasorangle',\n    RADICAL: 'radical',\n    BOX: 'box',\n    ROUNDEDBOX: 'roundedbox',\n    CIRCLE: 'circle',\n    LEFT: 'left',\n    RIGHT: 'right',\n    TOP: 'top',\n    BOTTOM: 'bottom',\n    UPDIAGONALSTRIKE: 'updiagonalstrike',\n    DOWNDIAGONALSTRIKE: 'downdiagonalstrike',\n    VERTICALSTRIKE: 'verticalstrike',\n    HORIZONTALSTRIKE: 'horizontalstrike',\n    NORTHEASTARROW: 'northeastarrow',\n    MADRUWB: 'madruwb',\n    UPDIAGONALARROW: 'updiagonalarrow'\n  };\n\n  export const Align = {\n    TOP: 'top',\n    BOTTOM: 'bottom',\n    CENTER: 'center',\n    BASELINE: 'baseline',\n    AXIS: 'axis',\n    LEFT: 'left',\n    RIGHT: 'right'\n  };\n\n  export const Lines = {\n    NONE: 'none',\n    SOLID: 'solid',\n    DASHED: 'dashed'\n  };\n\n  export const Side = {\n    LEFT: 'left',\n    RIGHT: 'right',\n    LEFTOVERLAP: 'leftoverlap',\n    RIGHTOVERLAP: 'rightoverlap'\n  };\n\n  export const Width = {\n    AUTO: 'auto',\n    FIT: 'fit'\n  };\n\n  export const Actiontype = {\n    TOGGLE: 'toggle',\n    STATUSLINE: 'statusline',\n    TOOLTIP: 'tooltip',\n    INPUT: 'input'\n  };\n\n  export const Overflow = {\n    LINBREAK: 'linebreak',\n    SCROLL: 'scroll',\n    ELIDE: 'elide',\n    TRUNCATE: 'truncate',\n    SCALE: 'scale'\n  };\n\n  export const Unit = {\n    EM: 'em',\n    EX: 'ex',\n    PX: 'px',\n    IN: 'in',\n    CM: 'cm',\n    MM: 'mm',\n    PT: 'pt',\n    PC: 'pc'\n  };\n\n}\n","/*************************************************************\n *\n *  Copyright (c) 2018-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Configuration for the Base LaTeX parser.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\nimport {Configuration} from '../Configuration.js';\nimport {MapHandler} from '../MapHandler.js';\nimport TexError from '../TexError.js';\nimport NodeUtil from '../NodeUtil.js';\nimport TexParser from '../TexParser.js';\nimport {CharacterMap} from '../SymbolMap.js';\nimport * as bitem from './BaseItems.js';\nimport {AbstractTags} from '../Tags.js';\nimport './BaseMappings.js';\nimport {getRange} from '../../../core/MmlTree/OperatorDictionary.js';\nimport {MmlNode} from '../../../core/MmlTree/MmlNode.js';\nimport ParseOptions from '../ParseOptions.js';\n\n/**\n * Remapping some ASCII characters to their Unicode operator equivalent.\n */\nnew CharacterMap('remap', null, {\n  '-':   '\\u2212',\n  '*':   '\\u2217',\n  '`':   '\\u2018'   // map ` to back quote\n});\n\n\n/**\n * Default handling of characters (as <mo> elements).\n * @param {TexParser} parser The calling parser.\n * @param {string} char The character to parse.\n */\nexport function Other(parser: TexParser, char: string) {\n  const font = parser.stack.env['font'];\n  let def = font ?\n    // @test Other Font\n    {mathvariant: parser.stack.env['font']} : {};\n  const remap = (MapHandler.getMap('remap') as CharacterMap).lookup(char);\n  const range = getRange(char);\n  const type = (range ? range[3] : 'mo');\n  // @test Other\n  // @test Other Remap\n  let mo = parser.create('token', type, def, (remap ? remap.char : char));\n  range[4] && mo.attributes.set('mathvariant', range[4]);\n  if (type === 'mo') {\n    NodeUtil.setProperty(mo, 'fixStretchy', true);\n    parser.configuration.addNode('fixStretchy', mo);\n  }\n  parser.Push(mo);\n}\n\n\n/**\n * Handle undefined control sequence.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The name of the control sequence.\n */\nfunction csUndefined(_parser: TexParser, name: string) {\n  // @test Undefined-CS\n  throw new TexError('UndefinedControlSequence',\n                      'Undefined control sequence %1', '\\\\' + name);\n}\n\n\n/**\n * Handle undefined environments.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The name of the control sequence.\n */\nfunction envUndefined(_parser: TexParser, env: string) {\n  // @test Undefined-Env\n  throw new TexError('UnknownEnv', 'Unknown environment \\'%1\\'', env);\n}\n\n/**\n * Filter for removing spacing following \\nonscript\n * @param{ParseOptions} data The active tex parser.\n */\nfunction filterNonscript({data}: {data: ParseOptions}) {\n  for (const mml of data.getList('nonscript')) {\n    //\n    //  This is the list of mspace elements or mrow > mstyle > mspace\n    //    that followed \\nonscript macros to be tested for removal.\n    //\n    if (mml.attributes.get('scriptlevel') > 0) {\n      //\n      //  The mspace needs to be removed, since we are in a script style.\n      //  Remove it from the DOM and from the list of mspace elements.\n      //\n      const parent = mml.parent;\n      parent.childNodes.splice(parent.childIndex(mml), 1);\n      data.removeFromList(mml.kind, [mml]);\n      //\n      //  If it is an mrow > mstyle > mspace, then we have just\n      //    removed the mrow from its list, and must remove\n      //    the mstyle and mspace from their lists as well.\n      //\n      if (mml.isKind('mrow')) {\n        const mstyle = mml.childNodes[0] as MmlNode;\n        data.removeFromList('mstyle', [mstyle]);\n        data.removeFromList('mspace', mstyle.childNodes[0].childNodes as MmlNode[]);\n      }\n    } else if (mml.isKind('mrow')) {\n      //\n      // This is an mrow > mstyle > mspace  but we're not in a script\n      //   style, so remove the mrow that we had added in the NonscriptItem.\n      //\n      mml.parent.replaceChild(mml.childNodes[0], mml);\n      data.removeFromList('mrow', [mml]);\n    }\n  }\n}\n\n\n/**\n * @constructor\n * @extends {AbstractTags}\n */\nexport class BaseTags extends AbstractTags { }\n\n\n/**\n * The base configuration.\n * @type {Configuration}\n */\nexport const BaseConfiguration: Configuration = Configuration.create(\n  'base',  {\n    handler: {\n      character: ['command', 'special', 'letter', 'digit'],\n      delimiter: ['delimiter'],\n      // Note, that the position of the delimiters here is important!\n      macro: ['delimiter', 'macros', 'mathchar0mi', 'mathchar0mo', 'mathchar7'],\n      environment: ['environment']\n    },\n    fallback: {\n      character: Other,\n      macro: csUndefined,\n      environment: envUndefined\n    },\n    items: {\n      // BaseItems\n      [bitem.StartItem.prototype.kind]: bitem.StartItem,\n      [bitem.StopItem.prototype.kind]: bitem.StopItem,\n      [bitem.OpenItem.prototype.kind]: bitem.OpenItem,\n      [bitem.CloseItem.prototype.kind]: bitem.CloseItem,\n      [bitem.PrimeItem.prototype.kind]: bitem.PrimeItem,\n      [bitem.SubsupItem.prototype.kind]: bitem.SubsupItem,\n      [bitem.OverItem.prototype.kind]: bitem.OverItem,\n      [bitem.LeftItem.prototype.kind]: bitem.LeftItem,\n      [bitem.Middle.prototype.kind]: bitem.Middle,\n      [bitem.RightItem.prototype.kind]: bitem.RightItem,\n      [bitem.BeginItem.prototype.kind]: bitem.BeginItem,\n      [bitem.EndItem.prototype.kind]: bitem.EndItem,\n      [bitem.StyleItem.prototype.kind]: bitem.StyleItem,\n      [bitem.PositionItem.prototype.kind]: bitem.PositionItem,\n      [bitem.CellItem.prototype.kind]: bitem.CellItem,\n      [bitem.MmlItem.prototype.kind]: bitem.MmlItem,\n      [bitem.FnItem.prototype.kind]: bitem.FnItem,\n      [bitem.NotItem.prototype.kind]: bitem.NotItem,\n      [bitem.NonscriptItem.prototype.kind]: bitem.NonscriptItem,\n      [bitem.DotsItem.prototype.kind]: bitem.DotsItem,\n      [bitem.ArrayItem.prototype.kind]: bitem.ArrayItem,\n      [bitem.EqnArrayItem.prototype.kind]: bitem.EqnArrayItem,\n      [bitem.EquationItem.prototype.kind]: bitem.EquationItem\n    },\n    options: {\n      maxMacros: 1000,\n      baseURL: (typeof(document) === 'undefined' ||\n                document.getElementsByTagName('base').length === 0) ?\n                '' : String(document.location).replace(/#.*$/, '')\n    },\n    tags: {\n      base: BaseTags\n    },\n    postprocessors: [[filterNonscript, -4]]\n  }\n);\n","/*************************************************************\n *\n *  Copyright (c) 2009-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Stack items for basic Tex parsing.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\n\nimport {MapHandler} from '../MapHandler.js';\nimport {CharacterMap} from '../SymbolMap.js';\nimport {entities} from '../../../util/Entities.js';\nimport {MmlNode, TextNode, TEXCLASS} from '../../../core/MmlTree/MmlNode.js';\nimport {MmlMsubsup} from '../../../core/MmlTree/MmlNodes/msubsup.js';\nimport TexError from '../TexError.js';\nimport ParseUtil from '../ParseUtil.js';\nimport NodeUtil from '../NodeUtil.js';\nimport {Property} from '../../../core/Tree/Node.js';\nimport StackItemFactory from '../StackItemFactory.js';\nimport {CheckType, BaseItem, StackItem, EnvList} from '../StackItem.js';\n\n\n/**\n * Initial item on the stack. It's pushed when parsing begins.\n */\nexport class StartItem extends BaseItem {\n\n  /**\n   * @override\n   */\n  constructor(factory: StackItemFactory, public global: EnvList) {\n    super(factory);\n  }\n\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'start';\n  }\n\n\n  /**\n   * @override\n   */\n  get isOpen() {\n    return true;\n  }\n\n  /**\n   * @override\n   */\n  public checkItem(item: StackItem): CheckType {\n    if (item.isKind('stop')) {\n      let node = this.toMml();\n      if (!this.global.isInner) {\n        node = this.factory.configuration.tags.finalize(node, this.env);\n      }\n      return [[this.factory.create('mml', node)], true];\n    }\n    return super.checkItem(item);\n  }\n\n}\n\n\n/**\n * Final item on the stack. Errors will be thrown if other items than the start\n * item are still on the stack.\n */\nexport class StopItem extends BaseItem {\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'stop';\n  }\n\n\n  /**\n   * @override\n   */\n  get isClose() {\n    return true;\n  }\n\n}\n\n\n/**\n * Item indicating an open brace.\n */\nexport class OpenItem extends BaseItem {\n\n\n  /**\n   * @override\n   */\n  protected static errors = Object.assign(Object.create(BaseItem.errors), {\n    // @test ExtraOpenMissingClose\n    'stop': ['ExtraOpenMissingClose',\n             'Extra open brace or missing close brace']\n  });\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'open';\n  }\n\n\n  /**\n   * @override\n   */\n  get isOpen() {\n    return true;\n  }\n\n  /**\n   * @override\n   */\n  public checkItem(item: StackItem): CheckType {\n    if (item.isKind('close')) {\n      // @test PrimeSup\n      let mml = this.toMml();\n      const node = this.create('node', 'TeXAtom', [mml]);\n      return [[this.factory.create('mml', node)], true];\n    }\n    return super.checkItem(item);\n  }\n}\n\n\n/**\n * Item indicating a close brace. Collapses stack until an OpenItem is found.\n */\nexport class CloseItem extends BaseItem {\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'close';\n  }\n\n\n  /**\n   * @override\n   */\n  get isClose() {\n    return true;\n  }\n\n}\n\n\n/**\n * Item indicating an we are currently dealing with a prime mark.\n */\nexport class PrimeItem extends BaseItem {\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'prime';\n  }\n\n  /**\n   * @override\n   */\n  public checkItem(item: StackItem): CheckType {\n    let [top0, top1] = this.Peek(2);\n    if (!NodeUtil.isType(top0, 'msubsup') || NodeUtil.isType(top0, 'msup')) {\n      // @test Prime, Double Prime\n      const node = this.create('node', 'msup', [top0, top1]);\n      return [[node, item], true];\n    }\n    NodeUtil.setChild(top0, (top0 as MmlMsubsup).sup, top1);\n    return [[top0, item], true];\n  }\n}\n\n\n/**\n * Item indicating an we are currently dealing with a sub/superscript\n * expression.\n */\nexport class SubsupItem extends BaseItem {\n\n  /**\n   * @override\n   */\n  protected static errors = Object.assign(Object.create(BaseItem.errors), {\n    // @test MissingScript Sub, MissingScript Sup\n    'stop': ['MissingScript',\n             'Missing superscript or subscript argument'],\n    // @test MissingOpenForSup\n    'sup': ['MissingOpenForSup',\n            'Missing open brace for superscript'],\n    // @test MissingOpenForSub\n    'sub': ['MissingOpenForSub',\n            'Missing open brace for subscript']\n  });\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'subsup';\n  }\n\n  /**\n   * @override\n   */\n  public checkItem(item: StackItem): CheckType | null {\n    if (item.isKind('open') || item.isKind('left')) {\n      return BaseItem.success;\n    }\n    const top = this.First;\n    const position = this.getProperty('position') as number;\n    if (item.isKind('mml')) {\n      if (this.getProperty('primes')) {\n        if (position !== 2) {\n          // @test Prime on Sub\n          NodeUtil.setChild(top, 2, this.getProperty('primes') as MmlNode);\n        } else {\n          // @test Prime on Prime\n          NodeUtil.setProperty(this.getProperty('primes') as MmlNode, 'variantForm', true);\n          const node = this.create('node', 'mrow', [this.getProperty('primes') as MmlNode, item.First]);\n          item.First = node;\n        }\n      }\n      NodeUtil.setChild(top, position, item.First);\n      if (this.getProperty('movesupsub') != null) {\n        // @test Limits Subsup (currently does not work! Check again!)\n        NodeUtil.setProperty(top, 'movesupsub', this.getProperty('movesupsub') as Property);\n      }\n      const result = this.factory.create('mml', top);\n      return [[result], true];\n    }\n    if (super.checkItem(item)[1]) {\n      // @test Brace Superscript Error, MissingOpenForSup, MissingOpenForSub\n      const error = this.getErrors(['', 'sub', 'sup'][position]);\n      throw new TexError(error[0], error[1], ...error.splice(2));\n    }\n    return null;\n  }\n\n}\n\n\n/**\n * Item indicating an we are currently dealing with an \\\\over command.\n */\nexport class OverItem extends BaseItem {\n\n  /**\n   * @override\n   */\n  constructor(factory: StackItemFactory) {\n    super(factory);\n    this.setProperty('name', '\\\\over');\n  }\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'over';\n  }\n\n\n  /**\n   * @override\n   */\n  get isClose() {\n    return true;\n  }\n\n\n  /**\n   * @override\n   */\n  public checkItem(item: StackItem): CheckType {\n    if (item.isKind('over')) {\n      // @test Double Over\n      throw new TexError(\n        'AmbiguousUseOf', 'Ambiguous use of %1', item.getName());\n    }\n    if (item.isClose) {\n      // @test Over\n      let mml = this.create('node',\n                            'mfrac', [this.getProperty('num') as MmlNode, this.toMml(false)]);\n      if (this.getProperty('thickness') != null) {\n        // @test Choose, Above, Above with Delims\n        NodeUtil.setAttribute(mml, 'linethickness',\n                              this.getProperty('thickness') as string);\n      }\n      if (this.getProperty('open') || this.getProperty('close')) {\n        // @test Choose\n        NodeUtil.setProperty(mml, 'withDelims', true);\n        mml = ParseUtil.fixedFence(this.factory.configuration,\n                                   this.getProperty('open') as string, mml,\n                                   this.getProperty('close') as string);\n      }\n      return [[this.factory.create('mml', mml), item], true];\n    }\n    return super.checkItem(item);\n  }\n\n\n  /**\n   * @override\n   */\n  public toString() {\n    return 'over[' + this.getProperty('num') +\n      ' / ' + this.nodes.join('; ') + ']';\n  }\n\n}\n\n\n/**\n * Item pushed when a \\\\left opening delimiter has been found.\n */\nexport class LeftItem extends BaseItem {\n\n  /**\n   * @override\n   */\n  protected static errors = Object.assign(Object.create(BaseItem.errors), {\n    // @test ExtraLeftMissingRight\n    'stop': ['ExtraLeftMissingRight',\n             'Extra \\\\left or missing \\\\right']\n  });\n\n\n  /**\n   * @override\n   */\n  constructor(factory: StackItemFactory, delim: string) {\n    super(factory);\n    this.setProperty('delim', delim);\n  }\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'left';\n  }\n\n\n  /**\n   * @override\n   */\n  get isOpen() {\n    return true;\n  }\n\n\n  /**\n   * @override\n   */\n  public checkItem(item: StackItem): CheckType {\n    // @test Missing Right\n    if (item.isKind('right')) {\n      //\n      //  Create the fenced structure as an mrow\n      //\n      return [[this.factory.create('mml', ParseUtil.fenced(\n        this.factory.configuration,\n        this.getProperty('delim') as string, this.toMml(),\n        item.getProperty('delim') as string, '', item.getProperty('color') as string))], true];\n    }\n    if (item.isKind('middle')) {\n      //\n      //  Add the middle delimiter, with empty open and close elements around it for spacing\n      //\n      const def = {stretchy: true} as any;\n      if (item.getProperty('color')) {\n        def.mathcolor = item.getProperty('color');\n      }\n      this.Push(\n        this.create('node', 'TeXAtom', [], {texClass: TEXCLASS.CLOSE}),\n        this.create('token', 'mo', def, item.getProperty('delim')),\n        this.create('node', 'TeXAtom', [], {texClass: TEXCLASS.OPEN})\n      );\n      this.env = {};         // Since \\middle closes the group, clear the environment\n      return [[this], true]; // this will reset the environment to its initial state\n    }\n    return super.checkItem(item);\n  }\n\n}\n\n/**\n * Item pushed when a \\\\middle delimiter has been found. Stack is\n * collapsed until a corresponding LeftItem is encountered.\n */\nexport class Middle extends BaseItem {\n\n  /**\n   * @override\n   */\n  constructor(factory: StackItemFactory, delim: string, color: string) {\n    super(factory);\n    this.setProperty('delim', delim);\n    color && this.setProperty('color', color);\n  }\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'middle';\n  }\n\n\n  /**\n   * @override\n   */\n  get isClose() {\n    return true;\n  }\n\n}\n\n/**\n * Item pushed when a \\\\right closing delimiter has been found. Stack is\n * collapsed until a corresponding LeftItem is encountered.\n */\nexport class RightItem extends BaseItem {\n\n  /**\n   * @override\n   */\n  constructor(factory: StackItemFactory, delim: string, color: string) {\n    super(factory);\n    this.setProperty('delim', delim);\n    color && this.setProperty('color', color);\n  }\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'right';\n  }\n\n\n  /**\n   * @override\n   */\n  get isClose() {\n    return true;\n  }\n\n}\n\n\n/**\n * Item pushed for opening an environment with \\\\begin{env}.\n */\nexport class BeginItem extends BaseItem {\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'begin';\n  }\n\n\n  /**\n   * @override\n   */\n  get isOpen() {\n    return true;\n  }\n\n  /**\n   * @override\n   */\n  public checkItem(item: StackItem): CheckType {\n    if (item.isKind('end')) {\n      if (item.getName() !== this.getName()) {\n        // @test EnvBadEnd\n        throw new TexError('EnvBadEnd', '\\\\begin{%1} ended with \\\\end{%2}',\n                           this.getName(), item.getName());\n      }\n      if (!this.getProperty('end')) {\n        // @test Hfill\n        return [[this.factory.create('mml', this.toMml())], true];\n      }\n      return BaseItem.fail;  // TODO: This case could probably go!\n    }\n    if (item.isKind('stop')) {\n      // @test EnvMissingEnd Array\n      throw new TexError('EnvMissingEnd', 'Missing \\\\end{%1}', this.getName());\n    }\n    return super.checkItem(item);\n  }\n\n}\n\n\n/**\n * Item pushed for closing an environment with \\\\end{env}. Stack is collapsed\n * until a corresponding BeginItem for 'env' is found. Error is thrown in case\n * other open environments interfere.\n */\nexport class EndItem extends BaseItem {\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'end';\n  }\n\n\n  /**\n   * @override\n   */\n  get isClose() {\n    return true;\n  }\n\n}\n\n\n/**\n * Item pushed for remembering styling information.\n */\nexport class StyleItem extends BaseItem {\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'style';\n  }\n\n  /**\n   * @override\n   */\n  public checkItem(item: StackItem): CheckType {\n    if (!item.isClose) {\n      return super.checkItem(item);\n    }\n    // @test Style\n    const mml = this.create('node', 'mstyle', this.nodes, this.getProperty('styles'));\n    return [[this.factory.create('mml', mml), item], true];\n  }\n\n}\n\n\n/**\n * Item pushed for remembering positioning information.\n */\nexport class PositionItem extends BaseItem {\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'position';\n  }\n\n\n  /**\n   * @override\n   */\n  public checkItem(item: StackItem): CheckType {\n    if (item.isClose) {\n      // @test MissingBoxFor\n      throw new TexError('MissingBoxFor', 'Missing box for %1', this.getName());\n    }\n    if (item.isFinal) {\n      let mml = item.toMml();\n      switch (this.getProperty('move')) {\n      case 'vertical':\n        // @test Raise, Lower, Raise Negative, Lower Negative\n        mml = this.create('node', 'mpadded', [mml],\n                          {height: this.getProperty('dh'),\n                           depth: this.getProperty('dd'),\n                           voffset: this.getProperty('dh')});\n        return [[this.factory.create('mml', mml)], true];\n      case 'horizontal':\n        // @test Move Left, Move Right, Move Left Negative, Move Right Negative\n        return [[this.factory.create('mml', this.getProperty('left') as MmlNode), item,\n                 this.factory.create('mml', this.getProperty('right') as MmlNode)], true];\n      }\n    }\n    return super.checkItem(item);\n  }\n}\n\n\n/**\n * Item indicating a table cell.\n */\nexport class CellItem extends BaseItem {\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'cell';\n  }\n\n\n  /**\n   * @override\n   */\n  get isClose() {\n    return true;\n  }\n}\n\n\n/**\n * Final item for collating Nodes.\n */\nexport class MmlItem extends BaseItem {\n\n  /**\n   * @override\n   */\n  public get isFinal() {\n    return true;\n  }\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'mml';\n  }\n\n}\n\n\n/**\n * Item indicating a named function operator (e.g., \\\\sin) as been encountered.\n */\nexport class FnItem extends BaseItem {\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'fn';\n  }\n\n  /**\n   * @override\n   */\n  public checkItem(item: StackItem): CheckType {\n    const top = this.First;\n    if (top) {\n      if (item.isOpen) {\n        // @test Fn Stretchy\n        return BaseItem.success;\n      }\n      if (!item.isKind('fn')) {\n        // @test Named Function\n        let mml = item.First;\n        if (!item.isKind('mml') || !mml) {\n          // @test Mathop Super\n          return [[top, item], true];\n        }\n        if ((NodeUtil.isType(mml, 'mstyle') && mml.childNodes.length &&\n             NodeUtil.isType(mml.childNodes[0].childNodes[0] as MmlNode, 'mspace')) ||\n             NodeUtil.isType(mml, 'mspace')) {\n          // @test Fn Pos Space, Fn Neg Space\n          return [[top, item], true];\n        }\n        if (NodeUtil.isEmbellished(mml)) {\n          // @test MultiInt with Limits\n          mml = NodeUtil.getCoreMO(mml);\n        }\n        const form = NodeUtil.getForm(mml);\n        if (form != null && [0, 0, 1, 1, 0, 1, 1, 0, 0, 0][form[2]]) {\n          // @test Fn Operator\n          return [[top, item], true];\n        }\n      }\n      // @test Named Function, Named Function Arg\n      const node = this.create('token', 'mo', {texClass: TEXCLASS.NONE},\n                               entities.ApplyFunction);\n      return [[top, node, item], true];\n    }\n    // @test Mathop Super, Mathop Sub\n    return super.checkItem.apply(this, arguments);\n  }\n}\n\n\n/**\n * Item indicating a \\\\not has been encountered and needs to be applied to the\n * next operator.\n */\nexport class NotItem extends BaseItem {\n\n  private remap = MapHandler.getMap('not_remap') as CharacterMap;\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'not';\n  }\n\n  /**\n   * @override\n   */\n  public checkItem(item: StackItem): CheckType {\n    let mml: TextNode | MmlNode;\n    let c: string;\n    let textNode: TextNode;\n    if (item.isKind('open') || item.isKind('left')) {\n      // @test Negation Left Paren\n      return BaseItem.success;\n    }\n    if (item.isKind('mml') &&\n        (NodeUtil.isType(item.First, 'mo') || NodeUtil.isType(item.First, 'mi') ||\n         NodeUtil.isType(item.First, 'mtext'))) {\n      mml = item.First;\n      c = NodeUtil.getText(mml as TextNode);\n      if (c.length === 1 && !NodeUtil.getProperty(mml, 'movesupsub') &&\n          NodeUtil.getChildren(mml).length === 1) {\n        if (this.remap.contains(c)) {\n          // @test Negation Simple, Negation Complex\n          textNode = this.create('text', this.remap.lookup(c).char) as TextNode;\n          NodeUtil.setChild(mml, 0, textNode);\n        } else {\n          // @test Negation Explicit\n          textNode = this.create('text', '\\u0338') as TextNode;\n          NodeUtil.appendChildren(mml, [textNode]);\n        }\n        return [[item], true];\n      }\n    }\n    // @test Negation Large\n    textNode = this.create('text', '\\u29F8') as TextNode;\n    const mtextNode = this.create('node', 'mtext', [], {}, textNode);\n    const paddedNode = this.create('node', 'mpadded', [mtextNode], {width: 0});\n    mml = this.create('node', 'TeXAtom', [paddedNode], {texClass: TEXCLASS.REL});\n    return [[mml, item], true];\n  }\n}\n\n/**\n * A StackItem that removes an mspace that follows it (for \\nonscript).\n */\nexport class NonscriptItem extends BaseItem {\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'nonscript';\n  }\n\n  /**\n   * @override\n   */\n  public checkItem(item: StackItem): CheckType {\n    //\n    //  Check if the next item is an mspace (or an mspace in an mstyle) and remove it.\n    //\n    if (item.isKind('mml') && item.Size() === 1) {\n      let mml = item.First;\n      //\n      //  Space macros like \\, are wrapped with an mstyle to set scriptlevel=\"0\"\n      //    (so size is independent of level), we look at the contents of the mstyle for the mspace.\n      //\n      if (mml.isKind('mstyle') && mml.notParent) {\n        mml = NodeUtil.getChildren(NodeUtil.getChildren(mml)[0])[0];\n      }\n      if (mml.isKind('mspace')) {\n        //\n        //  If the space is in an mstyle, wrap it in an mrow so we can test its scriptlevel\n        //    in the post-filter (the mrow will be removed in the filter).  We can't test\n        //    the mstyle's scriptlevel, since it is ecxplicitly setting it to 0.\n        //\n        if (mml !== item.First) {\n          const mrow = this.create('node', 'mrow', [item.Pop()]);\n          item.Push(mrow);\n        }\n        //\n        //  Save the mspace for later post-processing.\n        //\n        this.factory.configuration.addNode('nonscript', item.First);\n      }\n    }\n    return [[item], true];\n  }\n}\n\n/**\n * Item indicating a dots command has been encountered.\n */\nexport class DotsItem extends BaseItem {\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'dots';\n  }\n\n  /**\n   * @override\n   */\n  public checkItem(item: StackItem): CheckType {\n    if (item.isKind('open') || item.isKind('left')) {\n      return BaseItem.success;\n    }\n    let dots = this.getProperty('ldots') as MmlNode;\n    let top = item.First;\n    // @test Operator Dots\n    if (item.isKind('mml') && NodeUtil.isEmbellished(top)) {\n      const tclass = NodeUtil.getTexClass(NodeUtil.getCoreMO(top));\n      if (tclass === TEXCLASS.BIN || tclass === TEXCLASS.REL) {\n        dots = this.getProperty('cdots') as MmlNode;\n      }\n    }\n    return [[dots, item], true];\n  }\n}\n\n\n/**\n * Item indicating an array is assembled. It collates cells, rows and\n * information about column/row separator and framing lines.\n */\nexport class ArrayItem extends BaseItem {\n\n  /**\n   * The table as a list of rows.\n   * @type {MmlNode[]}\n   */\n  public table: MmlNode[] = [];\n\n  /**\n   * The current row as a list of cells.\n   * @type {MmlNode[]}\n   */\n  public row: MmlNode[] = [];\n\n  /**\n   * Frame specification as a list of strings.\n   * @type {string[]}\n   */\n  public frame: string[] = [];\n\n  /**\n   * Hfill value.\n   * @type {number[]}\n   */\n  public hfill: number[] = [];\n\n  /**\n   * Properties for special array definitions.\n   * @type {{[key: string]: string|number|boolean}}\n   */\n  public arraydef: {[key: string]: string | number | boolean} = {};\n\n  /**\n   * True if separators are dashed.\n   * @type {boolean}\n   */\n  public dashed: boolean = false;\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'array';\n  }\n\n\n  /**\n   * @override\n   */\n  get isOpen() {\n    return true;\n  }\n\n  /**\n   * @override\n   */\n  get copyEnv() {\n    return false;\n  }\n\n  /**\n   * @override\n   */\n  public checkItem(item: StackItem): CheckType {\n    // @test Array Single\n    if (item.isClose && !item.isKind('over')) {\n      // @test Array Single\n      if (item.getProperty('isEntry')) {\n        // @test Array dashed column, Array solid column\n        this.EndEntry();\n        this.clearEnv();\n        return BaseItem.fail;\n      }\n      if (item.getProperty('isCR')) {\n        // @test Enclosed bottom\n        this.EndEntry();\n        this.EndRow();\n        this.clearEnv();\n        return BaseItem.fail;\n      }\n      this.EndTable();\n      this.clearEnv();\n      let newItem = this.factory.create('mml', this.createMml());\n      if (this.getProperty('requireClose')) {\n        // @test: Label\n        if (item.isKind('close')) {\n          // @test: Label\n          return [[newItem], true];\n        }\n        // @test MissingCloseBrace2\n        throw new TexError('MissingCloseBrace', 'Missing close brace');\n      }\n      return [[newItem, item], true];\n    }\n    return super.checkItem(item);\n  }\n\n  /**\n   * Create the MathML representation of the table.\n   *\n   * @return {MmlNode}\n   */\n  public createMml(): MmlNode {\n    const scriptlevel = this.arraydef['scriptlevel'];\n    delete this.arraydef['scriptlevel'];\n    let mml = this.create('node', 'mtable', this.table, this.arraydef);\n    if (scriptlevel) {\n      mml.setProperty('scriptlevel', scriptlevel);\n    }\n    if (this.frame.length === 4) {\n      // @test Enclosed frame solid, Enclosed frame dashed\n      NodeUtil.setAttribute(mml, 'frame', this.dashed ? 'dashed' : 'solid');\n    } else if (this.frame.length) {\n      // @test Enclosed left right\n      if (this.arraydef['rowlines']) {\n        // @test Enclosed dashed row, Enclosed solid row,\n        this.arraydef['rowlines'] =\n          (this.arraydef['rowlines'] as string).replace(/none( none)+$/, 'none');\n      }\n      // @test Enclosed left right\n      NodeUtil.setAttribute(mml, 'frame', '');\n      mml = this.create('node', 'menclose', [mml], {notation: this.frame.join(' ')});\n      if ((this.arraydef['columnlines'] || 'none') !== 'none' ||\n          (this.arraydef['rowlines'] || 'none') !== 'none') {\n        // @test Enclosed dashed row, Enclosed solid row\n        // @test Enclosed dashed column, Enclosed solid column\n        NodeUtil.setAttribute(mml, 'data-padding', 0);\n      }\n    }\n    if (this.getProperty('open') || this.getProperty('close')) {\n      // @test Cross Product Formula\n      mml = ParseUtil.fenced(this.factory.configuration,\n                             this.getProperty('open') as string, mml,\n                             this.getProperty('close') as string);\n    }\n    return mml;\n  }\n\n  /**\n   * Finishes a single cell of the array.\n   */\n  public EndEntry() {\n    // @test Array1, Array2\n    const mtd = this.create('node', 'mtd', this.nodes);\n    if (this.hfill.length) {\n      if (this.hfill[0] === 0) {\n        NodeUtil.setAttribute(mtd, 'columnalign', 'right');\n      }\n      if (this.hfill[this.hfill.length - 1] === this.Size()) {\n        NodeUtil.setAttribute(\n          mtd, 'columnalign',\n          NodeUtil.getAttribute(mtd, 'columnalign') ? 'center' : 'left');\n      }\n    }\n    this.row.push(mtd);\n    this.Clear();\n    this.hfill = [];\n  }\n\n\n  /**\n   * Finishes a single row of the array.\n   */\n  public EndRow() {\n    let node: MmlNode;\n    if (this.getProperty('isNumbered') && this.row.length === 3) {\n      // @test Label, Matrix Numbered\n      this.row.unshift(this.row.pop());  // move equation number to first\n      // position\n      node = this.create('node', 'mlabeledtr', this.row);\n    } else {\n      // @test Array1, Array2\n      node = this.create('node', 'mtr', this.row);\n    }\n    this.table.push(node);\n    this.row = [];\n  }\n\n\n  /**\n   * Finishes the table layout.\n   */\n  public EndTable() {\n    if (this.Size() || this.row.length) {\n      this.EndEntry();\n      this.EndRow();\n    }\n    this.checkLines();\n  }\n\n\n  /**\n   * Finishes line layout if not already given.\n   */\n  public checkLines() {\n    if (this.arraydef['rowlines']) {\n      const lines = (this.arraydef['rowlines'] as string).split(/ /);\n      if (lines.length === this.table.length) {\n        this.frame.push('bottom');\n        lines.pop();\n        this.arraydef['rowlines'] = lines.join(' ');\n      } else if (lines.length < this.table.length - 1) {\n        this.arraydef['rowlines'] += ' none';\n      }\n    }\n    if (this.getProperty('rowspacing')) {\n      const rows = (this.arraydef['rowspacing'] as string).split(/ /);\n      while (rows.length < this.table.length) {\n        rows.push(this.getProperty('rowspacing') + 'em');\n      }\n      this.arraydef['rowspacing'] = rows.join(' ');\n    }\n  }\n\n  /**\n   * Adds a row-spacing to the current row (padding out the rowspacing if needed to get there).\n   *\n   * @param {string} spacing   The rowspacing to use for the current row.\n   */\n  public addRowSpacing(spacing: string) {\n    if (this.arraydef['rowspacing']) {\n      const rows = (this.arraydef['rowspacing'] as string).split(/ /);\n      if (!this.getProperty('rowspacing')) {\n        // @test Array Custom Linebreak\n        let dimem = ParseUtil.dimen2em(rows[0]);\n        this.setProperty('rowspacing', dimem);\n      }\n      const rowspacing = this.getProperty('rowspacing') as number;\n      while (rows.length < this.table.length) {\n        rows.push(ParseUtil.Em(rowspacing));\n      }\n      rows[this.table.length - 1] = ParseUtil.Em(\n        Math.max(0, rowspacing + ParseUtil.dimen2em(spacing)));\n      this.arraydef['rowspacing'] = rows.join(' ');\n    }\n  }\n\n}\n\n\n/**\n * Item dealing with equation arrays as a special case of arrays. Handles\n * tagging information according to the given tagging style.\n */\nexport class EqnArrayItem extends ArrayItem {\n\n  /**\n   * The length of the longest row.\n   */\n  public maxrow: number = 0;\n\n  /**\n   * @override\n   */\n  constructor(factory: any, ...args: any[]) {\n    super(factory);\n    this.factory.configuration.tags.start(args[0], args[2], args[1]);\n  }\n\n\n  /**\n   * @override\n   */\n  get kind() {\n    return 'eqnarray';\n  }\n\n\n  /**\n   * @override\n   */\n  public EndEntry() {\n    // @test Cubic Binomial\n    if (this.row.length) {\n      ParseUtil.fixInitialMO(this.factory.configuration, this.nodes);\n    }\n    const node = this.create('node', 'mtd', this.nodes);\n    this.row.push(node);\n    this.Clear();\n  }\n\n  /**\n   * @override\n   */\n  public EndRow() {\n    if (this.row.length > this.maxrow) {\n      this.maxrow = this.row.length;\n    }\n    // @test Cubic Binomial\n    let mtr = 'mtr';\n    let tag = this.factory.configuration.tags.getTag();\n    if (tag) {\n      this.row = [tag].concat(this.row);\n      mtr = 'mlabeledtr';\n    }\n    this.factory.configuration.tags.clearTag();\n    const node = this.create('node', mtr, this.row);\n    this.table.push(node);\n    this.row = [];\n  }\n\n  /**\n   * @override\n   */\n  public EndTable() {\n    // @test Cubic Binomial\n    super.EndTable();\n    this.factory.configuration.tags.end();\n    //\n    // Repeat the column align and width specifications\n    //   to match the number of columns\n    //\n    this.extendArray('columnalign', this.maxrow);\n    this.extendArray('columnwidth', this.maxrow);\n    this.extendArray('columnspacing', this.maxrow - 1);\n  }\n\n  /**\n   * Extend a column specification to include a repeating set of values\n   *   so that it has enough to match the maximum row length.\n   */\n  protected extendArray(name: string, max: number) {\n    if (!this.arraydef[name]) return;\n    const repeat = (this.arraydef[name] as string).split(/ /);\n    const columns = [...repeat];\n    if (columns.length > 1) {\n      while (columns.length < max) {\n        columns.push(...repeat);\n      }\n      this.arraydef[name] = columns.slice(0, max).join(' ');\n    }\n  }\n}\n\n\n/**\n * Item dealing with simple equation environments.  Handles tagging information\n * according to the given tagging style.\n */\nexport class EquationItem extends BaseItem {\n\n  /**\n   * @override\n   */\n  constructor(factory: any, ...args: any[]) {\n    super(factory);\n    this.factory.configuration.tags.start('equation', true, args[0]);\n  }\n\n\n  /**\n   * @override\n   */\n  get kind() {\n    return 'equation';\n  }\n\n  /**\n   * @override\n   */\n  get isOpen() {\n    return true;\n  }\n\n  /**\n   * @override\n   */\n  public checkItem(item: StackItem): CheckType {\n    if (item.isKind('end')) {\n      let mml = this.toMml();\n      let tag = this.factory.configuration.tags.getTag();\n      this.factory.configuration.tags.end();\n      return [[tag ? this.factory.configuration.tags.enTag(mml, tag) : mml, item], true];\n    }\n    if (item.isKind('stop')) {\n      // @test EnvMissingEnd Equation\n      throw new TexError('EnvMissingEnd', 'Missing \\\\end{%1}', this.getName());\n    }\n    return super.checkItem(item);\n  }\n\n}\n","/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Base mappings for TeX Parsing.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\nimport *  as sm from '../SymbolMap.js';\nimport {TexConstant} from '../TexConstants.js';\nimport BaseMethods from './BaseMethods.js';\nimport ParseMethods from '../ParseMethods.js';\nimport ParseUtil from '../ParseUtil.js';\nimport {TEXCLASS} from '../../../core/MmlTree/MmlNode.js';\nimport {MATHSPACE, em} from '../../../util/lengths.js';\n\n\n/**\n * Letter pattern for parsing identifiers and operators.\n */\nnew sm.RegExpMap('letter', ParseMethods.variable, /[a-z]/i);\n\n\n/**\n * Digit pattern for parsing numbers.\n */\nnew sm.RegExpMap('digit', ParseMethods.digit, /[0-9.,]/);\n\n\n/**\n * Pattern for spotting start of commands.\n */\nnew sm.RegExpMap('command', ParseMethods.controlSequence, /^\\\\/ );\n\n\n/**\n * Treatment of special characters in LaTeX.\n */\nnew sm.MacroMap('special', {\n\n  // This is now handled with a RegExp!\n  // '\\\\':  'ControlSequence',\n\n  '{':   'Open',\n  '}':   'Close',\n  '~':   'Tilde',\n  '^':   'Superscript',\n  '_':   'Subscript',\n  ' ':   'Space',\n  '\\t':  'Space',\n  '\\r':  'Space',\n  '\\n':  'Space',\n  '\\'':  'Prime',\n  '%':   'Comment',\n  '&':   'Entry',\n  '#':   'Hash',\n  '\\u00A0': 'Space',\n  '\\u2019': 'Prime'\n}, BaseMethods);\n\n\n/**\n * Macros for identifiers.\n */\nnew sm.CharacterMap('mathchar0mi', ParseMethods.mathchar0mi, {\n  // Lower-case greek\n  alpha:        '\\u03B1',\n  beta:         '\\u03B2',\n  gamma:        '\\u03B3',\n  delta:        '\\u03B4',\n  epsilon:      '\\u03F5',\n  zeta:         '\\u03B6',\n  eta:          '\\u03B7',\n  theta:        '\\u03B8',\n  iota:         '\\u03B9',\n  kappa:        '\\u03BA',\n  lambda:       '\\u03BB',\n  mu:           '\\u03BC',\n  nu:           '\\u03BD',\n  xi:           '\\u03BE',\n  omicron:      '\\u03BF', // added for completeness\n  pi:           '\\u03C0',\n  rho:          '\\u03C1',\n  sigma:        '\\u03C3',\n  tau:          '\\u03C4',\n  upsilon:      '\\u03C5',\n  phi:          '\\u03D5',\n  chi:          '\\u03C7',\n  psi:          '\\u03C8',\n  omega:        '\\u03C9',\n  varepsilon:   '\\u03B5',\n  vartheta:     '\\u03D1',\n  varpi:        '\\u03D6',\n  varrho:       '\\u03F1',\n  varsigma:     '\\u03C2',\n  varphi:       '\\u03C6',\n\n  // Ord symbols\n  S:            ['\\u00A7', {mathvariant: TexConstant.Variant.NORMAL}],\n  aleph:        ['\\u2135', {mathvariant: TexConstant.Variant.NORMAL}],\n  hbar:         ['\\u210F', {variantForm: true}],\n  imath:        '\\u0131',\n  jmath:        '\\u0237',\n  ell:          '\\u2113',\n  wp:           ['\\u2118', {mathvariant: TexConstant.Variant.NORMAL}],\n  Re:           ['\\u211C', {mathvariant: TexConstant.Variant.NORMAL}],\n  Im:           ['\\u2111', {mathvariant: TexConstant.Variant.NORMAL}],\n  partial:      ['\\u2202', {mathvariant: TexConstant.Variant.ITALIC}],\n  infty:        ['\\u221E', {mathvariant: TexConstant.Variant.NORMAL}],\n  prime:        ['\\u2032', {variantForm: true}],\n  emptyset:     ['\\u2205', {mathvariant: TexConstant.Variant.NORMAL}],\n  nabla:        ['\\u2207', {mathvariant: TexConstant.Variant.NORMAL}],\n  top:          ['\\u22A4', {mathvariant: TexConstant.Variant.NORMAL}],\n  bot:          ['\\u22A5', {mathvariant: TexConstant.Variant.NORMAL}],\n  angle:        ['\\u2220', {mathvariant: TexConstant.Variant.NORMAL}],\n  triangle:     ['\\u25B3', {mathvariant: TexConstant.Variant.NORMAL}],\n  backslash:    ['\\u2216', {mathvariant: TexConstant.Variant.NORMAL}],\n  forall:       ['\\u2200', {mathvariant: TexConstant.Variant.NORMAL}],\n  exists:       ['\\u2203', {mathvariant: TexConstant.Variant.NORMAL}],\n  neg:          ['\\u00AC', {mathvariant: TexConstant.Variant.NORMAL}],\n  lnot:         ['\\u00AC', {mathvariant: TexConstant.Variant.NORMAL}],\n  flat:         ['\\u266D', {mathvariant: TexConstant.Variant.NORMAL}],\n  natural:      ['\\u266E', {mathvariant: TexConstant.Variant.NORMAL}],\n  sharp:        ['\\u266F', {mathvariant: TexConstant.Variant.NORMAL}],\n  clubsuit:     ['\\u2663', {mathvariant: TexConstant.Variant.NORMAL}],\n  diamondsuit:  ['\\u2662', {mathvariant: TexConstant.Variant.NORMAL}],\n  heartsuit:    ['\\u2661', {mathvariant: TexConstant.Variant.NORMAL}],\n  spadesuit:    ['\\u2660', {mathvariant: TexConstant.Variant.NORMAL}]\n});\n\n\n/**\n * Macros for operators.\n */\nnew sm.CharacterMap('mathchar0mo', ParseMethods.mathchar0mo, {\n  surd:         '\\u221A',\n\n  // big ops\n  coprod:       ['\\u2210', {texClass: TEXCLASS.OP,\n                            movesupsub: true}],\n  bigvee:       ['\\u22C1', {texClass: TEXCLASS.OP,\n                            movesupsub: true}],\n  bigwedge:     ['\\u22C0', {texClass: TEXCLASS.OP,\n                            movesupsub: true}],\n  biguplus:     ['\\u2A04', {texClass: TEXCLASS.OP,\n                            movesupsub: true}],\n  bigcap:       ['\\u22C2', {texClass: TEXCLASS.OP,\n                            movesupsub: true}],\n  bigcup:       ['\\u22C3', {texClass: TEXCLASS.OP,\n                            movesupsub: true}],\n  'int':        ['\\u222B', {texClass: TEXCLASS.OP}],\n  intop:        ['\\u222B', {texClass: TEXCLASS.OP,\n                            movesupsub: true, movablelimits: true}],\n  iint:         ['\\u222C', {texClass: TEXCLASS.OP}],\n  iiint:        ['\\u222D', {texClass: TEXCLASS.OP}],\n  prod:         ['\\u220F', {texClass: TEXCLASS.OP,\n                            movesupsub: true}],\n  sum:          ['\\u2211', {texClass: TEXCLASS.OP,\n                            movesupsub: true}],\n  bigotimes:    ['\\u2A02', {texClass: TEXCLASS.OP,\n                            movesupsub: true}],\n  bigoplus:     ['\\u2A01', {texClass: TEXCLASS.OP,\n                            movesupsub: true}],\n  bigodot:      ['\\u2A00', {texClass: TEXCLASS.OP,\n                            movesupsub: true}],\n  oint:         ['\\u222E', {texClass: TEXCLASS.OP}],\n  bigsqcup:     ['\\u2A06', {texClass: TEXCLASS.OP,\n                            movesupsub: true}],\n  smallint:     ['\\u222B', {largeop: false}],\n\n  // binary operations\n  triangleleft:      '\\u25C3',\n  triangleright:     '\\u25B9',\n  bigtriangleup:     '\\u25B3',\n  bigtriangledown:   '\\u25BD',\n  wedge:        '\\u2227',\n  land:         '\\u2227',\n  vee:          '\\u2228',\n  lor:          '\\u2228',\n  cap:          '\\u2229',\n  cup:          '\\u222A',\n  ddagger:      '\\u2021',\n  dagger:       '\\u2020',\n  sqcap:        '\\u2293',\n  sqcup:        '\\u2294',\n  uplus:        '\\u228E',\n  amalg:        '\\u2A3F',\n  diamond:      '\\u22C4',\n  bullet:       '\\u2219',\n  wr:           '\\u2240',\n  div:          '\\u00F7',\n  divsymbol:    '\\u00F7',\n  odot:         ['\\u2299', {largeop: false}],\n  oslash:       ['\\u2298', {largeop: false}],\n  otimes:       ['\\u2297', {largeop: false}],\n  ominus:       ['\\u2296', {largeop: false}],\n  oplus:        ['\\u2295', {largeop: false}],\n  mp:           '\\u2213',\n  pm:           '\\u00B1',\n  circ:         '\\u2218',\n  bigcirc:      '\\u25EF',\n  setminus:     '\\u2216',\n  cdot:         '\\u22C5',\n  ast:          '\\u2217',\n  times:        '\\u00D7',\n  star:         '\\u22C6',\n\n\n  // Relations\n  propto:       '\\u221D',\n  sqsubseteq:   '\\u2291',\n  sqsupseteq:   '\\u2292',\n  parallel:     '\\u2225',\n  mid:          '\\u2223',\n  dashv:        '\\u22A3',\n  vdash:        '\\u22A2',\n  leq:          '\\u2264',\n  le:           '\\u2264',\n  geq:          '\\u2265',\n  ge:           '\\u2265',\n  lt:           '\\u003C',\n  gt:           '\\u003E',\n  succ:         '\\u227B',\n  prec:         '\\u227A',\n  approx:       '\\u2248',\n  succeq:       '\\u2AB0',  // or '227C',\n  preceq:       '\\u2AAF',  // or '227D',\n  supset:       '\\u2283',\n  subset:       '\\u2282',\n  supseteq:     '\\u2287',\n  subseteq:     '\\u2286',\n  'in':         '\\u2208',\n  ni:           '\\u220B',\n  notin:        '\\u2209',\n  owns:         '\\u220B',\n  gg:           '\\u226B',\n  ll:           '\\u226A',\n  sim:          '\\u223C',\n  simeq:        '\\u2243',\n  perp:         '\\u22A5',\n  equiv:        '\\u2261',\n  asymp:        '\\u224D',\n  smile:        '\\u2323',\n  frown:        '\\u2322',\n  ne:           '\\u2260',\n  neq:          '\\u2260',\n  cong:         '\\u2245',\n  doteq:        '\\u2250',\n  bowtie:       '\\u22C8',\n  models:       '\\u22A8',\n\n  notChar:      '\\u29F8',\n\n\n  // Arrows\n  Leftrightarrow:     '\\u21D4',\n  Leftarrow:          '\\u21D0',\n  Rightarrow:         '\\u21D2',\n  leftrightarrow:     '\\u2194',\n  leftarrow:          '\\u2190',\n  gets:               '\\u2190',\n  rightarrow:         '\\u2192',\n  to:                ['\\u2192', {accent: false}],\n  mapsto:             '\\u21A6',\n  leftharpoonup:      '\\u21BC',\n  leftharpoondown:    '\\u21BD',\n  rightharpoonup:     '\\u21C0',\n  rightharpoondown:   '\\u21C1',\n  nearrow:            '\\u2197',\n  searrow:            '\\u2198',\n  nwarrow:            '\\u2196',\n  swarrow:            '\\u2199',\n  rightleftharpoons:  '\\u21CC',\n  hookrightarrow:     '\\u21AA',\n  hookleftarrow:      '\\u21A9',\n  longleftarrow:      '\\u27F5',\n  Longleftarrow:      '\\u27F8',\n  longrightarrow:     '\\u27F6',\n  Longrightarrow:     '\\u27F9',\n  Longleftrightarrow: '\\u27FA',\n  longleftrightarrow: '\\u27F7',\n  longmapsto:         '\\u27FC',\n\n\n  // Misc.\n  ldots:            '\\u2026',\n  cdots:            '\\u22EF',\n  vdots:            '\\u22EE',\n  ddots:            '\\u22F1',\n  dotsc:            '\\u2026',  // dots with commas\n  dotsb:            '\\u22EF',  // dots with binary ops and relations\n  dotsm:            '\\u22EF',  // dots with multiplication\n  dotsi:            '\\u22EF',  // dots with integrals\n  dotso:            '\\u2026',  // other dots\n\n  ldotp:            ['\\u002E', {texClass: TEXCLASS.PUNCT}],\n  cdotp:            ['\\u22C5', {texClass: TEXCLASS.PUNCT}],\n  colon:            ['\\u003A', {texClass: TEXCLASS.PUNCT}]\n});\n\n\n/**\n * Macros for special characters and identifiers.\n */\nnew sm.CharacterMap('mathchar7', ParseMethods.mathchar7, {\n  Gamma:        '\\u0393',\n  Delta:        '\\u0394',\n  Theta:        '\\u0398',\n  Lambda:       '\\u039B',\n  Xi:           '\\u039E',\n  Pi:           '\\u03A0',\n  Sigma:        '\\u03A3',\n  Upsilon:      '\\u03A5',\n  Phi:          '\\u03A6',\n  Psi:          '\\u03A8',\n  Omega:        '\\u03A9',\n\n  '_':          '\\u005F',\n  '#':          '\\u0023',\n  '$':          '\\u0024',\n  '%':          '\\u0025',\n  '&':          '\\u0026',\n  And:          '\\u0026'\n});\n\n\n/**\n * Macros for delimiters.\n */\nnew sm.DelimiterMap('delimiter', ParseMethods.delimiter, {\n  '(':                '(',\n  ')':                ')',\n  '[':                '[',\n  ']':                ']',\n  '<':                '\\u27E8',\n  '>':                '\\u27E9',\n  '\\\\lt':             '\\u27E8',\n  '\\\\gt':             '\\u27E9',\n  '/':                '/',\n  '|':                ['|', {texClass: TEXCLASS.ORD}],\n  '.':                '',\n  '\\\\\\\\':             '\\\\',\n  '\\\\lmoustache':     '\\u23B0',  // non-standard\n  '\\\\rmoustache':     '\\u23B1',  // non-standard\n  '\\\\lgroup':         '\\u27EE',  // non-standard\n  '\\\\rgroup':         '\\u27EF',  // non-standard\n  '\\\\arrowvert':      '\\u23D0',\n  '\\\\Arrowvert':      '\\u2016',\n  '\\\\bracevert':      '\\u23AA',  // non-standard\n  '\\\\Vert':           ['\\u2016', {texClass: TEXCLASS.ORD}],\n  '\\\\|':              ['\\u2016', {texClass: TEXCLASS.ORD}],\n  '\\\\vert':           ['|', {texClass: TEXCLASS.ORD}],\n  '\\\\uparrow':        '\\u2191',\n  '\\\\downarrow':      '\\u2193',\n  '\\\\updownarrow':    '\\u2195',\n  '\\\\Uparrow':        '\\u21D1',\n  '\\\\Downarrow':      '\\u21D3',\n  '\\\\Updownarrow':    '\\u21D5',\n  '\\\\backslash':      '\\\\',\n  '\\\\rangle':         '\\u27E9',\n  '\\\\langle':         '\\u27E8',\n  '\\\\rbrace':         '}',\n  '\\\\lbrace':         '{',\n  '\\\\}':              '}',\n  '\\\\{':              '{',\n  '\\\\rceil':          '\\u2309',\n  '\\\\lceil':          '\\u2308',\n  '\\\\rfloor':         '\\u230B',\n  '\\\\lfloor':         '\\u230A',\n  '\\\\lbrack':         '[',\n  '\\\\rbrack':         ']'\n});\n\n\n/**\n * Macros for LaTeX commands.\n */\nnew sm.CommandMap('macros', {\n  displaystyle:      ['SetStyle', 'D', true, 0],\n  textstyle:         ['SetStyle', 'T', false, 0],\n  scriptstyle:       ['SetStyle', 'S', false, 1],\n  scriptscriptstyle: ['SetStyle', 'SS', false, 2],\n\n  rm:                ['SetFont', TexConstant.Variant.NORMAL],\n  mit:               ['SetFont', TexConstant.Variant.ITALIC],\n  oldstyle:          ['SetFont', TexConstant.Variant.OLDSTYLE],\n  cal:               ['SetFont', TexConstant.Variant.CALLIGRAPHIC],\n  it:                ['SetFont', TexConstant.Variant.MATHITALIC], // needs special handling\n  bf:                ['SetFont', TexConstant.Variant.BOLD],\n  bbFont:            ['SetFont', TexConstant.Variant.DOUBLESTRUCK],\n  scr:               ['SetFont', TexConstant.Variant.SCRIPT],\n  frak:              ['SetFont', TexConstant.Variant.FRAKTUR],\n  sf:                ['SetFont', TexConstant.Variant.SANSSERIF],\n  tt:                ['SetFont', TexConstant.Variant.MONOSPACE],\n\n  mathrm:            ['MathFont', TexConstant.Variant.NORMAL],\n  mathup:            ['MathFont', TexConstant.Variant.NORMAL],\n  mathnormal:        ['MathFont', ''],\n  mathbf:            ['MathFont', TexConstant.Variant.BOLD],\n  mathbfup:          ['MathFont', TexConstant.Variant.BOLD],\n  mathit:            ['MathFont', TexConstant.Variant.MATHITALIC],\n  mathbfit:          ['MathFont', TexConstant.Variant.BOLDITALIC],\n  mathbb:            ['MathFont', TexConstant.Variant.DOUBLESTRUCK],\n  Bbb:               ['MathFont', TexConstant.Variant.DOUBLESTRUCK],\n  mathfrak:          ['MathFont', TexConstant.Variant.FRAKTUR],\n  mathbffrak:        ['MathFont', TexConstant.Variant.BOLDFRAKTUR],\n  mathscr:           ['MathFont', TexConstant.Variant.SCRIPT],\n  mathbfscr:         ['MathFont', TexConstant.Variant.BOLDSCRIPT],\n  mathsf:            ['MathFont', TexConstant.Variant.SANSSERIF],\n  mathsfup:          ['MathFont', TexConstant.Variant.SANSSERIF],\n  mathbfsf:          ['MathFont', TexConstant.Variant.BOLDSANSSERIF],\n  mathbfsfup:        ['MathFont', TexConstant.Variant.BOLDSANSSERIF],\n  mathsfit:          ['MathFont', TexConstant.Variant.SANSSERIFITALIC],\n  mathbfsfit:        ['MathFont', TexConstant.Variant.SANSSERIFBOLDITALIC],\n  mathtt:            ['MathFont', TexConstant.Variant.MONOSPACE],\n  mathcal:           ['MathFont', TexConstant.Variant.CALLIGRAPHIC],\n  mathbfcal:         ['MathFont', TexConstant.Variant.BOLDCALLIGRAPHIC],\n\n  symrm:             ['MathFont', TexConstant.Variant.NORMAL],\n  symup:             ['MathFont', TexConstant.Variant.NORMAL],\n  symnormal:         ['MathFont', ''],\n  symbf:             ['MathFont', TexConstant.Variant.BOLD],\n  symbfup:           ['MathFont', TexConstant.Variant.BOLD],\n  symit:             ['MathFont', TexConstant.Variant.ITALIC],\n  symbfit:           ['MathFont', TexConstant.Variant.BOLDITALIC],\n  symbb:             ['MathFont', TexConstant.Variant.DOUBLESTRUCK],\n  symfrak:           ['MathFont', TexConstant.Variant.FRAKTUR],\n  symbffrak:         ['MathFont', TexConstant.Variant.BOLDFRAKTUR],\n  symscr:            ['MathFont', TexConstant.Variant.SCRIPT],\n  symbfscr:          ['MathFont', TexConstant.Variant.BOLDSCRIPT],\n  symsf:             ['MathFont', TexConstant.Variant.SANSSERIF],\n  symsfup:           ['MathFont', TexConstant.Variant.SANSSERIF],\n  symbfsf:           ['MathFont', TexConstant.Variant.BOLDSANSSERIF],\n  symbfsfup:         ['MathFont', TexConstant.Variant.BOLDSANSSERIF],\n  symsfit:           ['MathFont', TexConstant.Variant.SANSSERIFITALIC],\n  symbfsfit:         ['MathFont', TexConstant.Variant.SANSSERIFBOLDITALIC],\n  symtt:             ['MathFont', TexConstant.Variant.MONOSPACE],\n  symcal:            ['MathFont', TexConstant.Variant.CALLIGRAPHIC],\n  symbfcal:          ['MathFont', TexConstant.Variant.BOLDCALLIGRAPHIC],\n\n  textrm:            ['HBox', null, TexConstant.Variant.NORMAL],\n  textup:            ['HBox', null, TexConstant.Variant.NORMAL],\n  textnormal:        ['HBox'],\n  textit:            ['HBox', null, TexConstant.Variant.ITALIC],\n  textbf:            ['HBox', null, TexConstant.Variant.BOLD],\n  textsf:            ['HBox', null, TexConstant.Variant.SANSSERIF],\n  texttt:            ['HBox', null, TexConstant.Variant.MONOSPACE],\n\n  tiny:              ['SetSize', 0.5],\n  Tiny:              ['SetSize', 0.6],  // non-standard\n  scriptsize:        ['SetSize', 0.7],\n  small:             ['SetSize', 0.85],\n  normalsize:        ['SetSize', 1.0],\n  large:             ['SetSize', 1.2],\n  Large:             ['SetSize', 1.44],\n  LARGE:             ['SetSize', 1.73],\n  huge:              ['SetSize', 2.07],\n  Huge:              ['SetSize', 2.49],\n\n  arcsin:             'NamedFn',\n  arccos:             'NamedFn',\n  arctan:             'NamedFn',\n  arg:                'NamedFn',\n  cos:                'NamedFn',\n  cosh:               'NamedFn',\n  cot:                'NamedFn',\n  coth:               'NamedFn',\n  csc:                'NamedFn',\n  deg:                'NamedFn',\n  det:                'NamedOp',\n  dim:                'NamedFn',\n  exp:                'NamedFn',\n  gcd:                'NamedOp',\n  hom:                'NamedFn',\n  inf:                'NamedOp',\n  ker:                'NamedFn',\n  lg:                 'NamedFn',\n  lim:                'NamedOp',\n  liminf:            ['NamedOp', 'lim&thinsp;inf'],\n  limsup:            ['NamedOp', 'lim&thinsp;sup'],\n  ln:                 'NamedFn',\n  log:                'NamedFn',\n  max:                'NamedOp',\n  min:                'NamedOp',\n  Pr:                 'NamedOp',\n  sec:                'NamedFn',\n  sin:                'NamedFn',\n  sinh:               'NamedFn',\n  sup:                'NamedOp',\n  tan:                'NamedFn',\n  tanh:               'NamedFn',\n\n  limits:            ['Limits', 1],\n  nolimits:          ['Limits', 0],\n\n  overline:            ['UnderOver', '2015'],\n  underline:           ['UnderOver', '2015'],\n  overbrace:           ['UnderOver', '23DE', 1],\n  underbrace:          ['UnderOver', '23DF', 1],\n  overparen:           ['UnderOver', '23DC'],\n  underparen:          ['UnderOver', '23DD'],\n  overrightarrow:      ['UnderOver', '2192'],\n  underrightarrow:     ['UnderOver', '2192'],\n  overleftarrow:       ['UnderOver', '2190'],\n  underleftarrow:      ['UnderOver', '2190'],\n  overleftrightarrow:  ['UnderOver', '2194'],\n  underleftrightarrow: ['UnderOver', '2194'],\n\n  overset:            'Overset',\n  underset:           'Underset',\n  overunderset:       'Overunderset',\n  stackrel:           ['Macro', '\\\\mathrel{\\\\mathop{#2}\\\\limits^{#1}}', 2],\n  stackbin:           ['Macro', '\\\\mathbin{\\\\mathop{#2}\\\\limits^{#1}}', 2],\n\n  over:               'Over',\n  overwithdelims:     'Over',\n  atop:               'Over',\n  atopwithdelims:     'Over',\n  above:              'Over',\n  abovewithdelims:    'Over',\n  brace:             ['Over', '{', '}'],\n  brack:             ['Over', '[', ']'],\n  choose:            ['Over', '(', ')'],\n\n  frac:               'Frac',\n  sqrt:               'Sqrt',\n  root:               'Root',\n  uproot:            ['MoveRoot', 'upRoot'],\n  leftroot:          ['MoveRoot', 'leftRoot'],\n\n  left:               'LeftRight',\n  right:              'LeftRight',\n  middle:             'LeftRight',\n\n  llap:               'Lap',\n  rlap:               'Lap',\n  raise:              'RaiseLower',\n  lower:              'RaiseLower',\n  moveleft:           'MoveLeftRight',\n  moveright:          'MoveLeftRight',\n\n  ',':               ['Spacer', MATHSPACE.thinmathspace],\n  ':':               ['Spacer', MATHSPACE.mediummathspace],\n  '>':               ['Spacer', MATHSPACE.mediummathspace],\n  ';':               ['Spacer', MATHSPACE.thickmathspace],\n  '!':               ['Spacer', MATHSPACE.negativethinmathspace],\n  enspace:           ['Spacer', .5],\n  quad:              ['Spacer', 1],\n  qquad:             ['Spacer', 2],\n  thinspace:         ['Spacer', MATHSPACE.thinmathspace],\n  negthinspace:      ['Spacer', MATHSPACE.negativethinmathspace],\n\n  hskip:              'Hskip',\n  hspace:             'Hskip',\n  kern:               'Hskip',\n  mskip:              'Hskip',\n  mspace:             'Hskip',\n  mkern:              'Hskip',\n  rule:               'rule',\n  Rule:              ['Rule'],\n  Space:             ['Rule', 'blank'],\n  nonscript:          'Nonscript',\n\n  big:               ['MakeBig', TEXCLASS.ORD, 0.85],\n  Big:               ['MakeBig', TEXCLASS.ORD, 1.15],\n  bigg:              ['MakeBig', TEXCLASS.ORD, 1.45],\n  Bigg:              ['MakeBig', TEXCLASS.ORD, 1.75],\n  bigl:              ['MakeBig', TEXCLASS.OPEN, 0.85],\n  Bigl:              ['MakeBig', TEXCLASS.OPEN, 1.15],\n  biggl:             ['MakeBig', TEXCLASS.OPEN, 1.45],\n  Biggl:             ['MakeBig', TEXCLASS.OPEN, 1.75],\n  bigr:              ['MakeBig', TEXCLASS.CLOSE, 0.85],\n  Bigr:              ['MakeBig', TEXCLASS.CLOSE, 1.15],\n  biggr:             ['MakeBig', TEXCLASS.CLOSE, 1.45],\n  Biggr:             ['MakeBig', TEXCLASS.CLOSE, 1.75],\n  bigm:              ['MakeBig', TEXCLASS.REL, 0.85],\n  Bigm:              ['MakeBig', TEXCLASS.REL, 1.15],\n  biggm:             ['MakeBig', TEXCLASS.REL, 1.45],\n  Biggm:             ['MakeBig', TEXCLASS.REL, 1.75],\n\n  mathord:           ['TeXAtom', TEXCLASS.ORD],\n  mathop:            ['TeXAtom', TEXCLASS.OP],\n  mathopen:          ['TeXAtom', TEXCLASS.OPEN],\n  mathclose:         ['TeXAtom', TEXCLASS.CLOSE],\n  mathbin:           ['TeXAtom', TEXCLASS.BIN],\n  mathrel:           ['TeXAtom', TEXCLASS.REL],\n  mathpunct:         ['TeXAtom', TEXCLASS.PUNCT],\n  mathinner:         ['TeXAtom', TEXCLASS.INNER],\n\n  vcenter:           ['TeXAtom', TEXCLASS.VCENTER],\n\n  buildrel:           'BuildRel',\n\n  hbox:               ['HBox', 0],\n  text:               'HBox',\n  mbox:               ['HBox', 0],\n  fbox:               'FBox',\n  boxed:              ['Macro', '\\\\fbox{$\\\\displaystyle{#1}$}', 1],\n  framebox:           'FrameBox',\n\n  strut:              'Strut',\n  mathstrut:         ['Macro', '\\\\vphantom{(}'],\n  phantom:            'Phantom',\n  vphantom:          ['Phantom', 1, 0],\n  hphantom:          ['Phantom', 0, 1],\n  smash:              'Smash',\n\n  acute:             ['Accent', '00B4'],  // or 0301 or 02CA\n  grave:             ['Accent', '0060'],  // or 0300 or 02CB\n  ddot:              ['Accent', '00A8'],  // or 0308\n  tilde:             ['Accent', '007E'],  // or 0303 or 02DC\n  bar:               ['Accent', '00AF'],  // or 0304 or 02C9\n  breve:             ['Accent', '02D8'],  // or 0306\n  check:             ['Accent', '02C7'],  // or 030C\n  hat:               ['Accent', '005E'],  // or 0302 or 02C6\n  vec:               ['Accent', '2192'],  // or 20D7\n  dot:               ['Accent', '02D9'],  // or 0307\n  widetilde:         ['Accent', '007E', 1], // or 0303 or 02DC\n  widehat:           ['Accent', '005E', 1], // or 0302 or 02C6\n\n  matrix:             'Matrix',\n  array:              'Matrix',\n  pmatrix:           ['Matrix', '(', ')'],\n  cases:             ['Matrix', '{', '', 'left left', null, '.1em', null,\n                      true],\n  eqalign:           ['Matrix', null, null, 'right left',\n                      em(MATHSPACE.thickmathspace), '.5em', 'D'],\n  displaylines:      ['Matrix', null, null, 'center', null, '.5em', 'D'],\n  cr:                 'Cr',\n  '\\\\':               'CrLaTeX',\n  newline:           ['CrLaTeX', true],\n  hline:             ['HLine', 'solid'],\n  hdashline:         ['HLine', 'dashed'],\n  //      noalign:            'HandleNoAlign',\n  eqalignno:         ['Matrix', null, null, 'right left',\n                      em(MATHSPACE.thickmathspace), '.5em', 'D', null,\n                      'right'],\n  leqalignno:        ['Matrix', null, null, 'right left',\n                      em(MATHSPACE.thickmathspace), '.5em', 'D', null,\n                      'left'],\n  hfill:              'HFill',\n  hfil:               'HFill',   // \\hfil treated as \\hfill for now\n  hfilll:             'HFill',   // \\hfilll treated as \\hfill for now\n\n  //  TeX substitution macros\n  bmod:              ['Macro', '\\\\mmlToken{mo}[lspace=\"thickmathspace\"' +\n                      ' rspace=\"thickmathspace\"]{mod}'],\n  pmod:              ['Macro', '\\\\pod{\\\\mmlToken{mi}{mod}\\\\kern 6mu #1}', 1],\n  mod:               ['Macro', '\\\\mathchoice{\\\\kern18mu}{\\\\kern12mu}' +\n                      '{\\\\kern12mu}{\\\\kern12mu}\\\\mmlToken{mi}{mod}\\\\,\\\\,#1',\n                      1],\n  pod:               ['Macro', '\\\\mathchoice{\\\\kern18mu}{\\\\kern8mu}' +\n                      '{\\\\kern8mu}{\\\\kern8mu}(#1)', 1],\n  iff:               ['Macro', '\\\\;\\\\Longleftrightarrow\\\\;'],\n  skew:              ['Macro', '{{#2{#3\\\\mkern#1mu}\\\\mkern-#1mu}{}}', 3],\n\n  pmb:               ['Macro', '\\\\rlap{#1}\\\\kern1px{#1}', 1],\n  TeX:               ['Macro', 'T\\\\kern-.14em\\\\lower.5ex{E}\\\\kern-.115em X'],\n  LaTeX:             ['Macro', 'L\\\\kern-.325em\\\\raise.21em' +\n                      '{\\\\scriptstyle{A}}\\\\kern-.17em\\\\TeX'],\n  ' ':               ['Macro', '\\\\text{ }'],\n\n  //  Specially handled\n  not:                'Not',\n  dots:               'Dots',\n  space:              'Tilde',\n  '\\u00A0':           'Tilde',\n\n\n  //  LaTeX\n  begin:              'BeginEnd',\n  end:                'BeginEnd',\n\n  label:              'HandleLabel',\n  ref:                'HandleRef',\n  nonumber:           'HandleNoTag',\n\n  // Internal use:\n  mathchoice:         'MathChoice',\n  mmlToken:           'MmlToken'\n}, BaseMethods);\n\n\n/**\n * Macros for LaTeX environments.\n */\nnew sm.EnvironmentMap('environment', ParseMethods.environment, {\n  array:         ['AlignedArray'],\n  equation:      ['Equation', null, true],\n  eqnarray:      ['EqnArray', null, true, true, 'rcl',\n                  ParseUtil.cols(0, MATHSPACE.thickmathspace), '.5em']\n}, BaseMethods);\n\n\n/**\n * Mapping for negated operators.\n */\nnew sm.CharacterMap('not_remap', null, {\n  '\\u2190': '\\u219A',\n  '\\u2192': '\\u219B',\n  '\\u2194': '\\u21AE',\n  '\\u21D0': '\\u21CD',\n  '\\u21D2': '\\u21CF',\n  '\\u21D4': '\\u21CE',\n  '\\u2208': '\\u2209',\n  '\\u220B': '\\u220C',\n  '\\u2223': '\\u2224',\n  '\\u2225': '\\u2226',\n  '\\u223C': '\\u2241',\n  '\\u007E': '\\u2241',\n  '\\u2243': '\\u2244',\n  '\\u2245': '\\u2247',\n  '\\u2248': '\\u2249',\n  '\\u224D': '\\u226D',\n  '\\u003D': '\\u2260',\n  '\\u2261': '\\u2262',\n  '\\u003C': '\\u226E',\n  '\\u003E': '\\u226F',\n  '\\u2264': '\\u2270',\n  '\\u2265': '\\u2271',\n  '\\u2272': '\\u2274',\n  '\\u2273': '\\u2275',\n  '\\u2276': '\\u2278',\n  '\\u2277': '\\u2279',\n  '\\u227A': '\\u2280',\n  '\\u227B': '\\u2281',\n  '\\u2282': '\\u2284',\n  '\\u2283': '\\u2285',\n  '\\u2286': '\\u2288',\n  '\\u2287': '\\u2289',\n  '\\u22A2': '\\u22AC',\n  '\\u22A8': '\\u22AD',\n  '\\u22A9': '\\u22AE',\n  '\\u22AB': '\\u22AF',\n  '\\u227C': '\\u22E0',\n  '\\u227D': '\\u22E1',\n  '\\u2291': '\\u22E2',\n  '\\u2292': '\\u22E3',\n  '\\u22B2': '\\u22EA',\n  '\\u22B3': '\\u22EB',\n  '\\u22B4': '\\u22EC',\n  '\\u22B5': '\\u22ED',\n  '\\u2203': '\\u2204'\n});\n","/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview The Basic Parse methods.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\nimport * as sitem from './BaseItems.js';\nimport {StackItem, EnvList} from '../StackItem.js';\nimport {Macro} from '../Symbol.js';\nimport {ParseMethod} from '../Types.js';\nimport NodeUtil from '../NodeUtil.js';\nimport TexError from '../TexError.js';\nimport TexParser from '../TexParser.js';\nimport {TexConstant} from '../TexConstants.js';\nimport ParseUtil from '../ParseUtil.js';\nimport {MmlNode, TEXCLASS} from '../../../core/MmlTree/MmlNode.js';\nimport {MmlMsubsup} from '../../../core/MmlTree/MmlNodes/msubsup.js';\nimport {MmlMunderover} from '../../../core/MmlTree/MmlNodes/munderover.js';\nimport {Label} from '../Tags.js';\nimport {em} from '../../../util/lengths.js';\nimport {entities} from '../../../util/Entities.js';\nimport {lookup} from '../../../util/Options.js';\n\n\n// Namespace\nlet BaseMethods: Record<string, ParseMethod> = {};\n\nconst P_HEIGHT = 1.2 / .85;   // cmex10 height plus depth over .85\nconst MmlTokenAllow: {[key: string]: number} = {\n  fontfamily: 1, fontsize: 1, fontweight: 1, fontstyle: 1,\n  color: 1, background: 1,\n  id: 1, 'class': 1, href: 1, style: 1\n};\n\n\n\n/**\n * Handle LaTeX tokens.\n */\n\n/**\n * Handle {\n * @param {TexParser} parser The calling parser.\n * @param {string} c The parsed character.\n */\nBaseMethods.Open = function(parser: TexParser, _c: string) {\n  // @test Identifier Font, Prime, Prime with subscript\n  parser.Push(parser.itemFactory.create('open'));\n};\n\n/**\n * Handle }\n * @param {TexParser} parser The calling parser.\n * @param {string} c The parsed character.\n */\nBaseMethods.Close = function(parser: TexParser, _c: string) {\n  // @test Identifier Font, Prime, Prime with subscript\n  parser.Push(parser.itemFactory.create('close'));\n};\n\n\n/**\n * Handle tilde and spaces.\n * @param {TexParser} parser The calling parser.\n * @param {string} c The parsed character.\n */\nBaseMethods.Tilde = function(parser: TexParser, _c: string) {\n  // @test Tilde, Tilde2\n  parser.Push(parser.create('token', 'mtext', {}, entities.nbsp));\n};\n\n/**\n * Handling space, by doing nothing.\n * @param {TexParser} parser The calling parser.\n * @param {string} c The parsed character.\n */\nBaseMethods.Space = function(_parser: TexParser, _c: string) {};\n\n/**\n * Handle ^\n * @param {TexParser} parser The calling parser.\n * @param {string} c The parsed character.\n */\nBaseMethods.Superscript = function(parser: TexParser, _c: string) {\n  if (parser.GetNext().match(/\\d/)) {\n    // don't treat numbers as a unit\n    parser.string = parser.string.substr(0, parser.i + 1) +\n      ' ' + parser.string.substr(parser.i + 1);\n  }\n  let primes: MmlNode;\n  let base: MmlNode | void;\n  const top = parser.stack.Top();\n  if (top.isKind('prime')) {\n    // @test Prime on Prime\n    [base, primes] = top.Peek(2);\n    parser.stack.Pop();\n  } else {\n    // @test Empty base2, Square, Cube\n    base = parser.stack.Prev();\n    if (!base) {\n      // @test Empty base\n      base = parser.create('token', 'mi', {}, '');\n    }\n  }\n  const movesupsub = NodeUtil.getProperty(base, 'movesupsub');\n  let position = NodeUtil.isType(base, 'msubsup') ? (base as MmlMsubsup).sup :\n    (base as MmlMunderover).over;\n  if ((NodeUtil.isType(base, 'msubsup') && !NodeUtil.isType(base, 'msup') &&\n       NodeUtil.getChildAt(base, (base as MmlMsubsup).sup)) ||\n      (NodeUtil.isType(base, 'munderover') && !NodeUtil.isType(base, 'mover') &&\n       NodeUtil.getChildAt(base, (base as MmlMunderover).over) &&\n       !NodeUtil.getProperty(base, 'subsupOK'))) {\n    // @test Double-super-error, Double-over-error\n    throw new TexError('DoubleExponent', 'Double exponent: use braces to clarify');\n  }\n  if (!NodeUtil.isType(base, 'msubsup') || NodeUtil.isType(base, 'msup')) {\n    if (movesupsub) {\n      // @test Move Superscript, Large Operator\n      if (!NodeUtil.isType(base, 'munderover') || NodeUtil.isType(base, 'mover') ||\n          NodeUtil.getChildAt(base, (base as MmlMunderover).over)) {\n        // @test Large Operator\n        base = parser.create('node', 'munderover', [base], {movesupsub: true});\n      }\n      position = (base as MmlMunderover).over;\n    } else {\n      // @test Empty base, Empty base2, Square, Cube\n      base = parser.create('node', 'msubsup', [base]);\n      position = (base as MmlMsubsup).sup;\n    }\n  }\n  parser.Push(\n    parser.itemFactory.create('subsup', base).setProperties({\n      position: position, primes: primes, movesupsub: movesupsub\n    }) );\n};\n\n\n/**\n * Handle _\n * @param {TexParser} parser The calling parser.\n * @param {string} c The parsed character.\n */\nBaseMethods.Subscript = function(parser: TexParser, _c: string) {\n  if (parser.GetNext().match(/\\d/)) {\n    // don't treat numbers as a unit\n    parser.string =\n      parser.string.substr(0, parser.i + 1) + ' ' +\n      parser.string.substr(parser.i + 1);\n  }\n  let primes, base;\n  const top = parser.stack.Top();\n  if (top.isKind('prime')) {\n    // @test Prime on Sub\n    [base, primes] = top.Peek(2);\n    parser.stack.Pop();\n  } else {\n    base = parser.stack.Prev();\n    if (!base) {\n      // @test Empty Base Index\n      base = parser.create('token', 'mi', {}, '');\n    }\n  }\n  const movesupsub = NodeUtil.getProperty(base, 'movesupsub');\n  let position = NodeUtil.isType(base, 'msubsup') ?\n    (base as MmlMsubsup).sub : (base as MmlMunderover).under;\n  if ((NodeUtil.isType(base, 'msubsup') && !NodeUtil.isType(base, 'msup') &&\n       NodeUtil.getChildAt(base, (base as MmlMsubsup).sub)) ||\n      (NodeUtil.isType(base, 'munderover') && !NodeUtil.isType(base, 'mover') &&\n       NodeUtil.getChildAt(base, (base as MmlMunderover).under) &&\n       !NodeUtil.getProperty(base, 'subsupOK'))) {\n    // @test Double-sub-error, Double-under-error\n    throw new TexError('DoubleSubscripts', 'Double subscripts: use braces to clarify');\n  }\n  if (!NodeUtil.isType(base, 'msubsup') || NodeUtil.isType(base, 'msup')) {\n    if (movesupsub) {\n      // @test Large Operator, Move Superscript\n      if (!NodeUtil.isType(base, 'munderover') || NodeUtil.isType(base, 'mover') ||\n          NodeUtil.getChildAt(base, (base as MmlMunderover).under)) {\n        // @test Move Superscript\n        base = parser.create('node', 'munderover', [base], {movesupsub: true});\n      }\n      position = (base as MmlMunderover).under;\n    } else {\n      // @test Empty Base Index, Empty Base Index2, Index\n      base = parser.create('node', 'msubsup', [base]);\n      position = (base as MmlMsubsup).sub;\n    }\n  }\n  parser.Push(\n    parser.itemFactory.create('subsup', base).setProperties({\n      position: position, primes: primes, movesupsub: movesupsub\n    }) );\n};\n\n\n/**\n * Handle '\n * @param {TexParser} parser The calling parser.\n * @param {string} c The parsed character.\n */\nBaseMethods.Prime = function(parser: TexParser, c: string) {\n  // @test Prime\n  let base = parser.stack.Prev();\n  if (!base) {\n    // @test PrimeSup, PrePrime, Prime on Sup\n    base = parser.create('node', 'mi');\n  }\n  if (NodeUtil.isType(base, 'msubsup') && !NodeUtil.isType(base, 'msup') &&\n      NodeUtil.getChildAt(base, (base as MmlMsubsup).sup)) {\n    // @test Double Prime Error\n    throw new TexError('DoubleExponentPrime',\n                        'Prime causes double exponent: use braces to clarify');\n  }\n  let sup = '';\n  parser.i--;\n  do {\n    // @test Prime, PrimeSup, Double Prime, PrePrime\n    sup += entities.prime; parser.i++, c = parser.GetNext();\n  } while (c === '\\'' || c === entities.rsquo);\n  sup = ['', '\\u2032', '\\u2033', '\\u2034', '\\u2057'][sup.length] || sup;\n  const node = parser.create('token', 'mo', {variantForm: true}, sup);\n  parser.Push(\n    parser.itemFactory.create('prime', base, node) );\n};\n\n\n/**\n * Handle comments\n * @param {TexParser} parser The calling parser.\n * @param {string} c The parsed character.\n */\nBaseMethods.Comment = function(parser: TexParser, _c: string) {\n  while (parser.i < parser.string.length && parser.string.charAt(parser.i) !== '\\n') {\n    parser.i++;\n  }\n};\n\n\n/**\n * Handle hash marks outside of definitions\n * @param {TexParser} parser The calling parser.\n * @param {string} c The parsed character.\n */\nBaseMethods.Hash = function(_parser: TexParser, _c: string) {\n  // @test Hash Error\n  throw new TexError('CantUseHash1',\n                      'You can\\'t use \\'macro parameter character #\\' in math mode');\n};\n\n\n\n/**\n *\n * Handle LaTeX Macros\n *\n */\n\n\n/**\n * Handle \\mathrm, \\mathbf, etc, allowing for multi-letter runs to be one <mi>.\n */\nBaseMethods.MathFont = function(parser: TexParser, name: string, variant: string) {\n  const text = parser.GetArgument(name);\n  let mml = new TexParser(text, {\n    ...parser.stack.env,\n    font: variant,\n    multiLetterIdentifiers: /^[a-zA-Z]+/ as any,\n    noAutoOP: true\n  }, parser.configuration).mml();\n  parser.Push(parser.create('node', 'TeXAtom', [mml]));\n};\n\n/**\n * Setting font, e.g., via \\\\rm, \\\\bf etc.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n * @param {string} font The font name.\n */\nBaseMethods.SetFont = function(parser: TexParser, _name: string, font: string) {\n  parser.stack.env['font'] = font;\n};\n\n/**\n * Setting style, e.g., via \\\\displaystyle, \\\\textstyle, etc.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n * @param {string} texStyle The tex style name: D, T, S, SS\n * @param {boolean} style True if we are in displaystyle.\n * @param {string} level The nesting level for scripts.\n */\nBaseMethods.SetStyle = function(parser: TexParser, _name: string,\n                                texStyle: string, style: boolean,\n                                level: string) {\n  parser.stack.env['style'] = texStyle;\n  parser.stack.env['level'] = level;\n  parser.Push(\n    parser.itemFactory.create('style').setProperty(\n      'styles', {displaystyle: style, scriptlevel: level}));\n};\n\n\n/**\n * Setting size of an expression, e.g., \\\\small, \\\\huge.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n * @param {number} size The size value.\n */\nBaseMethods.SetSize = function(parser: TexParser, _name: string, size: number) {\n  parser.stack.env['size'] = size;\n  parser.Push(\n    parser.itemFactory.create('style').setProperty('styles', {mathsize: em(size)}));\n};\n\n/**\n * Setting explicit spaces, e.g., via commata or colons.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n * @param {string} space The space value.\n */\nBaseMethods.Spacer = function(parser: TexParser, _name: string, space: number) {\n  // @test Positive Spacing, Negative Spacing\n  const node = parser.create('node', 'mspace', [], {width: em(space)});\n  const style = parser.create('node', 'mstyle', [node], {scriptlevel: 0});\n  parser.Push(style);\n};\n\n\n/**\n * Parses left/right fenced expressions.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n */\nBaseMethods.LeftRight = function(parser: TexParser, name: string) {\n  // @test Fenced, Fenced3\n  const first = name.substr(1);\n  parser.Push(parser.itemFactory.create(first, parser.GetDelimiter(name), parser.stack.env.color));\n};\n\n/**\n * Handle a named math function, e.g., \\\\sin, \\\\cos\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n * @param {string} id Alternative string representation of the function.\n */\nBaseMethods.NamedFn = function(parser: TexParser, name: string, id: string) {\n  // @test Named Function\n  if (!id) {\n    id = name.substr(1);\n  }\n  const mml = parser.create('token', 'mi', {texClass: TEXCLASS.OP}, id);\n  parser.Push(parser.itemFactory.create('fn', mml));\n};\n\n\n/**\n * Handle a named math operator, e.g., \\\\min, \\\\lim\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n * @param {string} id Alternative string representation of the operator.\n */\nBaseMethods.NamedOp = function(parser: TexParser, name: string, id: string) {\n  // @test Limit\n  if (!id) {\n    id = name.substr(1);\n  }\n  id = id.replace(/&thinsp;/, '\\u2006');\n  const mml = parser.create('token', 'mo', {\n    movablelimits: true,\n    movesupsub: true,\n    form: TexConstant.Form.PREFIX,\n    texClass: TEXCLASS.OP\n  }, id);\n  parser.Push(mml);\n};\n\n/**\n * Handle a limits command for math operators.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n * @param {string} limits The limits arguments.\n */\nBaseMethods.Limits = function(parser: TexParser, _name: string, limits: string) {\n  // @test Limits\n  let op = parser.stack.Prev(true);\n  // Get the texclass for the core operator.\n  if (!op || (NodeUtil.getTexClass(NodeUtil.getCoreMO(op)) !== TEXCLASS.OP &&\n              NodeUtil.getProperty(op, 'movesupsub') == null)) {\n    // @test Limits Error\n    throw new TexError('MisplacedLimits', '%1 is allowed only on operators', parser.currentCS);\n  }\n  const top = parser.stack.Top();\n  let node;\n  if (NodeUtil.isType(op, 'munderover') && !limits) {\n    // @test Limits UnderOver\n    node = parser.create('node', 'msubsup');\n    NodeUtil.copyChildren(op, node);\n    op = top.Last = node;\n  } else if (NodeUtil.isType(op, 'msubsup') && limits) {\n    // @test Limits SubSup\n    // node = parser.create('node', 'munderover', NodeUtil.getChildren(op), {});\n    // Needs to be copied, otherwise we get an error in MmlNode.appendChild!\n    node = parser.create('node', 'munderover');\n    NodeUtil.copyChildren(op, node);\n    op = top.Last = node;\n  }\n  NodeUtil.setProperty(op, 'movesupsub', limits ? true : false);\n  NodeUtil.setProperties(NodeUtil.getCoreMO(op), {'movablelimits': false});\n  if (NodeUtil.getAttribute(op, 'movablelimits') ||\n      NodeUtil.getProperty(op, 'movablelimits')) {\n    NodeUtil.setProperties(op, {'movablelimits': false});\n  }\n};\n\n\n/**\n * Handle over commands.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n * @param {string} open The open delimiter in case of a \"withdelim\" version.\n * @param {string} close The close delimiter.\n */\nBaseMethods.Over = function(parser: TexParser, name: string, open: string, close: string) {\n  // @test Over\n  const mml = parser.itemFactory.create('over').setProperty('name', parser.currentCS) ;\n  if (open || close) {\n    // @test Choose\n    mml.setProperty('open', open);\n    mml.setProperty('close', close);\n  } else if (name.match(/withdelims$/)) {\n    // @test Over With Delims, Above With Delims\n    mml.setProperty('open', parser.GetDelimiter(name));\n    mml.setProperty('close', parser.GetDelimiter(name));\n  }\n  if (name.match(/^\\\\above/)) {\n    // @test Above, Above With Delims\n    mml.setProperty('thickness', parser.GetDimen(name));\n  }\n  else if (name.match(/^\\\\atop/) || open || close) {\n    // @test Choose\n    mml.setProperty('thickness', 0);\n  }\n  parser.Push(mml);\n};\n\n/**\n * Parses a fraction.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n */\nBaseMethods.Frac = function(parser: TexParser, name: string) {\n  // @test Frac\n  const num = parser.ParseArg(name);\n  const den = parser.ParseArg(name);\n  const node = parser.create('node', 'mfrac', [num, den]);\n  parser.Push(node);\n};\n\n/**\n * Parses a square root element.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n */\nBaseMethods.Sqrt = function(parser: TexParser, name: string) {\n  const n = parser.GetBrackets(name);\n  let arg = parser.GetArgument(name);\n  if (arg === '\\\\frac') {\n    arg  += '{' + parser.GetArgument(arg) + '}{' + parser.GetArgument(arg) + '}';\n  }\n  let mml = new TexParser(arg, parser.stack.env, parser.configuration).mml();\n  if (!n) {\n    // @test Square Root\n    mml = parser.create('node', 'msqrt', [mml]);\n  } else {\n    // @test General Root\n    mml = parser.create('node', 'mroot', [mml, parseRoot(parser, n)]);\n  }\n  parser.Push(mml);\n};\n\n\n// Utility\n/**\n * Parse a general root.\n * @param {TexParser} parser The calling parser.\n * @param {string} n The index of the root.\n */\nfunction parseRoot(parser: TexParser, n: string) {\n  // @test General Root, Explicit Root\n  const env = parser.stack.env;\n  const inRoot = env['inRoot'];\n  env['inRoot'] = true;\n  const newParser = new TexParser(n, env, parser.configuration);\n  let node = newParser.mml();\n  const global = newParser.stack.global;\n  if (global['leftRoot'] || global['upRoot']) {\n    // @test Tweaked Root\n    const def: EnvList = {};\n    if (global['leftRoot']) {\n      def['width'] = global['leftRoot'];\n    }\n    if (global['upRoot']) {\n      def['voffset'] = global['upRoot'];\n      def['height'] = global['upRoot'];\n    }\n    node = parser.create('node', 'mpadded', [node], def);\n  }\n  env['inRoot'] = inRoot;\n  return node;\n}\n\n\n/**\n * Parse a general root.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n */\nBaseMethods.Root = function(parser: TexParser, name: string) {\n  const n = parser.GetUpTo(name, '\\\\of');\n  const arg = parser.ParseArg(name);\n  const node = parser.create('node', 'mroot', [arg, parseRoot(parser, n)]);\n  parser.Push(node);\n};\n\n\n/**\n * Parses a movable index element in a root, e.g. \\\\uproot, \\\\leftroot\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n * @param {string} id Argument which should be a string representation of an integer.\n */\nBaseMethods.MoveRoot = function(parser: TexParser, name: string, id: string) {\n  // @test Tweaked Root\n  if (!parser.stack.env['inRoot']) {\n    // @test Misplaced Move Root\n    throw new TexError('MisplacedMoveRoot', '%1 can appear only within a root', parser.currentCS);\n  }\n  if (parser.stack.global[id]) {\n    // @test Multiple Move Root\n    throw new TexError('MultipleMoveRoot', 'Multiple use of %1', parser.currentCS);\n  }\n  let n = parser.GetArgument(name);\n  if (!n.match(/-?[0-9]+/)) {\n    // @test Incorrect Move Root\n    throw new TexError('IntegerArg', 'The argument to %1 must be an integer', parser.currentCS);\n  }\n  n = (parseInt(n, 10) / 15) + 'em';\n  if (n.substr(0, 1) !== '-') {\n    n = '+' + n;\n  }\n  parser.stack.global[id] = n;\n};\n\n\n/**\n * Handle accents.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n * @param {string} accent The accent.\n * @param {boolean} stretchy True if accent is stretchy.\n */\nBaseMethods.Accent = function(parser: TexParser, name: string, accent: string, stretchy: boolean) {\n  // @test Vector\n  const c = parser.ParseArg(name);\n  // @test Vector Font\n  const def = {...ParseUtil.getFontDef(parser), accent: true, mathaccent: true};\n  const entity = NodeUtil.createEntity(accent);\n  const moNode = parser.create('token', 'mo', def, entity);\n  const mml = moNode;\n  NodeUtil.setAttribute(mml, 'stretchy', stretchy ? true : false);\n  // @test Vector Op, Vector\n  const mo = (NodeUtil.isEmbellished(c) ? NodeUtil.getCoreMO(c) : c);\n  if (NodeUtil.isType(mo, 'mo') || NodeUtil.getProperty(mo, 'movablelimits')) {\n    // @test Vector Op\n    NodeUtil.setProperties(mo, {'movablelimits': false});\n  }\n  const muoNode = parser.create('node', 'munderover');\n  // This is necessary to get the empty element into the children.\n  NodeUtil.setChild(muoNode, 0, c);\n  NodeUtil.setChild(muoNode, 1, null);\n  NodeUtil.setChild(muoNode, 2, mml);\n  let texAtom = parser.create('node', 'TeXAtom', [muoNode]);\n  parser.Push(texAtom);\n};\n\n\n/**\n * Handles stacked elements.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n * @param {string} c Character to stack.\n * @param {boolean} stack True if stacked operator.\n */\nBaseMethods.UnderOver = function(parser: TexParser, name: string, c: string, stack: boolean) {\n  const entity = NodeUtil.createEntity(c);\n  const mo = parser.create('token', 'mo', {stretchy: true, accent: true}, entity);\n  const pos = (name.charAt(1) === 'o' ? 'over' : 'under');\n  const base = parser.ParseArg(name);\n  parser.Push(ParseUtil.underOver(parser, base, mo, pos, stack));\n};\n\n\n/**\n * Handles overset.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n */\nBaseMethods.Overset = function(parser: TexParser, name: string) {\n  // @test Overset\n  const top = parser.ParseArg(name);\n  const base = parser.ParseArg(name);\n  ParseUtil.checkMovableLimits(base);\n  if (top.isKind('mo')) {\n    NodeUtil.setAttribute(top, 'accent', false);\n  }\n  const node = parser.create('node', 'mover', [base, top]);\n  parser.Push(node);\n};\n\n\n/**\n * Handles underset.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n */\nBaseMethods.Underset = function(parser: TexParser, name: string) {\n  // @test Underset\n  const bot = parser.ParseArg(name);\n  const base = parser.ParseArg(name);\n  ParseUtil.checkMovableLimits(base);\n  if (bot.isKind('mo')) {\n    NodeUtil.setAttribute(bot, 'accent', false);\n  }\n  const node = parser.create('node', 'munder', [base, bot], {accentunder: false});\n  parser.Push(node);\n};\n\n\n/**\n * Handles overunderset.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n */\nBaseMethods.Overunderset = function(parser: TexParser, name: string) {\n  const top = parser.ParseArg(name);\n  const bot = parser.ParseArg(name);\n  const base = parser.ParseArg(name);\n  ParseUtil.checkMovableLimits(base);\n  if (top.isKind('mo')) {\n    NodeUtil.setAttribute(top, 'accent', false);\n  }\n  if (bot.isKind('mo')) {\n    NodeUtil.setAttribute(bot, 'accent', false);\n  }\n  const node = parser.create('node', 'munderover', [base, bot, top], {accent: false, accentunder: false});\n  parser.Push(node);\n};\n\n\n/**\n * Creates TeXAtom, when class of element is changed explicitly.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n * @param {number} mclass The new TeX class.\n */\nBaseMethods.TeXAtom = function(parser: TexParser, name: string, mclass: number) {\n  let def: EnvList = {texClass: mclass};\n  let mml: StackItem | MmlNode;\n  let node: MmlNode;\n  let parsed: MmlNode;\n  if (mclass === TEXCLASS.OP) {\n    def['movesupsub'] = def['movablelimits'] = true;\n    const arg = parser.GetArgument(name);\n    const match = arg.match(/^\\s*\\\\rm\\s+([a-zA-Z0-9 ]+)$/);\n    if (match) {\n      // @test Mathop\n      def['mathvariant'] = TexConstant.Variant.NORMAL;\n      node = parser.create('token', 'mi', def, match[1]);\n    } else {\n      // @test Mathop Cal\n      parsed = new TexParser(arg, parser.stack.env, parser.configuration).mml();\n      node = parser.create('node', 'TeXAtom', [parsed], def);\n    }\n    mml = parser.itemFactory.create('fn', node);\n  } else {\n    // @test Mathrel\n    parsed = parser.ParseArg(name);\n    mml = parser.create('node', 'TeXAtom', [parsed], def);\n  }\n  parser.Push(mml);\n};\n\n\n/**\n * Creates mmltoken elements. Used in Macro substitutions.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n */\nBaseMethods.MmlToken = function(parser: TexParser, name: string) {\n  // @test Modulo\n  const kind = parser.GetArgument(name);\n  let attr = parser.GetBrackets(name, '').replace(/^\\s+/, '');\n  const text = parser.GetArgument(name);\n  const def: EnvList = {};\n  const keep: string[] = [];\n  let node: MmlNode;\n  try {\n    node = parser.create('node', kind);\n  } catch (e) {\n    node = null;\n  }\n  if (!node || !node.isToken) {\n    // @test Token Illegal Type, Token Wrong Type\n    throw new TexError('NotMathMLToken', '%1 is not a token element', kind);\n  }\n  while (attr !== '') {\n    const match = attr.match(/^([a-z]+)\\s*=\\s*('[^']*'|\"[^\"]*\"|[^ ,]*)\\s*,?\\s*/i);\n    if (!match) {\n      // @test Token Invalid Attribute\n      throw new TexError('InvalidMathMLAttr', 'Invalid MathML attribute: %1', attr);\n    }\n    if (!node.attributes.hasDefault(match[1]) && !MmlTokenAllow[match[1]]) {\n      // @test Token Unknown Attribute, Token Wrong Attribute\n      throw new TexError('UnknownAttrForElement',\n                          '%1 is not a recognized attribute for %2',\n                          match[1], kind);\n    }\n    let value: string | boolean = ParseUtil.MmlFilterAttribute(\n      parser, match[1], match[2].replace(/^(['\"])(.*)\\1$/, '$2'));\n    if (value) {\n      if (value.toLowerCase() === 'true') {\n        value = true;\n      }\n      else if (value.toLowerCase() === 'false') {\n        value = false;\n      }\n      def[match[1]] = value;\n      keep.push(match[1]);\n    }\n    attr = attr.substr(match[0].length);\n  }\n  if (keep.length) {\n    def['mjx-keep-attrs'] = keep.join(' ');\n  }\n  const textNode = parser.create('text', text);\n  node.appendChild(textNode);\n  NodeUtil.setProperties(node, def);\n  parser.Push(node);\n};\n\n\n/**\n * Handle strut.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n */\nBaseMethods.Strut = function(parser: TexParser, _name: string) {\n  // @test Strut\n  const row = parser.create('node', 'mrow');\n  const padded = parser.create('node', 'mpadded', [row],\n                                                         {height: '8.6pt', depth: '3pt', width: 0});\n  parser.Push(padded);\n};\n\n/**\n * Handle phantom commands.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n * @param {string} v Vertical size.\n * @param {string} h Horizontal size.\n */\nBaseMethods.Phantom = function(parser: TexParser, name: string, v: string, h: string) {\n  // @test Phantom\n  let box = parser.create('node', 'mphantom', [parser.ParseArg(name)]);\n  if (v || h) {\n    // TEMP: Changes here\n    box = parser.create('node', 'mpadded', [box]);\n    if (h) {\n      // @test Horizontal Phantom\n      NodeUtil.setAttribute(box, 'height', 0);\n      NodeUtil.setAttribute(box, 'depth', 0);\n    }\n    if (v) {\n      // @test Vertical Phantom\n      NodeUtil.setAttribute(box, 'width', 0);\n    }\n  }\n  const atom = parser.create('node', 'TeXAtom', [box]);\n  parser.Push(atom);\n};\n\n/**\n * Handle smash.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n */\nBaseMethods.Smash = function(parser: TexParser, name: string) {\n  // @test Smash, Smash Top, Smash Bottom\n  const bt = ParseUtil.trimSpaces(parser.GetBrackets(name, ''));\n  const smash = parser.create('node', 'mpadded', [parser.ParseArg(name)]);\n  // TEMP: Changes here:\n  switch (bt) {\n  case 'b': NodeUtil.setAttribute(smash, 'depth', 0); break;\n  case 't': NodeUtil.setAttribute(smash, 'height', 0); break;\n  default:\n    NodeUtil.setAttribute(smash, 'height', 0);\n    NodeUtil.setAttribute(smash, 'depth', 0);\n  }\n  const atom = parser.create('node', 'TeXAtom', [smash]);\n  parser.Push(atom);\n};\n\n/**\n * Handle rlap and llap commands.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n */\nBaseMethods.Lap = function(parser: TexParser, name: string) {\n  // @test Llap, Rlap\n  const mml = parser.create('node', 'mpadded', [parser.ParseArg(name)], {width: 0});\n  if (name === '\\\\llap') {\n    // @test Llap\n    NodeUtil.setAttribute(mml, 'lspace', '-1width');\n  }\n  const atom = parser.create('node', 'TeXAtom', [mml]);\n  parser.Push(atom);\n};\n\n/**\n * Handle raise and lower commands.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n */\nBaseMethods.RaiseLower = function(parser: TexParser, name: string) {\n  // @test Raise, Lower, Raise Negative, Lower Negative\n  let h = parser.GetDimen(name);\n  let item =\n    parser.itemFactory.create('position').setProperties({name: parser.currentCS, move: 'vertical'}) ;\n  // TEMP: Changes here:\n  if (h.charAt(0) === '-') {\n    // @test Raise Negative, Lower Negative\n    h = h.slice(1);\n    name = name.substr(1) === 'raise' ? '\\\\lower' : '\\\\raise';\n  }\n  if (name === '\\\\lower') {\n    // @test Raise, Raise Negative\n    item.setProperty('dh', '-' + h);\n    item.setProperty('dd', '+' + h);\n  } else {\n    // @test Lower, Lower Negative\n    item.setProperty('dh', '+' + h);\n    item.setProperty('dd', '-' + h);\n  }\n  parser.Push(item);\n};\n\n\n/**\n * Handle moveleft, moveright commands\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n */\nBaseMethods.MoveLeftRight = function(parser: TexParser, name: string) {\n  // @test Move Left, Move Right, Move Left Negative, Move Right Negative\n  let h = parser.GetDimen(name);\n  let nh = (h.charAt(0) === '-' ? h.slice(1) : '-' + h);\n  if (name === '\\\\moveleft') {\n    let tmp = h;\n    h = nh;\n    nh = tmp;\n  }\n  parser.Push(\n    parser.itemFactory.create('position').setProperties({\n      name: parser.currentCS, move: 'horizontal',\n      left:  parser.create('node', 'mspace', [], {width: h}),\n      right: parser.create('node', 'mspace', [], {width: nh})}) );\n};\n\n\n/**\n * Handle horizontal spacing commands.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n */\nBaseMethods.Hskip = function(parser: TexParser, name: string) {\n  // @test Modulo\n  const node = parser.create('node', 'mspace', [],\n                             {width: parser.GetDimen(name)});\n  parser.Push(node);\n};\n\n\n/**\n * Handle removal of spaces in script modes\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n */\nBaseMethods.Nonscript = function(parser: TexParser, _name: string) {\n  parser.Push(parser.itemFactory.create('nonscript'));\n};\n\n\n/**\n * Handle Rule and Space command\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n * @param {string} style The style of the rule spacer.\n */\nBaseMethods.Rule = function(parser: TexParser, name: string, style: string) {\n  // @test Rule 3D, Space 3D\n  const w = parser.GetDimen(name),\n  h = parser.GetDimen(name),\n  d = parser.GetDimen(name);\n  let def: EnvList = {width: w, height: h, depth: d};\n  if (style !== 'blank') {\n    def['mathbackground'] = (parser.stack.env['color'] || 'black');\n  }\n  const node = parser.create('node', 'mspace', [], def);\n  parser.Push(node);\n};\n\n\n/**\n * Handle rule command.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n */\nBaseMethods.rule = function(parser: TexParser, name: string) {\n  // @test Rule 2D\n  const v = parser.GetBrackets(name),\n  w = parser.GetDimen(name),\n  h = parser.GetDimen(name);\n  let mml = parser.create('node', 'mspace', [], {\n    width: w, height: h,\n    mathbackground: (parser.stack.env['color'] || 'black') });\n  if (v) {\n    mml = parser.create('node', 'mpadded', [mml], {voffset: v});\n    if (v.match(/^\\-/)) {\n      NodeUtil.setAttribute(mml, 'height', v);\n      NodeUtil.setAttribute(mml, 'depth', '+' + v.substr(1));\n    } else {\n      NodeUtil.setAttribute(mml, 'height', '+' + v);\n    }\n  }\n  parser.Push(mml);\n};\n\n/**\n * Handle big command sequences, e.g., \\\\big, \\\\Bigg.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n * @param {number} mclass The TeX class of the element.\n * @param {number} size The em size.\n */\nBaseMethods.MakeBig = function(parser: TexParser, name: string, mclass: number, size: number) {\n  // @test Choose, Over With Delims, Above With Delims\n  size *= P_HEIGHT;\n  let sizeStr = String(size).replace(/(\\.\\d\\d\\d).+/, '$1') + 'em';\n  const delim = parser.GetDelimiter(name, true);\n  const mo = parser.create('token', 'mo', {\n    minsize: sizeStr, maxsize: sizeStr,\n    fence: true, stretchy: true, symmetric: true\n  }, delim);\n  const node = parser.create('node', 'TeXAtom', [mo], {texClass: mclass});\n  parser.Push(node);\n};\n\n\n/**\n * Handle buildrel command.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n */\nBaseMethods.BuildRel = function(parser: TexParser, name: string) {\n  // @test BuildRel, BuildRel Expression\n  const top = parser.ParseUpTo(name, '\\\\over');\n  const bot = parser.ParseArg(name);\n  const node = parser.create('node', 'munderover');\n  // This is necessary to get the empty element into the children.\n  NodeUtil.setChild(node, 0, bot);\n  NodeUtil.setChild(node, 1, null);\n  NodeUtil.setChild(node, 2, top);\n  const atom = parser.create('node', 'TeXAtom', [node], {texClass: TEXCLASS.REL});\n  parser.Push(atom);\n};\n\n\n/**\n * Handle horizontal boxes.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n * @param {string} style Box style.\n * @param {string} font The mathvariant to use\n */\nBaseMethods.HBox = function(parser: TexParser, name: string, style: string, font?: string) {\n  // @test Hbox\n  parser.PushAll(ParseUtil.internalMath(parser, parser.GetArgument(name), style, font));\n};\n\n/**\n * Handle framed boxes.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n */\nBaseMethods.FBox = function(parser: TexParser, name: string) {\n  // @test Fbox\n  const internal = ParseUtil.internalMath(parser, parser.GetArgument(name));\n  const node = parser.create('node', 'menclose', internal, {notation: 'box'});\n  parser.Push(node);\n};\n\n/**\n * Handle framed boxes with options.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n */\nBaseMethods.FrameBox = function(parser: TexParser, name: string) {\n  const width = parser.GetBrackets(name);\n  const pos = parser.GetBrackets(name) || 'c';\n  let mml = ParseUtil.internalMath(parser, parser.GetArgument(name));\n  if (width) {\n    mml = [parser.create('node', 'mpadded', mml, {\n      width,\n      'data-align': lookup(pos, {l: 'left', r: 'right'}, 'center')\n    })];\n  }\n  const node = parser.create('node', 'TeXAtom',\n                             [parser.create('node', 'menclose', mml, {notation: 'box'})],\n                             {texClass: TEXCLASS.ORD});\n  parser.Push(node);\n};\n\n\n/**\n * Handle \\\\not.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n */\nBaseMethods.Not = function(parser: TexParser, _name: string) {\n  // @test Negation Simple, Negation Complex, Negation Explicit,\n  //       Negation Large\n  parser.Push(parser.itemFactory.create('not'));\n};\n\n\n/**\n * Handle dots.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n */\nBaseMethods.Dots = function(parser: TexParser, _name: string) {\n  // @test Operator Dots\n  const ldotsEntity = NodeUtil.createEntity('2026');\n  const cdotsEntity = NodeUtil.createEntity('22EF');\n  const ldots = parser.create('token', 'mo', {stretchy: false}, ldotsEntity);\n  const cdots = parser.create('token', 'mo', {stretchy: false}, cdotsEntity);\n  parser.Push(\n    parser.itemFactory.create('dots').setProperties({\n      ldots: ldots,\n      cdots: cdots\n    }) );\n};\n\n\n/**\n * Handle small matrix environments.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n * @param {string} open Opening fence.\n * @param {string} close Closing fence.\n * @param {string} align Column alignment.\n * @param {string} spacing Column spacing.\n * @param {string} vspacing Row spacing.\n * @param {string} style Display or text style.\n * @param {boolean} cases Is it a cases environment.\n * @param {boolean} numbered Is it a numbered environment.\n */\nBaseMethods.Matrix = function(parser: TexParser, _name: string,\n                              open: string, close: string, align: string,\n                              spacing: string, vspacing: string, style: string,\n                              cases: boolean, numbered: boolean) {\n  const c = parser.GetNext();\n  if (c === '') {\n    // @test Matrix Error\n    throw new TexError('MissingArgFor', 'Missing argument for %1', parser.currentCS);\n  }\n  if (c === '{') {\n    // @test Matrix Braces, Matrix Columns, Matrix Rows.\n    parser.i++;\n  } else {\n    // @test Matrix Arg\n    parser.string = c + '}' + parser.string.slice(parser.i + 1);\n    parser.i = 0;\n  }\n  // @test Matrix Braces, Matrix Columns, Matrix Rows.\n  const array = parser.itemFactory.create('array').setProperty('requireClose', true) as sitem.ArrayItem;\n  array.arraydef = {\n    rowspacing: (vspacing || '4pt'),\n    columnspacing: (spacing || '1em')\n  };\n  if (cases) {\n    // @test Matrix Cases\n    array.setProperty('isCases', true);\n  }\n  if (numbered) {\n    // @test Matrix Numbered\n    array.setProperty('isNumbered', true);\n    array.arraydef.side = numbered;\n  }\n  if (open || close) {\n    // @test Matrix Parens, Matrix Parens Subscript, Matrix Cases\n    array.setProperty('open', open);\n    array.setProperty('close', close);\n  }\n  if (style === 'D') {\n    // @test Matrix Numbered\n    array.arraydef.displaystyle = true;\n  }\n  if (align != null) {\n    // @test Matrix Cases, Matrix Numbered\n    array.arraydef.columnalign = align;\n  }\n  parser.Push(array);\n};\n\n\n/**\n * Handle array entry.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n */\nBaseMethods.Entry = function(parser: TexParser, name: string) {\n  // @test Label, Array, Cross Product Formula\n  parser.Push(parser.itemFactory.create('cell').setProperties({isEntry: true, name: name}));\n  const top = parser.stack.Top();\n  const env = top.getProperty('casesEnv') as string;\n  const cases = top.getProperty('isCases');\n  if (!cases && !env) return;\n  //\n  //  Make second column be in \\text{...} (unless it is already\n  //  in a \\text{...}, for backward compatibility).\n  //\n  const str = parser.string;\n  let braces = 0, close = -1, i = parser.i, m = str.length;\n  const end = (env ? new RegExp(`^\\\\\\\\end\\\\s*\\\\{${env.replace(/\\*/, '\\\\*')}\\\\}`) : null);\n  //\n  //  Look through the string character by character...\n  //\n  while (i < m) {\n    const c = str.charAt(i);\n    if (c === '{') {\n      //\n      //  Increase the nested brace count and go on\n      //\n      braces++;\n      i++;\n    } else if (c === '}') {\n      //\n      //  If there are too many close braces, just end (we will get an\n      //    error message later when the rest of the string is parsed)\n      //  Otherwise\n      //    decrease the nested brace count,\n      //    if it is now zero and we haven't already marked the end of the\n      //      first brace group, record the position (use to check for \\text{} later)\n      //    go on to the next character.\n      //\n      if (braces === 0) {\n        m = 0;\n      } else {\n        braces--;\n        if (braces === 0 && close < 0) {\n          close = i - parser.i;\n        }\n        i++;\n      }\n    } else if (c === '&' && braces === 0) {\n      //\n      //  Extra alignment tabs are not allowed in cases\n      //\n      // @test ExtraAlignTab\n      throw new TexError('ExtraAlignTab', 'Extra alignment tab in \\\\cases text');\n    } else if (c === '\\\\') {\n      //\n      //  If the macro is \\cr or \\\\, end the search, otherwise skip the macro\n      //  (multi-letter names don't matter, as we will skip the rest of the\n      //   characters in the main loop)\n      //\n      const rest = str.substr(i);\n      if (rest.match(/^((\\\\cr)[^a-zA-Z]|\\\\\\\\)/) || (end && rest.match(end))) {\n        m = 0;\n      } else {\n        i += 2;\n      }\n    } else {\n      //\n      //  Go on to the next character\n      //\n      i++;\n    }\n  }\n  //\n  //  Check if the second column text is already in \\text{};\n  //  If not, process the second column as text and continue parsing from there,\n  //    (otherwise process the second column as normal, since it is in \\text{}\n  //\n  const text = str.substr(parser.i, i - parser.i);\n  if (!text.match(/^\\s*\\\\text[^a-zA-Z]/) || close !== text.replace(/\\s+$/, '').length - 1) {\n    const internal = ParseUtil.internalMath(parser, ParseUtil.trimSpaces(text), 0);\n    parser.PushAll(internal);\n    parser.i = i;\n  }\n};\n\n/**\n * Handle newline in array.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n */\nBaseMethods.Cr = function(parser: TexParser, name: string) {\n  // @test Cr Linebreak, Misplaced Cr\n  parser.Push(\n    parser.itemFactory.create('cell').setProperties({isCR: true, name: name}));\n};\n\n\n/**\n * Handle newline outside array.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n * @param {boolean} nobrackets Flag indicating if newline is followed by\n *     brackets.\n */\nBaseMethods.CrLaTeX = function(parser: TexParser, name: string, nobrackets: boolean = false) {\n  let n: string;\n  if (!nobrackets) {\n    // TODO: spaces before * and [ are not allowed in AMS environments like align, but\n    //       should be allowed in array and eqnarray.  This distinction should be honored here.\n    if (parser.string.charAt(parser.i) === '*') {  // The * controls page breaking, so ignore it\n      parser.i++;\n    }\n    if (parser.string.charAt(parser.i) === '[') {\n      let dim = parser.GetBrackets(name, '');\n      let [value, unit, ] = ParseUtil.matchDimen(dim);\n      // @test Custom Linebreak\n      if (dim && !value) {\n        // @test Dimension Error\n        throw new TexError('BracketMustBeDimension',\n                           'Bracket argument to %1 must be a dimension', parser.currentCS);\n      }\n      n = value + unit;\n    }\n  }\n  parser.Push(\n    parser.itemFactory.create('cell').setProperties({isCR: true, name: name, linebreak: true})\n  );\n  const top = parser.stack.Top();\n  let node: MmlNode;\n  if (top instanceof sitem.ArrayItem) {\n    // @test Array\n    if (n) {\n      top.addRowSpacing(n);\n    }\n  } else {\n    if (n) {\n      // @test Custom Linebreak\n      node = parser.create('node', 'mspace', [], {depth: n});\n      parser.Push(node);\n    }\n    // @test Linebreak\n    node = parser.create('node', 'mspace', [], {linebreak: TexConstant.LineBreak.NEWLINE});\n    parser.Push(node);\n  }\n};\n\n/**\n * Handle horizontal lines in arrays.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n * @param {string} style Style of the line. E.g., dashed.\n */\nBaseMethods.HLine = function(parser: TexParser, _name: string, style: string) {\n  if (style == null) {\n    style = 'solid';\n  }\n  const top = parser.stack.Top();\n  if (!(top instanceof sitem.ArrayItem) || top.Size()) {\n    // @test Misplaced hline\n    throw new TexError('Misplaced', 'Misplaced %1', parser.currentCS);\n  }\n  if (!top.table.length) {\n    // @test Enclosed top, Enclosed top bottom\n    top.frame.push('top');\n  } else {\n    // @test Enclosed bottom, Enclosed top bottom\n    const lines = (top.arraydef['rowlines'] ? (top.arraydef['rowlines'] as string).split(/ /) : []);\n    while (lines.length < top.table.length) {\n      lines.push('none');\n    }\n    lines[top.table.length - 1] = style;\n    top.arraydef['rowlines'] = lines.join(' ');\n  }\n};\n\n\n/**\n * Handle hfill commands.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n */\nBaseMethods.HFill = function(parser: TexParser, _name: string) {\n  const top = parser.stack.Top();\n  if (top instanceof sitem.ArrayItem) {\n    // @test Hfill\n    top.hfill.push(top.Size());\n  } else {\n    // @test UnsupportedHFill\n    throw new TexError('UnsupportedHFill', 'Unsupported use of %1', parser.currentCS);\n  }\n};\n\n\n/**\n *   LaTeX environments\n */\n\n/**\n * Handle begin and end environments. This is a macro method.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n */\nBaseMethods.BeginEnd = function(parser: TexParser, name: string) {\n  // @test Array1, Array2, Array Test\n  let env = parser.GetArgument(name);\n  if (env.match(/\\\\/i)) {\n    // @test InvalidEnv\n    throw new TexError('InvalidEnv', 'Invalid environment name \\'%1\\'', env);\n  }\n  let macro = parser.configuration.handlers.get('environment').lookup(env) as Macro;\n  if (macro && name === '\\\\end') {\n    // If the first argument is true, we have some sort of user defined\n    // environment. Otherwise we have a standard LaTeX environment that is\n    // handled with begin and end items.\n    if (!macro.args[0]) {\n      const mml = parser.itemFactory.create('end').setProperty('name', env);\n      parser.Push(mml);\n      return;\n    }\n    // Remember the user defined environment we are closing.\n    parser.stack.env['closing'] = env;\n  }\n  ParseUtil.checkMaxMacros(parser, false);\n  parser.parse('environment', [parser, env]);\n};\n\n\n/**\n * Handle array environment.\n * @param {TexParser} parser The calling parser.\n * @param {StackItem} begin The opening stackitem.\n * @param {string} open Opening fence.\n * @param {string} close Closing fence.\n * @param {string} align Column alignment.\n * @param {string} spacing Column spacing.\n * @param {string} vspacing Row spacing.\n * @param {string} style Display or text style.\n * @param {boolean} raggedHeight Does the height need to be adjusted?\n */\nBaseMethods.Array = function(parser: TexParser, begin: StackItem,\n                             open: string, close: string, align: string,\n                             spacing: string, vspacing: string, style: string,\n                             raggedHeight: boolean) {\n  if (!align) {\n    // @test Array Single\n    align = parser.GetArgument('\\\\begin{' + begin.getName() + '}');\n  }\n  let lines = ('c' + align).replace(/[^clr|:]/g, '').replace(/[^|:]([|:])+/g, '$1');\n  align = align.replace(/[^clr]/g, '').split('').join(' ');\n  align = align.replace(/l/g, 'left').replace(/r/g, 'right').replace(/c/g, 'center');\n  const array = parser.itemFactory.create('array') as sitem.ArrayItem;\n  array.arraydef = {\n    columnalign: align,\n    columnspacing: (spacing || '1em'),\n    rowspacing: (vspacing || '4pt')\n  };\n  if (lines.match(/[|:]/)) {\n    // @test Enclosed left right\n    if (lines.charAt(0).match(/[|:]/)) {\n      // @test Enclosed left right, Enclosed left\n      array.frame.push('left');\n      array.dashed = lines.charAt(0) === ':';\n    }\n    if (lines.charAt(lines.length - 1).match(/[|:]/)) {\n      // @test Enclosed left right, Enclosed right\n      array.frame.push('right');\n    }\n    // @test Enclosed left right\n    lines = lines.substr(1, lines.length - 2);\n    array.arraydef.columnlines =\n      lines.split('').join(' ').replace(/[^|: ]/g, 'none').replace(/\\|/g, 'solid').replace(/:/g, 'dashed');\n  }\n  if (open)  {\n    // @test Cross Product\n    array.setProperty('open', parser.convertDelimiter(open));\n  }\n  if (close) {\n    // @test Cross Product\n    array.setProperty('close', parser.convertDelimiter(close));\n  }\n  if ((style || '').charAt(1) === '\\'') {\n    array.arraydef['data-cramped'] = true;\n    style = style.charAt(0);\n  }\n  if (style === 'D') {\n    // TODO: This case never seems to occur! No test.\n    array.arraydef['displaystyle'] = true;\n  }\n  else if (style) {\n    // @test Subarray, Small Matrix\n    array.arraydef['displaystyle'] = false;\n  }\n  if (style === 'S') {\n    // @test Subarray, Small Matrix\n    array.arraydef['scriptlevel'] = 1;\n  }\n  if (raggedHeight)  {\n    // @test Subarray, Small Matrix\n    array.arraydef['useHeight'] = false;\n  }\n  parser.Push(begin);\n  return array;\n};\n\n\n/**\n * Handle aligned arrays.\n * @param {TexParser} parser The calling parser.\n * @param {StackItem} begin The opening stackitem.\n */\nBaseMethods.AlignedArray = function(parser: TexParser, begin: StackItem) {\n  // @test Array1, Array2, Array Test\n  const align = parser.GetBrackets('\\\\begin{' + begin.getName() + '}');\n  let item = BaseMethods.Array(parser, begin);\n  return ParseUtil.setArrayAlign(item as sitem.ArrayItem, align);\n};\n\n\n/**\n * Handle equation environment.\n * @param {TexParser} parser The calling parser.\n * @param {StackItem} begin The opening stackitem.\n * @param {boolean} numbered True if environment is numbered.\n */\nBaseMethods.Equation = function (parser: TexParser, begin: StackItem, numbered: boolean) {\n  parser.Push(begin);\n  ParseUtil.checkEqnEnv(parser);\n  return parser.itemFactory.create('equation', numbered).\n    setProperty('name', begin.getName());\n};\n\n\n/**\n * Handle eqnarray.\n * @param {TexParser} parser The calling parser.\n * @param {StackItem} begin The opening stackitem.\n * @param {boolean} numbered True if environment is numbered.\n * @param {boolean} taggable True if taggable.\n * @param {string} align Alignment string.\n * @param {string} spacing Spacing between columns.\n */\nBaseMethods.EqnArray = function(parser: TexParser, begin: StackItem,\n                                numbered: boolean, taggable: boolean,\n                                align: string, spacing: string) {\n  // @test The Lorenz Equations, Maxwell's Equations, Cubic Binomial\n  parser.Push(begin);\n  if (taggable) {\n    ParseUtil.checkEqnEnv(parser);\n  }\n  align = align.replace(/[^clr]/g, '').split('').join(' ');\n  align = align.replace(/l/g, 'left').replace(/r/g, 'right').replace(/c/g, 'center');\n  let newItem = parser.itemFactory.create('eqnarray', begin.getName(),\n                                          numbered, taggable, parser.stack.global) as sitem.ArrayItem;\n  newItem.arraydef = {\n    displaystyle: true,\n    columnalign: align,\n    columnspacing: (spacing || '1em'),\n    rowspacing: '3pt',\n    side: parser.options['tagSide'],\n    minlabelspacing: parser.options['tagIndent']\n  };\n  return newItem;\n};\n\n\n/**\n * Handles no tag commands.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n */\nBaseMethods.HandleNoTag = function(parser: TexParser, _name: string) {\n  parser.tags.notag();\n};\n\n\n/**\n * Record a label name for a tag\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n */\nBaseMethods.HandleLabel = function(parser: TexParser, name: string) {\n  // @test Label, Label Empty\n  let label = parser.GetArgument(name);\n  if (label === '') {\n    // @test Label Empty\n    return;\n  }\n  if (!parser.tags.refUpdate) {\n    // @test Label, Ref, Ref Unknown\n    if (parser.tags.label) {\n      // @test Double Label Error\n      throw new TexError('MultipleCommand', 'Multiple %1', parser.currentCS);\n    }\n    parser.tags.label = label;\n    if ((parser.tags.allLabels[label] || parser.tags.labels[label]) && !parser.options['ignoreDuplicateLabels']) {\n      // @ Duplicate Label Error\n      throw new TexError('MultipleLabel', 'Label \\'%1\\' multiply defined', label);\n    }\n    // TODO: This should be set in the tags structure!\n    parser.tags.labels[label] = new Label(); // will be replaced by tag value later\n  }\n};\n\n\n/**\n * Handle a label reference.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n * @param {boolean} eqref True if formatted as eqref.\n */\nBaseMethods.HandleRef = function(parser: TexParser, name: string, eqref: boolean) {\n  // @test Ref, Ref Unknown, Eqref, Ref Default, Ref Named\n  let label = parser.GetArgument(name);\n  let ref = parser.tags.allLabels[label] || parser.tags.labels[label];\n  if (!ref) {\n    // @test Ref Unknown\n    if (!parser.tags.refUpdate) {\n      parser.tags.redo = true;\n    }\n    ref = new Label();\n  }\n  let tag = ref.tag;\n  if (eqref) {\n    // @test Eqref\n    tag = parser.tags.formatTag(tag);\n  }\n  let node = parser.create('node', 'mrow', ParseUtil.internalMath(parser, tag), {\n    href: parser.tags.formatUrl(ref.id, parser.options.baseURL), 'class': 'MathJax_ref'\n  });\n  parser.Push(node);\n};\n\n\n\n/**\n * Macros\n */\nBaseMethods.Macro = function(parser: TexParser, name: string,\n                             macro: string, argcount: number,\n                             def?: string) {\n  if (argcount) {\n    const args: string[] = [];\n    if (def != null) {\n      const optional = parser.GetBrackets(name);\n      args.push(optional == null ? def : optional);\n    }\n    for (let i = args.length; i < argcount; i++) {\n      args.push(parser.GetArgument(name));\n    }\n    macro = ParseUtil.substituteArgs(parser, args, macro);\n  }\n  parser.string = ParseUtil.addArgs(parser, macro, parser.string.slice(parser.i));\n  parser.i = 0;\n  ParseUtil.checkMaxMacros(parser);\n};\n\n\n/**\n * Handle MathChoice for elements whose exact size/style properties can only be\n * determined after the expression has been parsed.\n * @param {TexParser} parser The calling parser.\n * @param {string} name The macro name.\n */\nBaseMethods.MathChoice = function(parser: TexParser, name: string) {\n  const D  = parser.ParseArg(name);\n  const T  = parser.ParseArg(name);\n  const S  = parser.ParseArg(name);\n  const SS = parser.ParseArg(name);\n  parser.Push(parser.create('node', 'MathChoice', [D, T, S, SS]));\n};\n\n\nexport default BaseMethods;\n","/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Utility functions for handling dimensions (lengths)\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\n/**\n *  A very large number\n */\nexport const BIGDIMEN = 1000000;\n\n/**\n *  Sizes of various units in pixels\n */\nexport const UNITS: {[unit: string]: number} = {\n  px: 1,\n  'in': 96,            // 96 px to an inch\n  cm: 96 / 2.54,       // 2.54 cm to an inch\n  mm: 96 / 25.4        // 10 mm to a cm\n};\n\n/**\n *  Sizes of various relative units in em's\n */\nexport const RELUNITS: {[unit: string]: number} = {\n  em: 1,\n  ex: .431,        // this.TEX.x_height;\n  pt: 1 / 10,      // 10 pt to an em\n  pc: 12 / 10,     // 12 pc to a pt\n  mu: 1 / 18       // 18mu to an em for the scriptlevel\n};\n\n/**\n *  The various named spaces\n */\nexport const MATHSPACE: {[name: string]: number} = {\n  /* tslint:disable:whitespace */\n  veryverythinmathspace:           1/18,\n  verythinmathspace:               2/18,\n  thinmathspace:                   3/18,\n  mediummathspace:                 4/18,\n  thickmathspace:                  5/18,\n  verythickmathspace:              6/18,\n  veryverythickmathspace:          7/18,\n  negativeveryverythinmathspace:  -1/18,\n  negativeverythinmathspace:      -2/18,\n  negativethinmathspace:          -3/18,\n  negativemediummathspace:        -4/18,\n  negativethickmathspace:         -5/18,\n  negativeverythickmathspace:     -6/18,\n  negativeveryverythickmathspace: -7/18,\n  /* tslint:enable */\n\n  thin:   .04,\n  medium: .06,\n  thick:  .1,\n\n  normal:  1,\n  big:     2,\n  small:   1 / Math.sqrt(2),\n\n  infinity:  BIGDIMEN\n};\n\n\n/**\n * @param {string|number} length  A dimension (giving number and units) to be converted to ems\n * @param {number} size           The default size of the dimension (for percentage values)\n * @param {number} scale          The current scaling factor (to handle absolute units)\n * @param {number} em             The size of an em in pixels\n * @return {number}               The dimension converted to ems\n */\nexport function length2em(length: string | number, size: number = 0, scale: number = 1, em: number = 16): number {\n  if (typeof length !== 'string') {\n    length = String(length);\n  }\n  if (length === '' || length == null) {\n    return size;\n  }\n  if (MATHSPACE[length]) {\n    return MATHSPACE[length];\n  }\n  let match = length.match(/^\\s*([-+]?(?:\\.\\d+|\\d+(?:\\.\\d*)?))?(pt|em|ex|mu|px|pc|in|mm|cm|%)?/);\n  if (!match) {\n    return size;\n  }\n  let m = parseFloat(match[1] || '1'), unit = match[2];\n  if (UNITS.hasOwnProperty(unit)) {\n    return m * UNITS[unit] / em / scale;\n  }\n  if (RELUNITS.hasOwnProperty(unit)) {\n    return m * RELUNITS[unit];\n  }\n  if (unit === '%') {\n    return m / 100 * size;  // percentage of the size\n  }\n  return m * size;            // relative to size\n}\n\n/**\n * @param {number} m  A number to be shown as a percent\n * @return {string}   The number m as a percent\n */\nexport function percent(m: number): string {\n  return (100 * m).toFixed(1).replace(/\\.?0+$/, '') + '%';\n}\n\n/**\n * @param {number} m  A number to be shown in ems\n * @return {string}   The number with units of ems\n */\nexport function em(m: number): string {\n  if (Math.abs(m) < .001) return '0';\n  return (m.toFixed(3).replace(/\\.?0+$/, '')) + 'em';\n}\n\n/**\n * @param {number} m   A number to be shown in ems, but rounded to pixel boundaries\n * @param {number} em  The number of pixels in an em\n * @return {string}    The number with units of em\n */\nexport function emRounded(m: number, em: number = 16): string {\n  m = (Math.round(m * em) + .05) / em;\n  if (Math.abs(m) < .001) return '0em';\n  return m.toFixed(3).replace(/\\.?0+$/, '') + 'em';\n}\n\n\n/**\n * @param {number} m   A number of em's to be shown as pixels\n * @param {number} M   The minimum number of pixels to allow\n * @param {number} em  The number of pixels in an em\n * @return {string}    The number with units of px\n */\nexport function px(m: number, M: number = -BIGDIMEN, em: number = 16): string {\n  m *= em;\n  if (M && m < M) m = M;\n  if (Math.abs(m) < .1) return '0';\n  return m.toFixed(1).replace(/\\.0$/, '') + 'px';\n}\n"],"names":["nodes","defaultKind","nodeMap","Map","node","this","constructor","defaultNodes","Object","keys","kind","setNodeClass","create","args","nodeClass","set","THIS","KIND","get","getNodeClass","deleteNodeClass","delete","nodeIsKind","getKinds","Array","from","AbstractFactory","mmlFactory","factory","NodeFactory","createNode","createToken","createText","createError","children","def","text","setChildren","appendChild","setProperties","textNode","setText","message","mtext","setMmlFactory","func","setCreators","maps","rest","slice","configuration","addNode","ParseMethods","variable","parser","c","getFontDef","env","stack","multiLetterIdentifiers","font","string","substr","i","match","length","mathvariant","TexConstant","Variant","NORMAL","noAutoOP","autoOP","Push","digit","mml","pattern","options","n","replace","controlSequence","_c","name","GetCS","parse","mathchar0mi","mchar","attributes","ITALIC","char","mathchar0mo","setProperty","mathchar7","delimiter","delim","assign","fence","stretchy","environment","end","itemFactory","packageData","parsers","root","nodeLists","error","handlers","nodeFactory","items","defaultOptions","pushParser","unshift","popParser","shift","clear","tags","resetTag","property","list","push","inlists","getProperty","lists","split","concat","join","getList","result","inTree","removeFromList","indexOf","splice","parent","_nodes","Pop","pop","Size","Peek","Clear","toMml","inferred","forceRow","First","MmlStack","global","_properties","isOpen","_env","value","key","isKind","checkItem","item","BaseItem","fail","getName","isClose","getErrors","id","isFinal","success","clearEnv","toString","errors","close","right","middle","DefaultStackItems","DummyItem","prototype","StackItemFactory","BOLD","BOLDITALIC","DOUBLESTRUCK","FRAKTUR","BOLDFRAKTUR","SCRIPT","BOLDSCRIPT","SANSSERIF","BOLDSANSSERIF","SANSSERIFITALIC","SANSSERIFBOLDITALIC","MONOSPACE","INITIAL","TAILED","LOOPED","STRETCHED","CALLIGRAPHIC","BOLDCALLIGRAPHIC","OLDSTYLE","BOLDOLDSTYLE","MATHITALIC","Form","PREFIX","INFIX","POSTFIX","LineBreak","AUTO","NEWLINE","NOBREAK","GOODBREAK","BADBREAK","LineBreakStyle","BEFORE","AFTER","DUPLICATE","INFIXLINBREAKSTYLE","IndentAlign","LEFT","CENTER","RIGHT","ID","INDENTALIGN","IndentShift","INDENTSHIFT","LineThickness","THIN","MEDIUM","THICK","Notation","LONGDIV","ACTUARIAL","PHASORANGLE","RADICAL","BOX","ROUNDEDBOX","CIRCLE","TOP","BOTTOM","UPDIAGONALSTRIKE","DOWNDIAGONALSTRIKE","VERTICALSTRIKE","HORIZONTALSTRIKE","NORTHEASTARROW","MADRUWB","UPDIAGONALARROW","Align","BASELINE","AXIS","Lines","NONE","SOLID","DASHED","Side","LEFTOVERLAP","RIGHTOVERLAP","Width","FIT","Actiontype","TOGGLE","STATUSLINE","TOOLTIP","INPUT","Overflow","LINBREAK","SCROLL","ELIDE","TRUNCATE","SCALE","Unit","EM","EX","PX","IN","CM","MM","PT","PC","Other","remap","MapHandler","getMap","lookup","range","getRange","type","mo","CharacterMap","AbstractTags","BaseTags","BaseConfiguration","Configuration","handler","character","macro","fallback","_parser","bitem","StartItem","StopItem","OpenItem","CloseItem","PrimeItem","SubsupItem","OverItem","LeftItem","Middle","RightItem","BeginItem","EndItem","StyleItem","PositionItem","CellItem","MmlItem","FnItem","NotItem","NonscriptItem","DotsItem","ArrayItem","EqnArrayItem","EquationItem","maxMacros","baseURL","document","getElementsByTagName","String","location","base","postprocessors","data","childNodes","childIndex","mstyle","replaceChild","isInner","finalize","top0","top1","isType","setChild","sup","top","position","setAttribute","fixedFence","fenced","mathcolor","texClass","TEXCLASS","CLOSE","OPEN","color","height","depth","voffset","isEmbellished","getCoreMO","form","getForm","entities","ApplyFunction","apply","arguments","getText","getChildren","contains","appendChildren","mtextNode","paddedNode","width","REL","notParent","mrow","dots","tclass","getTexClass","BIN","table","row","frame","hfill","arraydef","dashed","EndEntry","EndRow","EndTable","newItem","createMml","scriptlevel","notation","mtd","getAttribute","checkLines","lines","rows","addRowSpacing","spacing","dimem","dimen2em","rowspacing","Em","Math","max","maxrow","start","fixInitialMO","mtr","tag","getTag","clearTag","extendArray","repeat","columns","enTag","sm","RegExpMap","MacroMap","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigma","tau","upsilon","phi","chi","psi","omega","varepsilon","vartheta","varpi","varrho","varsigma","varphi","S","aleph","hbar","variantForm","imath","jmath","ell","wp","Re","Im","partial","infty","prime","emptyset","nabla","bot","angle","triangle","backslash","forall","exists","neg","lnot","flat","natural","sharp","clubsuit","diamondsuit","heartsuit","spadesuit","surd","coprod","OP","movesupsub","bigvee","bigwedge","biguplus","bigcap","bigcup","intop","movablelimits","iint","iiint","prod","sum","bigotimes","bigoplus","bigodot","oint","bigsqcup","smallint","largeop","triangleleft","triangleright","bigtriangleup","bigtriangledown","wedge","land","vee","lor","cap","cup","ddagger","dagger","sqcap","sqcup","uplus","amalg","diamond","bullet","wr","div","divsymbol","odot","oslash","otimes","ominus","oplus","mp","pm","circ","bigcirc","setminus","cdot","ast","times","star","propto","sqsubseteq","sqsupseteq","parallel","mid","dashv","vdash","leq","le","geq","ge","lt","gt","succ","prec","approx","succeq","preceq","supset","subset","supseteq","subseteq","ni","notin","owns","gg","ll","sim","simeq","perp","equiv","asymp","smile","frown","ne","neq","cong","doteq","bowtie","models","notChar","Leftrightarrow","Leftarrow","Rightarrow","leftrightarrow","leftarrow","gets","rightarrow","to","accent","mapsto","leftharpoonup","leftharpoondown","rightharpoonup","rightharpoondown","nearrow","searrow","nwarrow","swarrow","rightleftharpoons","hookrightarrow","hookleftarrow","longleftarrow","Longleftarrow","longrightarrow","Longrightarrow","Longleftrightarrow","longleftrightarrow","longmapsto","ldots","cdots","vdots","ddots","dotsc","dotsb","dotsm","dotsi","dotso","ldotp","PUNCT","cdotp","colon","Gamma","Delta","Theta","Lambda","Xi","Pi","Sigma","Upsilon","Phi","Psi","Omega","And","DelimiterMap","ORD","CommandMap","displaystyle","textstyle","scriptstyle","scriptscriptstyle","rm","mit","oldstyle","cal","it","bf","bbFont","scr","frak","sf","tt","mathrm","mathup","mathnormal","mathbf","mathbfup","mathit","mathbfit","mathbb","Bbb","mathfrak","mathbffrak","mathscr","mathbfscr","mathsf","mathsfup","mathbfsf","mathbfsfup","mathsfit","mathbfsfit","mathtt","mathcal","mathbfcal","symrm","symup","symnormal","symbf","symbfup","symit","symbfit","symbb","symfrak","symbffrak","symscr","symbfscr","symsf","symsfup","symbfsf","symbfsfup","symsfit","symbfsfit","symtt","symcal","symbfcal","textrm","textup","textnormal","textit","textbf","textsf","texttt","tiny","Tiny","scriptsize","small","normalsize","large","Large","LARGE","huge","Huge","arcsin","arccos","arctan","arg","cos","cosh","cot","coth","csc","deg","det","dim","exp","gcd","hom","inf","ker","lg","lim","liminf","limsup","ln","log","min","Pr","sec","sin","sinh","tan","tanh","limits","nolimits","overline","underline","overbrace","underbrace","overparen","underparen","overrightarrow","underrightarrow","overleftarrow","underleftarrow","overleftrightarrow","underleftrightarrow","overset","underset","overunderset","stackrel","stackbin","over","overwithdelims","atop","atopwithdelims","above","abovewithdelims","brace","brack","choose","frac","sqrt","uproot","leftroot","left","llap","rlap","raise","lower","moveleft","moveright","MATHSPACE","thinmathspace","mediummathspace","thickmathspace","negativethinmathspace","enspace","quad","qquad","thinspace","negthinspace","hskip","hspace","kern","mskip","mspace","mkern","rule","Rule","Space","nonscript","big","Big","bigg","Bigg","bigl","Bigl","biggl","Biggl","bigr","Bigr","biggr","Biggr","bigm","Bigm","biggm","Biggm","mathord","mathop","mathopen","mathclose","mathbin","mathrel","mathpunct","mathinner","INNER","vcenter","VCENTER","buildrel","hbox","mbox","fbox","boxed","framebox","strut","mathstrut","phantom","vphantom","hphantom","smash","acute","grave","ddot","tilde","bar","breve","check","hat","vec","dot","widetilde","widehat","matrix","array","pmatrix","cases","eqalign","em","displaylines","cr","newline","hline","hdashline","eqalignno","leqalignno","hfil","hfilll","bmod","pmod","mod","pod","iff","skew","pmb","TeX","LaTeX","not","space","begin","label","ref","nonumber","mathchoice","mmlToken","EnvironmentMap","equation","eqnarray","cols","BaseMethods","MmlTokenAllow","fontfamily","fontsize","fontweight","fontstyle","background","href","style","parseRoot","inRoot","newParser","Open","Close","Tilde","nbsp","Superscript","primes","GetNext","Top","Prev","getChildAt","Subscript","sub","under","Prime","rsquo","Comment","charAt","Hash","MathFont","variant","GetArgument","SetFont","_name","SetStyle","texStyle","level","SetSize","size","mathsize","Spacer","LeftRight","first","GetDelimiter","NamedFn","NamedOp","Limits","op","currentCS","copyChildren","Last","Over","open","GetDimen","Frac","num","ParseArg","den","Sqrt","GetBrackets","Root","GetUpTo","MoveRoot","parseInt","Accent","mathaccent","entity","createEntity","muoNode","texAtom","UnderOver","pos","underOver","Overset","checkMovableLimits","Underset","accentunder","Overunderset","TeXAtom","mclass","parsed","MmlToken","attr","keep","e","isToken","hasDefault","MmlFilterAttribute","toLowerCase","Strut","padded","Phantom","v","h","box","atom","Smash","bt","trimSpaces","Lap","RaiseLower","move","MoveLeftRight","nh","tmp","Hskip","Nonscript","w","mathbackground","MakeBig","sizeStr","minsize","maxsize","symmetric","BuildRel","ParseUpTo","HBox","PushAll","internalMath","FBox","internal","FrameBox","l","r","Not","Dots","ldotsEntity","cdotsEntity","Matrix","align","vspacing","numbered","columnspacing","side","columnalign","Entry","isEntry","str","braces","m","RegExp","Cr","isCR","CrLaTeX","nobrackets","matchDimen","unit","linebreak","sitem","HLine","HFill","BeginEnd","checkMaxMacros","raggedHeight","columnlines","convertDelimiter","AlignedArray","setArrayAlign","Equation","checkEqnEnv","EqnArray","taggable","minlabelspacing","HandleNoTag","notag","HandleLabel","refUpdate","allLabels","labels","Label","HandleRef","eqref","redo","formatTag","formatUrl","Macro","argcount","optional","substituteArgs","addArgs","MathChoice","D","T","SS","BIGDIMEN","UNITS","px","cm","mm","RELUNITS","ex","pt","pc","veryverythinmathspace","verythinmathspace","verythickmathspace","veryverythickmathspace","negativeveryverythinmathspace","negativeverythinmathspace","negativemediummathspace","negativethickmathspace","negativeverythickmathspace","negativeveryverythickmathspace","thin","medium","thick","normal","infinity","scale","parseFloat","hasOwnProperty","toFixed","abs","round","M"],"sourceRoot":""}