{"version":3,"file":"3921.nbdime.js","mappings":"8pBAuBA,IA6DA,2B,8CAA0E,QAA/B,OAA+B,EAA1E,CA7DA,SA6D2CA,sBAU3C,aA4BE,WAAYC,EAA8BC,QAAA,IAAAA,IAAAA,EAAA,GAPnC,KAAAC,cAAwEC,EAQ7EC,KAAKJ,QAAUA,EACfI,KAAKH,SAAWA,CAClB,CAuBF,OAlBE,sBAAW,mBAAI,C,IAAf,WACE,OAAQG,KAAKC,YAAuCC,IACtD,E,gCAKO,YAAAC,gBAAP,SAAuBC,GACrB,OAAO,CACT,EAKO,YAAAC,OAAP,SAAcC,EAAeC,GAC3B,OAAO,IAAIP,KAAKF,cAAcQ,EAAUN,KAAKJ,QAASW,EACxD,EA/Cc,EAAAL,KAAe,UAiD/B,C,CAtDA,GAAsB,EAAAM,gBAAAA,C,6FCnEtB,eACA,WA8FA,aAyCE,WAAYD,QAAA,IAAAA,IAAAA,EAAA,IAXL,KAAAX,QAA+B,KAI/B,KAAAa,WAAyB,KAQ9B,IAAIC,EAAQV,KAAKC,YACjBD,KAAKO,SAAU,IAAAI,cAAY,IAAAC,gBAAe,CAAC,EAAGF,EAAMG,SAAUN,GAC9DP,KAAKc,WAAa,IAAI,EAAAC,aACtBf,KAAKgB,YAAc,IAAI,EAAAD,YACzB,CAyEF,OApEE,sBAAW,mBAAI,C,IAAf,WACE,OAAQf,KAAKC,YAAwCC,IACvD,E,gCAKO,YAAAe,WAAP,SAAkBrB,GAChBI,KAAKJ,QAAUA,CACjB,EAKO,YAAAsB,cAAP,SAAqBT,GACnBT,KAAKS,WAAaA,CACpB,EAKO,YAAAU,WAAP,WACA,EAKO,YAAAC,MAAP,W,IAAa,qDACb,EAKA,sBAAW,6BAAc,C,IAAzB,WACE,OAAO,CACT,E,gCAKO,YAAAC,SAAP,SAAgBC,EAAqBC,GACnC,MAAO,EACT,EAiBU,YAAAC,eAAV,SACEC,EAAuBC,EACvBpB,EAAiCqB,GAEjC,IAAIC,EAAO,CAACF,KAAMA,EAAMpB,SAAUA,EAAUqB,KAAMA,GAElD,OADAF,EAAQI,QAAQD,GACTA,EAAKD,IACd,EAhHc,EAAAzB,KAAe,UAKf,EAAAW,QAAsB,CAAC,EA6GvC,C,CAvHA,GAAsB,EAAAiB,iBAAAA,C,87CCnGtB,eACA,WACA,WACA,WACA,WAEA,UAEA,WA2EA,2B,8CA4HA,QA5HyC,OAQzB,EAAAzB,OAAd,SAA8B0B,G,QACtBC,EAAO,IAAIhC,K,IACjB,IAAiB,QAAAiC,OAAOC,KAAKH,IAAQ,8BAAE,CAAlC,IAAMI,EAAE,QACL,IAAqBnC,KAAKoC,OAAgBD,EAAIJ,EAAQI,IAAI,GAAzDC,EAAM,KAAEvC,EAAQ,KACnBA,GACFmC,EAAKK,IAAID,EAAQvC,E,mGAGrB,OAAOmC,CACT,EAUc,EAAAI,OAAd,SAA8BD,EAAYC,G,YACpCE,EAAWC,EACXC,GAAU,EACV3C,EAAWuC,EAAO,GACtB,GAAsB,IAAlBA,EAAOK,QAAqC,kBAAdL,EAAO,GACrB,IAAlBA,EAAOK,SAAiBD,EAAUJ,EAAO,IACxCE,GAAD,IAA0BtC,KAAK0C,cAAcP,GAAG,IAAtC,GAAEI,EAAU,UACjB,GAAyB,iBAAdH,EAAO,GACvB,GAAyB,iBAAdA,EAAO,GAAiB,CACf,IAAlBA,EAAOK,SAAiBD,EAAUJ,EAAO,IACnC,QAAqBA,EAAOO,MAAM,GAAsB,GAAvDC,EAAO,KAAEC,EAAO,KACtBP,GAAD,IAA0BtC,KAAK0C,cAAcE,EAASC,GAAQ,IAApD,GAAEN,EAAU,I,MAEJ,IAAlBH,EAAOK,SAAiBD,EAAUJ,EAAO,IACxCE,GAAD,IAA0BtC,KAAK0C,cAAcN,EAAO,IAAa,IAAvD,GAAEG,EAAU,UAGN,IAAlBH,EAAOK,SAAiBD,EAAUJ,EAAO,IACxCE,GAAD,IAA0BF,EAAOO,MAAM,GAA+C,IAA5E,GAAEJ,EAAU,KAExB,MAAO,CAAC,CAACJ,GAAE,EAAEG,UAAS,EAAEC,WAAU,EAAEC,QAAO,GAA0B3C,EACvE,EASiB,EAAA6C,cAAjB,SAA+BE,EAAiBC,GAC9C,YAD8C,IAAAA,IAAAA,EAAA,GACvC,CACL,SAACvC,GAAmD,OAAhCsC,GAAWtC,EAASsC,MAAmB,CAAO,EAClE,SAAClB,EAAWpB,GAAuD,OAApCuC,GAAWnB,EAAKmB,GAASvC,IAAkB,CAAO,EAErF,EAQO,YAAAgC,UAAP,SAAiBhC,EAAiCwC,G,aAAA,IAAAA,IAAAA,EAAgB,EAAAC,MAAMC,a,IACtE,IAAmB,QAAAhD,KAAKiD,OAAK,8BAAE,CAA1B,IAAMC,EAAI,QACb,GAAIA,EAAKrD,UAAYiD,GACfI,EAAKA,KAAKZ,UAAUhC,GAAW,M,mGAGzC,EASO,YAAAiC,WAAP,SAAkBb,EAAyBpB,EAAiCwC,G,aAAA,IAAAA,IAAAA,EAAgB,EAAAC,MAAMC,a,IAChG,IAAmB,QAAAhD,KAAKiD,OAAK,8BAAE,CAA1B,IAAMC,EAAI,QACb,GAAIA,EAAKrD,UAAYiD,GACfI,EAAKA,KAAKX,WAAWb,EAAMpB,GAAW,M,mGAGhD,EASO,YAAA6C,cAAP,SAAqBzB,EAAyBpB,EAAiC8C,G,aAAA,IAAAA,IAAAA,EAAc,EAAAL,MAAMM,M,IACjG,IAAmB,QAAArD,KAAKiD,OAAK,8BAAE,CAA1B,IAAMC,EAAI,QACb,GAAIA,EAAKrD,SAAWuD,EAAK,OACzB,GAAIF,EAAKA,KAAKV,SACRU,EAAKA,KAAKX,WAAWb,EAAMpB,GAAW,M,mGAGhD,EAQO,YAAAgD,OAAP,SAAcnB,G,YACZ,IAAmB,QAAAnC,KAAKiD,OAAK,8BAAE,CAA1B,IAAMC,EAAI,QACb,GAAIA,EAAKA,KAAKf,KAAOA,EACnB,OAAOe,EAAKA,I,mGAGhB,OAAO,IACT,EAEF,EA5HA,CAzEA,SAyEyCK,iBAA5B,EAAAC,WAAAA,EAqJA,EAAAC,aAA0B,CACrCC,KAAK,EACLC,WAAW,EACXC,SAAU,KACVC,UAAW,MAMA,EAAAC,gBAA6B,CACxCJ,KAAK,EACLC,WAAW,EACXC,SAAU,GACVC,UAAW,IA+Nb,+B,8CAOA,QAPuC,OAI9B,YAAAE,QAAP,SAAeC,GACb,OAAO,IACT,EACF,EAPA,CAAuC,EAAAlC,kBAgBvC,2B,8CAaA,QAbwC,OAI/B,YAAAmC,QAAP,SAAeD,EAA0B5D,GACvC,YADuC,IAAAA,IAAAA,EAAA,MAChC,IACT,EAIO,YAAA8D,QAAP,SAAeF,EAA0B5D,GACvC,OAAO,IACT,EACF,EAbA,CAAwC,EAAA+D,mBAsBxC,2B,8CAAkE,QAA3B,OAA2B,EAAlE,CAAuC,EAAAC,kBASvC,2B,8CAAkE,QAA3B,OAA2B,EAAlE,CAAuC,EAAAC,kBAUvC,aAuFE,WAAa/D,EAAaV,EAA8BW,GAAxD,WACMG,EAAQV,KAAKC,YACjBD,KAAKM,SAAWA,EAChBN,KAAKO,SAAU,IAAAI,cAAY,IAAAC,gBAAe,CAAC,EAAGF,EAAMG,SAAUN,GAC9DP,KAAK0B,KAAO,IAAK1B,KAAKO,QAAkB,UAAK+D,GAC7CtE,KAAKuE,cAAgBf,EAAWnD,OAAgBL,KAAKO,QAAuB,eAC5EP,KAAK2D,UAAY,IAAIhE,EAAqB6E,YAC1CxE,KAAK6D,UAAY7D,KAAKO,QAAmB,WAAK,IAAIkE,EAClD,IAAIb,EAAW5D,KAAKO,QAAkB,UAAK,CAAC,IAAImE,GAC3CC,MAAMC,QAAQhB,KACjBA,EAAW,CAACA,IAEd5D,KAAK4D,SAAWA,EAIhB5D,KAAKJ,QAAUA,EACfI,KAAK6D,UAAU5C,WAAWrB,GAC1BI,KAAK4D,SAASiB,KAAI,SAAAC,GAAO,OAAAA,EAAI7D,WAAWrB,EAAf,IAIzBI,KAAKS,WAAaT,KAAKO,QAAoB,YAAK,IAAI,EAAAwE,WACpD/E,KAAK4D,SAASiB,KAAI,SAAAC,GAAO,OAAAA,EAAI5D,cAAc,EAAKT,WAAvB,IAIzBT,KAAK6D,UAAU1C,aACfnB,KAAK4D,SAASiB,KAAI,SAAAC,GAAO,OAAAA,EAAI3D,YAAJ,GAC3B,CAqTF,OAhTE,sBAAW,mBAAI,C,IAAf,WACE,OAAQnB,KAAKC,YAA4C+E,IAC3D,E,gCAKO,YAAAC,gBAAP,SAAuB9C,G,IAAY,wDAC3B,QAAUqB,EAAWpB,OAAgBD,EAAIC,GAAgC,GAAxE8C,EAAE,KAAEC,EAAC,KACZnF,KAAKuE,cAAclC,IAAI6C,EAAIC,EAC7B,EAKO,YAAAC,mBAAP,SAA0BjD,GACxB,IAAMC,EAASpC,KAAKuE,cAAcjB,OAAOnB,GACrCC,GACFpC,KAAKuE,cAAcc,OAAOjD,EAE9B,EAKO,YAAAkD,OAAP,WAEE,OADAtF,KAAKuE,cAAcjC,UAAUtC,MACtBA,IACT,EAKO,YAAAuF,SAAP,SAAgBzC,GAGd,YAHc,IAAAA,IAAAA,EAAgB,EAAAC,MAAMyC,UACpCxF,KAAKyF,MAAM3C,EAAQ,GACnB9C,KAAKsF,SACEtF,IACT,EAKO,YAAAwC,QAAP,SAAed,EAAcnB,QAAA,IAAAA,IAAAA,EAAA,IACvB,OAA2E,IAAAI,aAAY,CACzF+E,OAAQ1F,KAAK4D,SAAS,GAAG+B,KAAMC,SAAS,EAAMxC,IAAK,EAAAL,MAAMM,KACzDwC,GAAI,GAAIC,GAAI,EAAGC,eAAgB,KAAMC,UAAW,IAASC,MAAO,EAAGC,OAAQ,IAC1E3F,GAHEmF,EAAM,SAAEE,EAAO,UAAExC,EAAG,MAAE0C,EAAE,KAAED,EAAE,KAAEE,EAAc,iBAAEC,EAAS,YAAEC,EAAK,QAAEC,EAAM,SAIpD,OAAnBH,IACFA,EAAiB,GAAKD,GAExB,IAAMhB,EAAM9E,KAAK4D,SAASuC,QAAO,SAACrB,EAAKsB,GAAS,OAACA,EAAKT,OAASD,EAASU,EAAOtB,CAA/B,GAAqC,MAC/EuB,EAAQ,IAAIrG,KAAKO,QAAQ+F,SAAS5E,EAAMoD,EAAKc,GAUnD,OATAS,EAAMvD,MAAMyD,KAAOvG,KAAKJ,QAAQ4G,KAAKxG,KAAKM,UAC1C+F,EAAMI,WAAWZ,EAAIC,EAAIC,EAAgBC,EAAWC,GAChDjG,KAAK6D,UAAUtD,QAAQmG,mBACzBL,EAAMM,WAAWC,YAAcV,GAE7BlG,KAAK6D,UAAUtD,QAAQsG,oBACzBR,EAAMM,WAAWG,aAAeZ,GAElCG,EAAM7D,QAAQxC,KAAMoD,GACZiD,EAAMU,aAAeV,EAAMW,IACrC,EAKO,YAAA3F,SAAP,SAAgBE,GAEd,YAFc,IAAAA,IAAAA,EAAA,MACdvB,KAAK2D,UAAUsD,IAAI,YACZjH,IACT,EAKO,YAAA+D,QAAP,W,YACE,IAAK/D,KAAK2D,UAAUuD,MAAM,WAAY,CAIpC,IAAMC,EAAY,G,IAClB,IAAmB,QAAAnH,KAAK0B,MAAI,8BAAE,CAAzB,IAAMA,EAAI,QACb1B,KAAKoH,YAAY1F,QACgB2F,IAA7B3F,EAAK4F,UAAUH,WACjBA,EAAUI,KAAK7F,E,uGAOnB,IAAmB,QAAAyF,GAAS,8BAAE,CAAzB,IACGxF,GADGD,EAAI,SACK4F,UAAUH,UAC5BzF,EAAK+D,MAAM9D,EAAK8D,OAChB/D,EAAK4F,UAAUH,UAAYxF,EAC3B3B,KAAKoH,YAAY1F,E,mGAEnB1B,KAAK2D,UAAUsD,IAAI,U,CAErB,OAAOjH,IACT,EAKU,YAAAoH,YAAV,SAAsB1F,GACpB,IACEA,EAAKqC,QAAQ/D,K,CACb,MAAOwH,GACP,GAAIA,EAAIC,OAASD,EAAIE,QACnB,MAAMF,EAERxH,KAAKO,QAAsB,aAAEP,KAAM0B,EAAM8F,GACzC9F,EAAK4F,UAAiB,MAAIE,C,CAE9B,EAQO,YAAAG,aAAP,SAAoBjG,EAAyB8F,GAC3C9F,EAAKsF,KAAOhH,KAAKS,WAAWJ,OAAO,OAAQ,KAAM,CAC/CL,KAAKS,WAAWJ,OAAO,SAAU,CAAC,iBAAkBmH,EAAII,QAASC,MAAOL,EAAII,SAAU,CACpF5H,KAAKS,WAAWJ,OAAO,QAAS,KAAM,CACnCL,KAAKS,WAAWJ,OAAO,QAAqByH,QAAQ,0BAIvDpG,EAAKkE,SACPlE,EAAKsF,KAAKe,WAAWd,IAAI,UAAW,SAEtCvF,EAAK4F,UAAUU,MAAQR,EAAII,OAC7B,EAKO,YAAA3D,QAAP,W,QACE,IAAKjE,KAAK2D,UAAUuD,MAAM,WAAY,C,IACpC,IAAmB,QAAAlH,KAAK0B,MAAI,8BAAE,CAAzB,IAAMA,EAAI,QACb,IACEA,EAAKuC,QAAQjE,K,CACb,MAAOwH,GACP,GAAIA,EAAIC,OAASD,EAAIE,QACnB,MAAMF,EAERxH,KAAKO,QAAsB,aAAEP,KAAM0B,EAAM8F,GACzC9F,EAAKiF,WAAkB,MAAIa,C,oGAG/BxH,KAAK2D,UAAUsD,IAAI,U,CAErB,OAAOjH,IACT,EAQO,YAAAiI,aAAP,SAAoBvG,EAAyB8F,GAC3C9F,EAAKqF,YAAc/G,KAAKJ,QAAQ2G,KAAK,gBAAiB,CACpD2B,MAAO,2BACPpD,IAAK9E,KAAK6D,UAAU8B,MACnB,CACD3F,KAAKJ,QAAQ2G,KAAK,OAAQ,CACxB,iBAAkBiB,EAAII,QACtBC,MAAOL,EAAII,QACXO,MAAO,CACLC,MAAO,MACP,mBAAoB,SACpB,cAAe,WAEhB,CACDpI,KAAKJ,QAAQyI,KAAK,yBAGlB3G,EAAKkE,SACP5F,KAAKJ,QAAQ0I,cAAc5G,EAAKqF,YAAa,CAC3CoB,MAAO,CACLvC,QAAS,QACT2C,OAAQ,QACR,aAAc,YAIpB7G,EAAKiF,WAAWqB,MAAQR,EAAII,OAC9B,EAKO,YAAAY,WAAP,WAKE,OAJKxI,KAAK2D,UAAUuD,MAAM,gBACxBlH,KAAK6D,UAAU2E,WAAWxI,MAC1BA,KAAK2D,UAAUsD,IAAI,eAEdjH,IACT,EAKO,YAAAyI,eAAP,W,QACE,IAAKzI,KAAK2D,UAAUuD,MAAM,kBAAmB,C,IAC3C,IAAmB,QAAAlH,KAAK0B,KAAKgH,YAAU,8BAAxB,QACRD,eAAezI,K,kGAEtBA,KAAK2D,UAAUsD,IAAI,iB,CAErB,OAAOjH,IACT,EAKO,YAAA2I,mBAAP,SAA0BC,GACxB,YADwB,IAAAA,IAAAA,GAAA,GACjB5I,IACT,EAKO,YAAAyF,MAAP,SAAaA,EAAeoD,G,aAAA,IAAAA,IAAAA,GAAA,G,IAC1B,IAAmB,QAAA7I,KAAK0B,MAAI,8BAAb,QACR+D,MAAMA,EAAOoD,E,kGAYpB,OAVIpD,EAAQ,EAAA1C,MAAM+F,UAChB9I,KAAK2D,UAAUoF,MAAM,kBAEnBtD,EAAQ,EAAA1C,MAAMiG,UAChBhJ,KAAK2D,UAAUoF,MAAM,WACrB/I,KAAK2D,UAAUoF,MAAM,eAEnBtD,EAAQ,EAAA1C,MAAMkG,UAChBjJ,KAAK2D,UAAUoF,MAAM,WAEhB/I,IACT,EAKO,YAAAoB,MAAP,SAAab,G,MAMX,YANW,IAAAA,IAAAA,EAAA,CAAsBoD,WAAW,KAC5CpD,GAAU,IAAAI,aAAYsB,OAAOiH,OAAO,CAAC,EAAG,EAAAzF,cAAelD,IAC/CmD,KAAOzB,OAAOiH,OAAO3I,EAAS,EAAAuD,iBACtCvD,EAAQoD,WAAa3D,KAAK2D,UAAUvC,QACpCb,EAAQqD,UAAY5D,KAAK4D,SAASuF,SAAQ,SAAArE,GAAO,OAAAA,EAAI1D,MAAK,MAAT0D,EAAG,OAAUvE,EAAQqD,WAAQ,GAA7B,IACjDrD,EAAQsD,YAAa,EAAA7D,KAAK6D,WAAUzC,MAAK,eAAIb,EAAQsD,YAAS,IACvD7D,IACT,EAKO,YAAA+I,MAAP,WAGE,OAFA/I,KAAKoB,QACLpB,KAAK0B,KAAKqH,QACH/I,IACT,EAKO,YAAAoJ,OAAP,SAAcpH,GAEZ,OADAhC,KAAK0B,KAAK2H,MAAMrH,GACThC,IACT,EAKO,YAAAsJ,qBAAP,SAA4BC,G,MACpBtG,EAAQjD,KAAKwJ,mBAAmBD,GAEtC,OADA,EAAAvJ,KAAK0B,MAAK2D,OAAM,eAAIpC,IAAK,IAClBA,CACT,EAKO,YAAAuG,mBAAP,SAA0BC,G,YACnB9E,MAAMC,QAAQ6E,KACjBA,EAAW,CAACA,IAEd,IAAM7J,EAAUI,KAAKJ,QACfqD,EAAQ,GACRsG,EAAa3J,EAAQ8J,YAAYD,EAAUzJ,KAAKM,U,IACtDqJ,EACA,IAAmB,QAAA3J,KAAK0B,MAAI,8BAAE,CAAzB,IAAMwB,EAAI,Q,IACb,IAAwB,kBAAAqG,IAAU,8BAAE,CAA/B,IAAMK,EAAS,QAClB,GAAI1G,EAAKJ,MAAMyD,MAAQ3G,EAAQiK,SAASD,EAAW1G,EAAKJ,MAAMyD,MAAO,CACnEtD,EAAMsE,KAAKrE,GACX,SAASyG,C,uMAIf,OAAO1G,CACT,EAlac,EAAA+B,KAAe,eAKf,EAAAnE,QAAsB,CAClCiJ,UAAW,KACXC,SAAU,KACVhF,WAAY,KACZiF,SAAU1F,EACVgC,SAAU2D,EACVtC,aAAc,SAACuC,EAA0CxI,EAA+B8F,GACtF0C,EAAIvC,aAAajG,EAAM8F,EACzB,EACAS,aAAc,SAACiC,EAA0CxI,EAA+B8F,GACtF0C,EAAIjC,aAAavG,EAAM8F,EACzB,EACAjD,eAAe,IAAA4F,YAAW,CACxBC,KAAS,CAAC,EAAArH,MAAMsH,SAAU,WAAY,IAAI,GAC1CtG,QAAS,CAAC,EAAAhB,MAAMkG,UAChBqB,QAAS,CAAC,EAAAvH,MAAMwH,QAAS,aAAc,IAAI,GAC3CtG,QAAS,CAAC,EAAAlB,MAAMiG,SAChBwB,OAAS,CAAC,EAAAzH,MAAM+F,SAAU,kBAAkB,MAOlC,EAAAtE,aAAc,IAAAiG,eAAc,WAAY,UAAW,aAAc,UAAW,kBAuY5F,C,CAzaA,GAAsB,EAAA9K,qBAAAA,C,kkBC9gBtB,IA6BA,2B,8CAUA,QATA,OAKS,YAAA+K,SAAP,SAAgBC,EAAsBC,GACpC,OAAQD,EAAE7H,MAAM+H,EAAID,EAAE9H,MAAM+H,GAAMF,EAAE7H,MAAM+H,IAAMD,EAAE9H,MAAM+H,GAAKF,EAAE7H,MAAMgI,EAAIF,EAAE9H,MAAMgI,CACnF,EAEF,EAVA,CA7BA,SA8BAC,YADsB,EAAA3G,iBAAAA,C,8FC7BtB,eAIA,WAiGA,aA8BE,WAAY7D,QAAA,IAAAA,IAAAA,EAAA,IALL,KAAAX,QAA+B,KAMpC,IAAIc,EAAQV,KAAKC,YACjBD,KAAKO,SAAU,IAAAI,cAAY,IAAAC,gBAAe,CAAC,EAAGF,EAAMG,SAAUN,GAC9DP,KAAKgB,YAAc,IAAI,EAAAD,YACzB,CA6EF,OAxEE,sBAAW,mBAAI,C,IAAf,WACE,OAAQf,KAAKC,YAAyCC,IACxD,E,gCAKO,YAAAe,WAAP,SAAkBrB,GAChBI,KAAKJ,QAAUA,CACjB,EAKO,YAAAuB,WAAP,WACA,EAKO,YAAAC,MAAP,W,IAAa,qDACb,EAeO,YAAAoH,WAAP,SAAkBpI,GAClB,EAKO,YAAA4K,WAAP,SAAkB5K,GAChB,OAAO,IACT,EAKO,YAAA6K,aAAP,SAAoB7K,GAClB,OAAO,IACT,EAYU,YAAAoB,eAAV,SACEC,EAAuBC,EACvBpB,EAAiCqB,GAEjC,IAAIC,EAAO,CAACF,KAAI,EAAEpB,SAAQ,EAAEqB,KAAI,GAEhC,OADAF,EAAQI,QAAQD,GACTA,EAAKD,IACd,EAxGc,EAAAzB,KAAe,UAKf,EAAAW,QAAsB,CAAC,EAqGvC,C,CA/GA,GAAsB,EAAAsD,kBAAAA,C,i5CCrGtB,eACA,WACA,WACA,WACA,WAGA,WAwBA,cAoCE,WAAY7D,EAAeV,EAA8BW,GAAzD,WACM,KAAc,IAAA2K,iBAAgB3K,EAAS,EAAA4K,eAAetK,SAAQ,GAA7DuK,EAAI,KAAEC,EAAG,K,SACd,YAAM/K,EAAUV,EAASwL,IAAK,MACzBE,WAAa,EAAK/K,QAAoB,YAAK,IAAI,EAAA4K,eAAwBE,GAC5E,EAAKC,WAAW1L,QAAUA,EAC1B,EAAK2L,OAAS,G,CAChB,CA+LF,OAzO2C,OAuD/B,YAAAC,aAAV,SAAuBC,EAAWC,EAAeC,EAAeC,G,QACxDhM,EAAUI,KAAKJ,Q,IACrB,IAAmB,QAAAgM,EAAMH,IAAE,8BAAE,CAAxB,IAAMzJ,EAAI,QACT,IAAYA,EAAI,GAAfuE,EAAI,KAAEuE,EAAC,KACZ,GAAIY,GAASZ,GAA4B,UAAvBlL,EAAQiM,KAAKtF,GAC7B,MAAO,CAACA,KAAMA,EAAMuE,EAAGgB,KAAKC,IAAIL,EAAO,GAAIC,MAAOA,GAEpDD,GAASZ,C,mGAEX,MAAO,CAACvE,KAAM,KAAMuE,EAAG,EAAGa,MAAOA,EACnC,EAWU,YAAAK,SAAV,SAAmB9I,EAAuB4B,EACvB8G,GACE,IAAIlK,EAAOwB,EAAKxB,KACZoB,EAAQ9C,KAAKwL,aAAatI,EAAK4H,EAAG5H,EAAKJ,MAAMgI,EAAG5H,EAAK+I,KAAML,GAC3DxI,EAAMpD,KAAKwL,aAAatI,EAAK4H,EAAG5H,EAAKE,IAAI0H,EAAG5H,EAAKgJ,MAAON,GAC5D,OAAO,IAAI5L,KAAKO,QAAQ+F,SAAS5E,EAAMoD,EAAK5B,EAAK0C,QAAS9C,EAAOM,EACnE,EAmBZ,YAAA/B,SAAP,SAAgBd,G,sBACd,IAAKP,KAAK2D,UAAUuD,MAAM,YAAa,CACrClH,KAAKJ,QAAQU,SAAWN,KAAKM,SAC7BC,GAAU,IAAAI,aAAY,CAAC8I,SAAUzJ,KAAKO,QAAQkJ,UAAY,CAACzJ,KAAKJ,QAAQ4G,KAAKxG,KAAKM,YAAaC,G,IAC/F,IAAwB,QAAAP,KAAKJ,QAAQ8J,YAAYnJ,EAAkB,SAAGP,KAAKM,WAAS,8BAAE,CAAjF,IAAMsJ,EAAS,QACd,IAAmB,CAAC,KAAM,MAAwC,GAAjEuC,EAAO,KAAEP,EAAK,K,IACnB,IAAkB,kBAAA5L,KAAK4D,WAAQ,8BAAE,CAA5B,IAAMkB,EAAG,QACR9C,EAAO,IAAKhC,KAAKO,QAAmB,SACxC,GAAIuE,EAAIsH,eAAgB,CACN,OAAZD,IACDA,GAAD,IAAmBnM,KAAKsL,WAAWlB,KAAKR,GAAU,IAA1C,GAAEgC,EAAK,M,IAEjB,IAAmB,kBAAA9G,EAAIzD,SAAS8K,KAAQ,8BAAE,CAArC,IAAMzK,EAAI,QACbM,EAAKuF,KAAKvH,KAAKgM,SAAStK,EAAMoD,EAAK8G,G,6GAGrC,IAAmB,kBAAA9G,EAAIzD,SAASuI,KAAU,8BAAE,CAAjClI,EAAI,QAAV,IACCwB,EACF,IAAIlD,KAAKO,QAAQ+F,SAAS5E,EAAKA,KAAMoD,EAAKpD,EAAKkE,QAASlE,EAAKoB,MAAOpB,EAAK0B,KAC3EpB,EAAKuF,KAAKrE,E,mGAGdlD,KAAK0B,KAAK2H,MAAMrH,E,sMAGpBhC,KAAK2D,UAAUsD,IAAI,W,CAErB,OAAOjH,IACT,EAKO,YAAAyI,eAAP,WAOE,OANKzI,KAAK2D,UAAUuD,MAAM,oBACxBlH,KAAKqM,kBACLrM,KAAKsM,gBACL,YAAM7D,eAAc,WACpBzI,KAAK2D,UAAUsD,IAAI,mBAEdjH,IACT,EAKU,YAAAqM,gBAAV,WACE,IAAM7F,EAAOxG,KAAKJ,QAAQ4G,KAAKxG,KAAKM,UAC9BiG,EAAOvG,KAAKuM,uBACdhG,GACFvG,KAAKJ,QAAQ4M,OAAOhG,EAAMD,EAE9B,EAKO,YAAA+F,cAAP,WACE,IAAMG,EAAQzM,KAAK0M,qBACb9M,EAAUI,KAAKJ,QACrB,GAAI6M,IAAU7M,EAAQ+M,OAAOF,GAAQ,CACnC,IAAMG,EAAOhN,EAAQgN,KAAK5M,KAAKM,UAC3BiL,EAASvL,KAAK6M,UAAUD,EAAMhN,EAAQkN,aAAaL,EAAO,OAC1DlB,EACF3L,EAAQmN,QAAQN,EAAOlB,GAEvB3L,EAAQ4M,OAAOI,EAAMH,E,CAG3B,EAOU,YAAAI,UAAV,SAAoBD,EAASzK,G,QAC3B,GAAIA,E,IACF,IAAoB,QAAAnC,KAAKJ,QAAQoN,KAAKJ,EAAM,UAAQ,8BAAE,CAAjD,IAAMH,EAAK,QACd,GAAIzM,KAAKJ,QAAQkN,aAAaL,EAAO,QAAUtK,EAC7C,OAAOsK,C,mGAIb,OAAO,IACT,EAKO,YAAA9D,mBAAP,SAA0BE,G,QACxB,QADwB,IAAAA,IAAAA,GAAA,GACpB7I,KAAK2D,UAAUuD,MAAM,kB,IACvB,IAAmB,QAAAlH,KAAK0B,MAAI,8BAAE,CAAzB,IAAMA,EAAI,QACTA,EAAK+D,SAAW,EAAA1C,MAAM+F,UACxBpH,EAAK+D,MAAM,EAAA1C,MAAMiG,QAASH,E,mGAKhC,OADA7I,KAAK2D,UAAUoF,MAAM,kBACd/I,IACT,EAKO,YAAA0M,mBAAP,WACE,OAAO1M,KAAK6D,UAAUmH,WAAWhL,KACnC,EAKO,YAAAuM,qBAAP,WACE,OAAOvM,KAAK6D,UAAUoH,aAAajL,KACrC,EAOO,YAAAiN,UAAP,SAAiB1B,GACfvL,KAAKuL,OAAOhE,KAAKgE,EACnB,EAKO,YAAA2B,UAAP,WACE,OAAOlN,KAAKuL,MACd,EAlOc,EAAAvG,KAAe,OAKf,EAAAnE,QAAO,OAChB,EAAAlB,qBAAqBkB,SAAO,CAC/B0D,eAAe,IAAA4F,YAAU,OACpB,EAAAxK,qBAAqBkB,QAAQ0D,eAAa,CAC7CgH,OAAQ,CAAC,EAAAxI,MAAM+F,SAAW,EAAG,GAAI,oBAAoB,MAEvDkB,SAAU,EAAAmD,aACV7G,SAAU,EAAA8G,aACVC,WAAY,OAuNhB,C,CAzOA,CAA2C,EAAA1N,sBAA9B,EAAA2N,aAAAA,C,kZC/Bb,eAqBA,aA+EE,WAAY/M,QAAA,IAAAA,IAAAA,EAAA,MACV,IAAIG,EAAQV,KAAKC,YACjBD,KAAKO,SAAU,IAAAI,cAAY,IAAAC,gBAAe,CAAC,EAAGF,EAAMG,SAAUN,GAC9DP,KAAKuN,OACLvN,KAAKwN,aACP,CA8KF,OAzKY,YAAAD,KAAV,WACEvN,KAAKmM,QAAU,GACfnM,KAAKyN,OAAS,GACdzN,KAAK0N,OAAS,GACd1N,KAAK4L,MAAQ,GACb5L,KAAK2N,MAAQ,EACf,EAKU,YAAAH,YAAV,WACE,IAAII,GAAO,IAAAC,WAAU7N,KAAKO,QAAsB,cAC5CuN,GAAS,IAAAD,WAAU7N,KAAKO,QAAyB,iBACjDwN,GAAU,IAAAF,WAAU7N,KAAKO,QAA0B,kBACvDP,KAAKgO,aAAe,IAAIC,OAAO,OAASL,EAAKM,KAAK,KAAO,KAAM,KAC/DlO,KAAKmO,gBAAkB,IAAIF,OAAO,aAAeH,EAAOI,KAAK,KAAO,YACpElO,KAAKoO,iBAAmB,IAAIH,OAAO,aAAeF,EAAU,WAC9D,EAKU,YAAAM,WAAV,WACMrO,KAAKyN,OAAOa,MAAM,QACpBtO,KAAKmM,QAAQ5E,KAAKvH,KAAKyN,QACvBzN,KAAK4L,MAAMrE,KAAKvH,KAAK0N,SAEvB1N,KAAKyN,OAAS,GACdzN,KAAK0N,OAAS,EAChB,EAWU,YAAAa,aAAV,SAAuBhI,EAAa8B,GAClCrI,KAAK0N,OAAOnG,KAAK,CAAChB,EAAM8B,EAAK5F,SAC7BzC,KAAKyN,QAAUpF,CACjB,EASU,YAAAmG,WAAV,SAAqBjI,EAASuH,GAI5B,OAHKA,GACH9N,KAAKuO,aAAahI,EAAMvG,KAAKJ,QAAQ6O,MAAMlI,IAEtCvG,KAAKJ,QAAQ8O,KAAKnI,EAC3B,EASU,YAAAoI,UAAV,SAAoBpI,EAASuH,GAC3B,IAAKA,EAAQ,CACX,IAAIzF,EAAOrI,KAAKO,QAAyB,gBAAEP,KAAKJ,QAAQiM,KAAKtF,IAC7DvG,KAAKuO,aAAahI,EAAM8B,E,CAE1B,OAAOrI,KAAKJ,QAAQ8O,KAAKnI,EAC3B,EAkBU,YAAAqI,gBAAV,SAA0BrI,EAASuH,GACjC9N,KAAKqO,aACL,IAAMQ,EAAQ7O,KAAKJ,QAAQkN,aAAavG,EAAM,UAAY,GACpDuI,EAAQ9O,KAAKJ,QAAQiM,KAAKtF,IAAS,GACnCwH,EAAU/N,KAAKoO,iBAAiBW,KAAKF,GACvCH,EAAOnI,EAWX,OAVIvG,KAAKJ,QAAQoP,WAAWzI,IAAUvG,KAAKJ,QAAQkN,aAAavG,EAAM,cACjEwH,GAAY/N,KAAKgO,aAAae,KAAKD,GAOtCJ,EAAO1O,KAAKJ,QAAQ8O,KAAKnI,IANrBvG,KAAKJ,QAAQ8O,KAAKnI,IACpBvG,KAAK2N,MAAMpG,KAAK,CAACvH,KAAKJ,QAAQ8O,KAAKnI,GAAOuH,IAE5CY,EAAO1O,KAAKJ,QAAQoP,WAAWzI,GAC/BuH,GAAUA,GAAU9N,KAAKmO,gBAAgBY,KAAKF,MAAYd,GAIrD,CAACW,EAAMZ,EAChB,EASU,YAAAmB,YAAV,SAAsB1I,EAAS2I,GAE7B,OADAlP,KAAKqO,aACErO,KAAKJ,QAAQ8O,KAAKnI,EAC3B,EAoBO,YAAA6D,KAAP,SAAY7D,G,QACVvG,KAAKuN,OAKL,IAJA,IAAI4B,EAAOnP,KAAKJ,QAAQ8O,KAAKnI,GACzBuH,GAAS,EACTsB,EAAUpP,KAAKO,QAAyB,gBAErCgG,GAAQA,IAAS4I,GAAM,CAC5B,IAAMtD,EAAO7L,KAAKJ,QAAQiM,KAAKtF,GAClB,UAATsF,EACFtF,EAAOvG,KAAKwO,WAAWjI,EAAWuH,GACzBsB,EAAQC,eAAexD,GAChCtF,EAAOvG,KAAK2O,UAAUpI,EAAWuH,GACxBjC,GACRtF,GAAD,IAAiBvG,KAAK4O,gBAAgBrI,EAAWuH,GAAO,IAAnD,GAAEA,EAAM,MAEbvH,EAAOvG,KAAKiP,YAAY1I,EAAWuH,IAEhCvH,GAAQvG,KAAK2N,MAAMlL,SACtBzC,KAAKqO,aACJ9H,GAAD,IAAiBvG,KAAK2N,MAAM2B,MAAK,IAA5B,GAAExB,EAAM,K,CAIjB9N,KAAKqO,aACL,IAAIkB,EAAS,CAACvP,KAAKmM,QAASnM,KAAK4L,OAEjC,OADA5L,KAAKuN,OACEgC,CACT,EA3Pc,EAAA1O,QAAsB,CAClCmN,aAAc,CAAC,SAAU,WAAY,QAAS,WAAY,MAAO,OAAQ,aAAc,kBAIvFwB,gBAAiB,CAACC,GAAI,KAAMC,IAAK,GAAI,WAAY,IAIjDvB,gBAAiB,iBAKjBC,iBAAkB,mBA+OtB,C,CAlQA,GAAa,EAAAjD,eAAAA,C,6jBCrBb,eAEA,WAWA,yE,OAUS,EAAArL,cAAgB,EAAAwN,a,CAuCzB,QAjD0C,OAejC,YAAAnN,gBAAP,SAAuBG,GACrB,IAAMV,EAAUI,KAAKJ,QACrB,GAAyB,iBAAf,EACR,IACEU,EAAWV,EAAQ+P,MAAMrP,EAAU,Y,CACnC,MAAOkH,GAAK,CAEhB,OAAIlH,aAAoBV,EAAQgQ,OAAOC,UACnCvP,aAAoBV,EAAQgQ,OAAOE,aACnCxP,aAAoBV,EAAQgQ,OAAOG,gBAIzC,EAQO,YAAA1P,OAAP,SAAcC,EAAeC,GAC3B,IAAMX,EAAUI,KAAKJ,QACrB,GAAyB,iBAAf,EACRU,EAAWV,EAAQ+P,MAAMrP,EAAU,kBAC9B,GAAIA,aAAoBV,EAAQgQ,OAAOE,aACnCxP,aAAoBV,EAAQgQ,OAAOG,iBAAkB,CAC9D,IAAIC,EAAQ1P,EACZA,EAAWV,EAAQ+P,MAAM,GAAI,aAC7B/P,EAAQ4M,OAAO5M,EAAQ4G,KAAKlG,GAAW0P,E,CAEzC,OAAO,YAAM3P,OAAM,UAACC,EAAUC,EAChC,EAEF,EAjDA,CAA0C,EAAAC,iBAA7B,EAAAyP,YAAAA,C,8jBCbb,eAYA,cAYE,WAAYvO,EAAcoD,EAAwBc,EACtC9C,EACAM,G,YAFsC,IAAAwC,IAAAA,GAAA,QACtC,IAAA9C,IAAAA,EAAA,CAAyByD,KAAM,KAAMuE,EAAG,EAAGa,MAAO,UAClD,IAAAvI,IAAAA,EAAA,CAAuBmD,KAAM,KAAMuE,EAAG,EAAGa,MAAO,KAC1D,YAAMjK,EAAMoD,EAAKc,EAAS9C,EAAOM,IAAI,IACvC,CAyFF,OAzG2C,OAKzC,sBAAI,sBAAO,C,IAAX,WACE,OAAOpD,KAAK4D,SAAShE,OACvB,E,gCAyBO,YAAA6I,eAAP,SAAsByH,GACpB,GAAIlQ,KAAKyF,QAAU,EAAA1C,MAAM+F,SAAU,CACjC,GAAI9I,KAAK4D,SAASwI,eAAgB,CAChC,IAAI7F,EAAOvG,KAAK8C,MAAMyD,KACtB,GAAIA,IAASvG,KAAKoD,IAAImD,KAChBvG,KAAKoD,IAAI0H,GAAK9K,KAAKoD,IAAI0H,EAAI9K,KAAKJ,QAAQ6O,MAAMzO,KAAKoD,IAAImD,MAAM9D,QAC/DzC,KAAKJ,QAAQuQ,MAAMnQ,KAAKoD,IAAImD,KAAMvG,KAAKoD,IAAI0H,GAEzC9K,KAAK8C,MAAMgI,IACbvE,EAAOvG,KAAKJ,QAAQuQ,MAAMnQ,KAAK8C,MAAMyD,KAAWvG,KAAK8C,MAAMgI,IAE7D9K,KAAKJ,QAAQmN,QAAQ/M,KAAK+G,YAAaR,OAClC,CAIL,IAHIvG,KAAK8C,MAAMgI,IACbvE,EAAOvG,KAAKJ,QAAQuQ,MAAM5J,EAAMvG,KAAK8C,MAAMgI,IAEtCvE,IAASvG,KAAKoD,IAAImD,MAAM,CAC7B,IAAImI,EAAO1O,KAAKJ,QAAQ8O,KAAKnI,GAC7BvG,KAAKJ,QAAQyF,OAAOkB,GACpBA,EAAOmI,C,CAET1O,KAAKJ,QAAQwQ,OAAOpQ,KAAK+G,YAAaR,GAClCvG,KAAKoD,IAAI0H,EAAI9K,KAAKJ,QAAQ6O,MAAMlI,GAAM9D,QACxCzC,KAAKJ,QAAQuQ,MAAM5J,EAAMvG,KAAKoD,IAAI0H,GAEpC9K,KAAKJ,QAAQyF,OAAOkB,E,OAGtBvG,KAAKJ,QAAQmN,QAAQ/M,KAAK+G,YAAa/G,KAAK8C,MAAMyD,MAEpDvG,KAAK8C,MAAMyD,KAAOvG,KAAKoD,IAAImD,KAAOvG,KAAK+G,YACvC/G,KAAK8C,MAAMgI,EAAI9K,KAAKoD,IAAI0H,EAAI,EAC5B9K,KAAKyF,MAAM,EAAA1C,MAAM+F,S,CAErB,EAOO,YAAAuH,iBAAP,SAAwB/P,GACtBA,EAASgM,eACX,EAQO,YAAA3D,mBAAP,SAA0BE,GACxB,QADwB,IAAAA,IAAAA,GAAA,GACpB7I,KAAKyF,SAAW,EAAA1C,MAAMiG,QAAS,CACjC,IAAMpJ,EAAUI,KAAKJ,QACjB2G,EAAOvG,KAAK8C,MAAMyD,KAClB7E,EAAc9B,EAAQyI,KAAK,IAC/B,GAAIQ,EAAS,CACX,IAAIR,EAAOrI,KAAK8C,MAAM6I,MAAQ3L,KAAK0B,KAAO1B,KAAKoD,IAAIuI,MACnD,GAAI3L,KAAK4D,SAASwI,eAChB1K,EAAO9B,EAAQyI,KAAKA,OACf,CACL,IAAM6B,EAAMtK,EAAQ+P,MAAMtH,EAAM,aAChC3G,EAAO9B,EAAQoP,WAAWpP,EAAQ4G,KAAK0D,G,EAGvCtK,EAAQ+M,OAAOpG,IACjB3G,EAAQmN,QAAQrL,EAAM6E,GAExBvG,KAAK8C,MAAMyD,KAAOvG,KAAKoD,IAAImD,KAAO7E,EAClC1B,KAAK8C,MAAMgI,EAAI9K,KAAKoD,IAAI0H,EAAI,C,CAEhC,EAEF,EAzGA,CAA2C,EAAAzG,kBAA9B,EAAA+I,aAAAA,C,8jBCZb,IAUA,2B,8CACA,QAD2C,OAC3C,EADA,CAVA,SAU2ChJ,kBAA9B,EAAA+I,aAAAA,C,k5CCVb,8BAoBY,KAAAmD,KAAe,CAmE3B,QA9DgB,EAAAC,SAAd,W,YAAuB,kD,IACrB,IAAmB,QAAAC,GAAK,8BAAE,CAArB,IAAM,EAAI,QACb,GAAIxQ,KAAKyQ,IAAI,GACX,MAAM,IAAIC,MAAM,6BAA+B,GAEjD,GAAI1Q,KAAK0O,OAASiC,EAASC,OACzB,MAAM,IAAIF,MAAM,4CAElB1Q,KAAKwQ,MAAMvJ,IAAI,EAAMjH,KAAK0O,MAC1B1O,KAAK0O,OAAS,C,mGAElB,EAMc,EAAA+B,IAAd,SAAkB9K,GAChB,OAAO3F,KAAKwQ,MAAMC,IAAI9K,EACxB,EAKO,YAAAsB,IAAP,SAAWtB,GACT3F,KAAKsQ,MAAQtQ,KAAK6Q,OAAOlL,EAC3B,EAKO,YAAAoD,MAAP,SAAapD,GACX3F,KAAKsQ,OAAStQ,KAAK6Q,OAAOlL,EAC5B,EAMO,YAAAuB,MAAP,SAAavB,GACX,SAAU3F,KAAKsQ,KAAOtQ,KAAK6Q,OAAOlL,GACpC,EAKO,YAAAvE,MAAP,WACEpB,KAAKsQ,KAAO,CACd,EAMU,YAAAO,OAAV,SAAiBlL,GACf,IAAMmL,EAAO9Q,KAAKC,YAAgCuQ,MAAMO,IAAIpL,GAC5D,IAAKmL,EACH,MAAM,IAAIJ,MAAM,2BAA6B/K,GAE/C,OAAOmL,CACT,EAhFiB,EAAAF,OAAS,GAAK,GAKd,EAAAlC,KAAe,EAKf,EAAA8B,MAA6B,IAAIQ,IAwEpD,C,CAvFA,GAAa,EAAAL,SAAAA,EA6Fb,2B,IAA8B,sDAC5B,IAAMM,EAAI,YAAG,a,8CAAwB,QAAV,OAAU,EAAxB,CAAcN,GAE3B,OADAM,EAAKV,SAAQ,MAAbU,EAAI,OAAaT,IAAK,IACfS,CACT,C,w4CCjGA,IAcA,2B,8CA2DA,QA3DkC,OAWzB,YAAApP,QAAP,W,YAAe,kD,IACb,IAAmB,QAAA7B,MAAI,8BAAE,CAApB,IAAMkD,EAAI,QAEb,IAAe,IADFA,EAAKA,KAAI,MAATA,EAAI,OAASvB,IAAI,IAE5B,OAAO,C,mGAGX,OAAO,CACT,EAmBO,YAAAuP,aAAP,W,IAAoB,sDAClB,IAAIrG,GAAK,EACL5H,EAAQjD,KAAKiD,MACjB,OAAO,IAAIkO,SAAQ,SAACC,EAAcC,IAChC,SAAUxP,IACR,I,QAASgJ,EAAI5H,EAAMR,QAAQ,CACzB,IAAI8M,GAAS,EAAAtM,EAAM4H,IAAG3H,KAAI,eAAIvB,IAAI,IAClC,GAAI4N,aAAkB4B,QAEpB,YADA5B,EAAO+B,KAAKzP,GAAS0P,OAAM,SAAA/J,GAAO,OAAA6J,EAAK7J,EAAL,IAGpC,IAAe,IAAX+H,EAEF,YADA6B,GAAG,E,CAIPA,GAAG,EACJ,CAbD,EAcF,GACF,EAEF,EA3DA,CAdA,SAckC7N,iBAArB,EAAAxC,aAAAA,C,y/DCTA,EAAAyQ,IAAMC,SAkBnB,MAmBE,SAAY9P,QAAA,IAAAA,IAAAA,EAAA,MAVL,KAAA+M,KAA4B,KAI5B,KAAAgD,KAA4B,KAOjC1R,KAAK2B,KAAOA,CACd,EArBW,EAAAgQ,SAAAA,EA+Bb,iBAiBE,a,IAAY,sDACV3R,KAAKgC,KAAO,IAAI2P,EAAoB,EAAAH,KACpCxR,KAAKgC,KAAK0M,KAAO1O,KAAKgC,KAAK0P,KAAO1R,KAAKgC,KACvChC,KAAKuH,KAAI,MAATvH,KAAI,OAAS4B,IAAI,GACnB,CA8PF,OArPS,YAAA8I,SAAP,SAAgBC,EAAcC,GAC5B,OAAOD,EAAIC,CACb,EAQO,YAAArD,KAAP,W,YAAY,kD,IACV,IAAmB,QAAA3F,GAAI,8BAAE,CAApB,IAAMD,EAAI,QACTuB,EAAO,IAAIyO,EAAoBhQ,GACnCuB,EAAKwL,KAAO1O,KAAKgC,KACjBkB,EAAKwO,KAAO1R,KAAKgC,KAAK0P,KACtB1R,KAAKgC,KAAK0P,KAAOxO,EACjBA,EAAKwO,KAAKhD,KAAOxL,C,mGAEnB,OAAOlD,IACT,EAOO,YAAAsP,IAAP,WACE,IAAIpM,EAAOlD,KAAKgC,KAAK0P,KACrB,OAAIxO,EAAKvB,OAAS,EAAA6P,IACT,MAETxR,KAAKgC,KAAK0P,KAAOxO,EAAKwO,KACtBxO,EAAKwO,KAAKhD,KAAO1O,KAAKgC,KACtBkB,EAAKwL,KAAOxL,EAAKwO,KAAO,KACjBxO,EAAKvB,KACd,EAQO,YAAAiQ,QAAP,W,YAAe,kD,IACb,IAAmB,QAAAhQ,EAAKe,MAAM,GAAGkP,WAAS,8BAAE,CAAvC,IAAMlQ,EAAI,QACTuB,EAAO,IAAIyO,EAAoBhQ,GACnCuB,EAAKwL,KAAO1O,KAAKgC,KAAK0M,KACtBxL,EAAKwO,KAAO1R,KAAKgC,KACjBhC,KAAKgC,KAAK0M,KAAOxL,EACjBA,EAAKwL,KAAKgD,KAAOxO,C,mGAEnB,OAAOlD,IACT,EAOO,YAAA8R,MAAP,WACE,IAAI5O,EAAOlD,KAAKgC,KAAK0M,KACrB,OAAIxL,EAAKvB,OAAS,EAAA6P,IACT,MAETxR,KAAKgC,KAAK0M,KAAOxL,EAAKwL,KACtBxL,EAAKwL,KAAKgD,KAAO1R,KAAKgC,KACtBkB,EAAKwL,KAAOxL,EAAKwO,KAAO,KACjBxO,EAAKvB,KACd,EAOO,YAAA0D,OAAP,W,YAAc,kDACZ,IAAMR,EAAM,IAAImM,I,IAChB,IAAmB,QAAA/N,GAAK,8BAAE,CAArB,IAAM,EAAI,QACb4B,EAAIoC,IAAI,GAAM,E,mGAGhB,IADA,IAAI/D,EAAOlD,KAAKgC,KAAK0M,KACdxL,EAAKvB,OAAS,EAAA6P,KAAK,CACxB,IAAM9C,EAAOxL,EAAKwL,KACd7J,EAAI4L,IAAIvN,EAAKvB,QACfuB,EAAKwO,KAAKhD,KAAOxL,EAAKwL,KACtBxL,EAAKwL,KAAKgD,KAAOxO,EAAKwO,KACtBxO,EAAKwL,KAAOxL,EAAKwO,KAAO,MAE1BxO,EAAOwL,C,CAEX,EAOO,YAAA3F,MAAP,WAGE,OAFA/I,KAAKgC,KAAK0M,KAAKgD,KAAO1R,KAAKgC,KAAK0P,KAAKhD,KAAO,KAC5C1O,KAAKgC,KAAK0M,KAAO1O,KAAKgC,KAAK0P,KAAO1R,KAAKgC,KAChChC,IACT,EAOQ,YAACyR,OAAOM,UAAhB,W,wDACMC,EAAUhS,KAAKgC,KAAK0M,K,wBAEjBsD,EAAQrQ,OAAS,EAAA6P,IAAG,MACzB,GAAMQ,EAAQrQ,M,cAAd,SACAqQ,EAAUA,EAAQtD,K,4BASd,YAAAhG,SAAR,W,wDACMsJ,EAAUhS,KAAKgC,KAAK0P,K,wBAEjBM,EAAQrQ,OAAS,EAAA6P,IAAG,MACzB,GAAMQ,EAAQrQ,M,cAAd,SACAqQ,EAAUA,EAAQN,K,4BAWf,YAAAtB,OAAP,SAAczO,EAAiB+I,QAAA,IAAAA,IAAAA,EAAA,MACZ,OAAbA,IACFA,EAAW1K,KAAK0K,SAASuH,KAAKjS,OAIhC,IAFA,IAAIkD,EAAO,IAAIyO,EAAoBhQ,GAC/BuQ,EAAMlS,KAAKgC,KAAK0M,KACbwD,EAAIvQ,OAAS,EAAA6P,KAAO9G,EAASwH,EAAIvQ,KAAmBuB,EAAKvB,OAC9DuQ,EAAMA,EAAIxD,KAKZ,OAHAxL,EAAKwO,KAAOQ,EAAIR,KAChBxO,EAAKwL,KAAOwD,EACZA,EAAIR,KAAKhD,KAAOwD,EAAIR,KAAOxO,EACpBlD,IACT,EAQO,YAAAmS,KAAP,SAAYzH,G,aAAA,IAAAA,IAAAA,EAAA,MACO,OAAbA,IACFA,EAAW1K,KAAK0K,SAASuH,KAAKjS,OAKhC,IAAIoS,EAAiC,G,IACrC,IAAmB,QAAApS,MAAI,8BAAE,CAApB,IAAMkD,EAAI,QACbkP,EAAM7K,KAAK,IAAIwD,EAAsB7H,G,mGASvC,IAJAlD,KAAKgC,KAAK0M,KAAO1O,KAAKgC,KAAK0P,KAAO1R,KAAKgC,KAIhCoQ,EAAM3P,OAAS,GAAG,CACvB,IAAI4P,EAAKD,EAAMN,QACXQ,EAAKF,EAAMN,QACfO,EAAGhJ,MAAMiJ,EAAI5H,GACb0H,EAAM7K,KAAK8K,E,CAQb,OAHID,EAAM3P,SACRzC,KAAKgC,KAAOoQ,EAAM,GAAGpQ,MAEhBhC,IACT,EASO,YAAAqJ,MAAP,SAAarH,EAA6B0I,G,mBAAA,IAAAA,IAAAA,EAAA,MACvB,OAAbA,IACFA,EAAW1K,KAAK0K,SAASuH,KAAKjS,OAUhC,IALA,IAAIuS,EAAOvS,KAAKgC,KAAK0M,KACjB8D,EAAOxQ,EAAKA,KAAK0M,KAId6D,EAAK5Q,OAAS,EAAA6P,KAAOgB,EAAK7Q,OAAS,EAAA6P,KAWpC9G,EAAS8H,EAAK7Q,KAAmB4Q,EAAK5Q,OACxC,IAAmC,CAAC4Q,EAAMC,GAAK,GAA9CA,EAAKd,KAAKhD,KAAI,KAAE6D,EAAKb,KAAKhD,KAAI,KAC/B,IAAyB,CAAC6D,EAAKb,KAAMc,EAAKd,MAAK,GAA9Cc,EAAKd,KAAI,KAAEa,EAAKb,KAAI,KACrB,IAA6C,CAAC1P,EAAKA,KAAMhC,KAAKgC,MAAK,GAAlEhC,KAAKgC,KAAK0P,KAAKhD,KAAI,KAAE1M,EAAKA,KAAK0P,KAAKhD,KAAI,KACzC,IAAmC,CAAC1M,EAAKA,KAAK0P,KAAM1R,KAAKgC,KAAK0P,MAAK,GAAlE1R,KAAKgC,KAAK0P,KAAI,KAAE1P,EAAKA,KAAK0P,KAAI,KAC9Ba,GAAD,IAAe,CAACC,EAAK9D,KAAM6D,GAAK,IAA3B,GAAEC,EAAI,MAEXD,EAAOA,EAAK7D,KAchB,OAPI8D,EAAK7Q,OAAS,EAAA6P,MAChBxR,KAAKgC,KAAK0P,KAAKhD,KAAO1M,EAAKA,KAAK0M,KAChC1M,EAAKA,KAAK0M,KAAKgD,KAAO1R,KAAKgC,KAAK0P,KAChC1P,EAAKA,KAAK0P,KAAKhD,KAAO1O,KAAKgC,KAC3BhC,KAAKgC,KAAK0P,KAAO1P,EAAKA,KAAK0P,KAC3B1P,EAAKA,KAAK0M,KAAO1M,EAAKA,KAAK0P,KAAO1P,EAAKA,MAElChC,IACT,EACF,EAnRA,GAAa,EAAA+K,WAAAA,C,0FC3Bb,iBAeE,aALU,KAAA9H,MAA0C,GAMlDjD,KAAKiD,MAAQ,EACf,CAgDF,OAzCS,YAACwO,OAAOM,UAAf,WACE,IAAIlH,EAAI,EACJ5H,EAAQjD,KAAKiD,MACjB,MAAO,CAELyL,KAAA,WACE,MAAO,CAACD,MAAOxL,EAAM4H,KAAM4H,KAAO5H,EAAI5H,EAAMR,OAC9C,EAEJ,EASO,YAAAJ,IAAP,SAAWa,EAAiBrD,QAAA,IAAAA,IAAAA,EAAmB0D,EAAgBmP,iBAC7D,IAAI7H,EAAI7K,KAAKiD,MAAMR,OACnB,GACEoI,UACOA,GAAK,GAAKhL,EAAWG,KAAKiD,MAAM4H,GAAGhL,UAE5C,OADAG,KAAKiD,MAAM0P,OAAO9H,EAAI,EAAG,EAAG,CAAC3H,KAAMA,EAAMrD,SAAUA,IAC5CqD,CACT,EAOO,YAAAmC,OAAP,SAAcnC,GACZ,IAAI2H,EAAI7K,KAAKiD,MAAMR,OACnB,GACEoI,UACOA,GAAK,GAAK7K,KAAKiD,MAAM4H,GAAG3H,OAASA,GACtC2H,GAAK,GACP7K,KAAKiD,MAAM0P,OAAO9H,EAAG,EAEzB,EA3Dc,EAAA6H,gBAA0B,EA4D1C,C,CAjEA,GAAa,EAAAnP,gBAAAA,C","sources":["webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/core/Handler.ts","webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/core/InputJax.ts","webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/core/MathDocument.ts","webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/core/MathList.ts","webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/core/OutputJax.ts","webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/handlers/html/HTMLDocument.ts","webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/handlers/html/HTMLDomStrings.ts","webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/handlers/html/HTMLHandler.ts","webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/handlers/html/HTMLMathItem.ts","webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/handlers/html/HTMLMathList.ts","webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/util/BitField.ts","webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/util/FunctionList.ts","webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/util/LinkedList.ts","webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/util/PrioritizedList.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Interfaces and abstract classes for Handler objects\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {MathDocument, AbstractMathDocument, MathDocumentConstructor} from './MathDocument.js';\nimport {OptionList} from '../util/Options.js';\nimport {DOMAdaptor} from '../core/DOMAdaptor.js';\n\n/*****************************************************************/\n/**\n *  The Handler interface\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport interface Handler<N, T, D> {\n  /**\n   * The name of the handler class\n   */\n  name: string;\n\n  /**\n   * The DOM Adaptor to use for managing HTML elements\n   */\n  adaptor: DOMAdaptor<N, T, D>;\n\n  /**\n   * The priority for the handler when handlers are polled\n   *   to see which one can process a given document.\n   */\n  priority: number;\n\n  /**\n   * The class implementing the MathDocument for this handler\n   *   (so it can be subclassed by extensions as needed)\n   */\n  documentClass: MathDocumentConstructor<AbstractMathDocument<N, T, D>>;\n\n  /**\n   * Checks to see if the handler can process a given document\n   *\n   * @param {any} document  The document to be processed (string, window, etc.)\n   * @return {boolean}      True if this handler can process the given document\n   */\n  handlesDocument(document: any): boolean;\n\n  /**\n   * Creates a MathDocument for the given handler\n   *\n   * @param {any} document        The document to be handled\n   * @param {OptionList} options  The options for the handling of the document\n   * @return {MathDocument}       The MathDocument object that manages the processing\n   */\n  create(document: any, options: OptionList): MathDocument<N, T, D>;\n}\n\n/*****************************************************************/\n/**\n *  The default MathDocument class (subclasses use their own)\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nclass DefaultMathDocument<N, T, D> extends AbstractMathDocument<N, T, D> {}\n\n/*****************************************************************/\n/**\n *  The Handler interface\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport abstract class AbstractHandler<N, T, D> implements Handler<N, T, D> {\n\n  /**\n   * The name of this class\n   */\n  public static NAME: string = 'generic';\n\n  /**\n   * The DOM Adaptor to use for managing HTML elements\n   */\n  public adaptor: DOMAdaptor<N, T, D>;\n\n  /**\n   * The priority for this handler\n   */\n  public priority: number;\n\n  /**\n   * The class implementing the MathDocument for this handler\n   *   (so it can be subclassed by extensions as needed)\n   */\n  public documentClass: MathDocumentConstructor<AbstractMathDocument<N, T, D>> = DefaultMathDocument;\n\n  /**\n   * @param {number} priority  The priority to use for this handler\n   *\n   * @constructor\n   */\n  constructor(adaptor: DOMAdaptor<N, T, D>, priority: number = 5) {\n    this.adaptor = adaptor;\n    this.priority = priority;\n  }\n\n  /**\n   * @return {string}  The name of this handler class\n   */\n  public get name(): string {\n    return (this.constructor as typeof AbstractHandler).NAME;\n  }\n\n  /**\n   * @override\n   */\n  public handlesDocument(_document: any) {\n    return false;\n  }\n\n  /**\n   * @override\n   */\n  public create(document: any, options: OptionList) {\n    return new this.documentClass(document, this.adaptor, options) as MathDocument<N, T, D>;\n  }\n\n}\n","/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the interface and abstract class for the InputJax\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {MathDocument} from './MathDocument.js';\nimport {MathItem, ProtoItem} from './MathItem.js';\nimport {MmlNode} from './MmlTree/MmlNode.js';\nimport {MmlFactory} from './MmlTree/MmlFactory.js';\nimport {userOptions, defaultOptions, OptionList} from '../util/Options.js';\nimport {FunctionList} from '../util/FunctionList.js';\nimport {DOMAdaptor} from '../core/DOMAdaptor.js';\n\n/*****************************************************************/\n/**\n *  The InputJax interface\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport interface InputJax<N, T, D> {\n  /**\n   * The name of the input jax subclass (e.g,. 'TeX')\n   */\n  name: string;\n\n  /**\n   * Whether this input jax processes string arrays or DOM nodes\n   * (TeX and AsciiMath process strings, MathML processes DOM nodes)\n   */\n  processStrings: boolean;\n\n  /**\n   * The options for this input jax instance\n   */\n  options: OptionList;\n\n  /**\n   * Lists of pre- and post-filters to call before and after processing the input\n   */\n  preFilters: FunctionList;\n  postFilters: FunctionList;\n\n  /**\n   * The DOM adaptor for managing HTML elements\n   */\n  adaptor: DOMAdaptor<N, T, D>;\n\n  /**\n   * The MmlFactory for this input jax\n   */\n  mmlFactory: MmlFactory;\n\n  /**\n   * @param {DOMAdaptor} adaptor The adaptor to use in this jax\n   */\n  setAdaptor(adaptor: DOMAdaptor<N, T, D>): void;\n\n  /**\n   * @param {MmlFactory} mmlFactory The MmlFactory to use in this jax\n   */\n  setMmlFactory(mmlFactory: MmlFactory): void;\n\n  /**\n   * Do any initialization that depends on the document being set up\n   */\n  initialize(): void;\n\n  /**\n   * Reset any needed features of the input jax\n   *\n   * @param {any[]} args   The arguments needed by the reset operation\n   */\n  reset(...args: any[]): void;\n\n  /**\n   * Finds the math within the DOM or the list of strings\n   *\n   * @param {N | string[]} which   The element or array of strings to be searched for math\n   * @param {OptionList} options   The options for the search, if any\n   * @return {ProtoItem[]}         Array of proto math items found (further processed by the\n   *                                handler to produce actual MathItem objects)\n   */\n  findMath(which: N | string[], options?: OptionList): ProtoItem<N, T>[];\n\n  /**\n   * Convert the math in a math item into the internal format\n   *\n   * @param {MathItem} math  The MathItem whose math content is to processed\n   * @param {MathDocument} document The MathDocument for this input jax.\n   * @return {MmlNode}       The resulting internal node tree for the math\n   */\n  compile(math: MathItem<N, T, D>, document: MathDocument<N, T, D>): MmlNode;\n}\n\n/*****************************************************************/\n/**\n *  The abstract InputJax class\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport abstract class AbstractInputJax<N, T, D> implements InputJax<N, T, D> {\n\n  /**\n   * The name of the input jax\n   */\n  public static NAME: string = 'generic';\n\n  /**\n   * The default options for the input jax\n   */\n  public static OPTIONS: OptionList = {};\n\n  /**\n   * The actual options supplied to the input jax\n   */\n  public options: OptionList;\n\n  /**\n   * Filters to run on the TeX string before it is processed\n   */\n  public preFilters: FunctionList;\n\n  /**\n   * Filters to run on the generated MathML after the TeX string is processed\n   */\n  public postFilters: FunctionList;\n\n  /**\n   * The DOMAdaptor for the MathDocument for this input jax\n   */\n  public adaptor: DOMAdaptor<N, T, D> = null;  // set by the handler\n  /**\n   * The MathML node factory\n   */\n  public mmlFactory: MmlFactory = null;        // set by the handler\n\n  /**\n   * @param {OptionList} options  The options to apply to this input jax\n   *\n   * @constructor\n   */\n  constructor(options: OptionList = {}) {\n    let CLASS = this.constructor as typeof AbstractInputJax;\n    this.options = userOptions(defaultOptions({}, CLASS.OPTIONS), options);\n    this.preFilters = new FunctionList();\n    this.postFilters = new FunctionList();\n  }\n\n  /**\n   * @return {string}  The name of this input jax class\n   */\n  public get name(): string {\n    return (this.constructor as typeof AbstractInputJax).NAME;\n  }\n\n  /**\n   * @override\n   */\n  public setAdaptor(adaptor: DOMAdaptor<N, T, D>) {\n    this.adaptor = adaptor;\n  }\n\n  /**\n   * @override\n   */\n  public setMmlFactory(mmlFactory: MmlFactory) {\n    this.mmlFactory = mmlFactory;\n  }\n\n  /**\n   * @override\n   */\n  public initialize() {\n  }\n\n  /**\n   * @override\n   */\n  public reset(..._args: any[]) {\n  }\n\n  /**\n   * @return {boolean}  True means find math in string array, false means in DOM element\n   */\n  public get processStrings(): boolean {\n    return true;\n  }\n\n  /**\n   * @override\n   */\n  public findMath(_node: N | string[], _options?: OptionList) {\n    return [] as ProtoItem<N, T>[];\n  }\n\n  /**\n   * @override\n   */\n  public abstract compile(math: MathItem<N, T, D>, document: MathDocument<N, T, D>): MmlNode;\n\n  /**\n   * Execute a set of filters, passing them the MathItem and any needed data,\n   *  and return the (possibly modified) data\n   *\n   * @param {FunctionList} filters   The list of functions to be performed\n   * @param {MathItem} math          The math item that is being processed\n   * @param {MathDocument} document  The math document containg the math item\n   * @param {any} data               Whatever other data is needed\n   * @return {any}                   The (possibly modified) data\n   */\n  protected executeFilters(\n    filters: FunctionList, math: MathItem<N, T, D>,\n    document: MathDocument<N, T, D>, data: any\n  ): any {\n    let args = {math: math, document: document, data: data};\n    filters.execute(args);\n    return args.data;\n  }\n\n}\n","/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the interface and abstract class for MathDocument objects\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {userOptions, defaultOptions, OptionList, expandable} from '../util/Options.js';\nimport {InputJax, AbstractInputJax} from './InputJax.js';\nimport {OutputJax, AbstractOutputJax} from './OutputJax.js';\nimport {MathList, AbstractMathList} from './MathList.js';\nimport {MathItem, AbstractMathItem, STATE} from './MathItem.js';\nimport {MmlNode, TextNode} from './MmlTree/MmlNode.js';\nimport {MmlFactory} from '../core/MmlTree/MmlFactory.js';\nimport {DOMAdaptor} from '../core/DOMAdaptor.js';\nimport {BitField, BitFieldClass} from '../util/BitField.js';\n\nimport {PrioritizedList} from '../util/PrioritizedList.js';\n\n/*****************************************************************/\n\n/**\n * A function to call while rendering a document (usually calls a MathDocument method)\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport type RenderDoc<N, T, D> = (document: MathDocument<N, T, D>) => boolean;\n\n/**\n * A function to call while rendering a MathItem (usually calls one of its methods)\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport type RenderMath<N, T, D> = (math: MathItem<N, T, D>, document: MathDocument<N, T, D>) => boolean;\n\n/**\n * The data for an action to perform during rendering or conversion\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport type RenderData<N, T, D> = {\n  id: string,                           //  The name for the action\n  renderDoc: RenderDoc<N, T, D>,        //  The action to take during a render() call\n  renderMath: RenderMath<N, T, D>,      //  The action to take during a rerender() or convert() call\n  convert: boolean                      //  Whether the action is to be used during convert()\n};\n\n/**\n * The data used to define a render action in configurations and options objects\n *   (the key is used as the id, the number in the data below is the priority, and\n *    the remainind data is as described below; if no boolean is given, convert = true\n *    by default)\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport type RenderAction<N, T, D> =\n  [number] |                                                     // id (i.e., key) is method name to use\n  [number, string] |                                             // string is method to call\n  [number, string, string] |                                     // the strings are methods names for doc and math\n  [number, RenderDoc<N, T, D>, RenderMath<N, T, D>] |            // explicit functions for doc and math\n  [number, boolean] |                                            // same as first above, with boolean for convert\n  [number, string, boolean] |                                    // same as second above, with boolean for convert\n  [number, string, string, boolean] |                            // same as third above, with boolean for convert\n  [number, RenderDoc<N, T, D>, RenderMath<N, T, D>, boolean];    // same as forth above, with boolean for convert\n\n/**\n * An object representing a collection of rendering actions (id's tied to priority-and-method data)\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport type RenderActions<N, T, D> = {[id: string]: RenderAction<N, T, D>};\n\n/**\n * Implements a prioritized list of render actions.  Extensions can add actions to the list\n *   to make it easy to extend the normal typesetting and conversion operations.\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport class RenderList<N, T, D> extends PrioritizedList<RenderData<N, T, D>> {\n\n  /**\n   * Creates a new RenderList from an initial list of rendering actions\n   *\n   * @param {RenderActions} actions The list of actions to take during render(), rerender(), and convert() calls\n   * @returns {RenderList}    The newly created prioritied list\n   */\n  public static create<N, T, D>(actions: RenderActions<N, T, D>): RenderList<N, T, D> {\n    const list = new this<N, T, D>();\n    for (const id of Object.keys(actions)) {\n      const [action, priority] = this.action<N, T, D>(id, actions[id]);\n      if (priority) {\n        list.add(action, priority);\n      }\n    }\n    return list;\n  }\n\n  /**\n   * Parses a RenderAction to produce the correspinding RenderData item\n   *  (e.g., turn method names into actual functions that call the method)\n   *\n   * @param {string} id               The id of the action\n   * @param {RenderAction} action     The RenderAction defining the action\n   * @returns {[RenderData,number]}   The corresponding RenderData definition for the action and its priority\n   */\n  public static action<N, T, D>(id: string, action: RenderAction<N, T, D>): [RenderData<N, T, D>, number] {\n    let renderDoc, renderMath;\n    let convert = true;\n    let priority = action[0];\n    if (action.length === 1 || typeof action[1] === 'boolean') {\n      action.length === 2 && (convert = action[1] as boolean);\n      [renderDoc, renderMath] = this.methodActions(id);\n    } else if (typeof action[1] === 'string') {\n      if (typeof action[2] === 'string') {\n        action.length === 4 && (convert = action[3] as boolean);\n        const [method1, method2] = action.slice(1) as [string, string];\n        [renderDoc, renderMath] = this.methodActions(method1, method2);\n      } else {\n        action.length === 3 && (convert = action[2] as boolean);\n        [renderDoc, renderMath] = this.methodActions(action[1] as string);\n      }\n    } else {\n      action.length === 4 && (convert = action[3] as boolean);\n      [renderDoc, renderMath] = action.slice(1) as [RenderDoc<N, T, D>, RenderMath<N, T, D>];\n    }\n    return [{id, renderDoc, renderMath, convert} as RenderData<N, T, D>, priority];\n  }\n\n  /**\n   * Produces the doc and math actions for the given method name(s)\n   *   (a blank name is a no-op)\n   *\n   * @param {string} method1    The method to use for the render() call\n   * @param {string} method1    The method to use for the rerender() and convert() calls\n   */\n  protected static methodActions(method1: string, method2: string = method1) {\n    return [\n      (document: any) => {method1 && document[method1](); return false; },\n      (math: any, document: any) => {method2 && math[method2](document); return false; }\n    ];\n  }\n\n  /**\n   * Perform the document-level rendering functions\n   *\n   * @param {MathDocument} document   The MathDocument whose methods are to be called\n   * @param {number=} start           The state at which to start rendering (default is UNPROCESSED)\n   */\n  public renderDoc(document: MathDocument<N, T, D>, start: number = STATE.UNPROCESSED) {\n    for (const item of this.items) {\n      if (item.priority >= start) {\n        if (item.item.renderDoc(document)) return;\n      }\n    }\n  }\n\n  /**\n   * Perform the MathItem-level rendering functions\n   *\n   * @param {MathItem} math           The MathItem whose methods are to be called\n   * @param {MathDocument} document   The MathDocument to pass to the MathItem methods\n   * @param {number=} start           The state at which to start rendering (default is UNPROCESSED)\n   */\n  public renderMath(math: MathItem<N, T, D>, document: MathDocument<N, T, D>, start: number = STATE.UNPROCESSED) {\n    for (const item of this.items) {\n      if (item.priority >= start) {\n        if (item.item.renderMath(math, document)) return;\n      }\n    }\n  }\n\n  /**\n   * Perform the MathItem-level conversion functions\n   *\n   * @param {MathItem} math           The MathItem whose methods are to be called\n   * @param {MathDocument} document   The MathDocument to pass to the MathItem methods\n   * @param {number=} end             The state at which to end rendering (default is LAST)\n   */\n  public renderConvert(math: MathItem<N, T, D>, document: MathDocument<N, T, D>, end: number = STATE.LAST) {\n    for (const item of this.items) {\n      if (item.priority > end) return;\n      if (item.item.convert) {\n        if (item.item.renderMath(math, document)) return;\n      }\n    }\n  }\n\n  /**\n   * Find an entry in the list with a given ID\n   *\n   * @param {string} id            The id to search for\n   * @returns {RenderData|null}   The data for the given id, if found, or null\n   */\n  public findID(id: string): RenderData<N, T, D> | null {\n    for (const item of this.items) {\n      if (item.item.id === id) {\n        return item.item;\n      }\n    }\n    return null;\n  }\n\n}\n\n/*****************************************************************/\n\n/**\n * The ways of specifying a container (a selector string, an actual node,\n * or an array of those (e.g., the result of document.getElementsByTagName())\n *\n * @template N  The HTMLElement node class\n */\nexport type ContainerList<N> = string | N | (string | N | N[])[];\n\n/**\n * The options allowed for the reset() method\n */\nexport type ResetList = {\n  all?: boolean,\n  processed?: boolean,\n  inputJax?: any[],\n  outputJax?: any[]\n};\n\n/**\n * The default option list for the reset() method\n */\nexport const resetOptions: ResetList = {\n  all: false,\n  processed: false,\n  inputJax: null,\n  outputJax: null\n};\n\n/**\n * The option list for when all options are to be reset\n */\nexport const resetAllOptions: ResetList = {\n  all: true,\n  processed: true,\n  inputJax: [],\n  outputJax: []\n};\n\n/*****************************************************************/\n/**\n *  The MathDocument interface\n *\n *  The MathDocument is created by MathJax.Document() and holds the\n *  document, the math found in it, and so on.  The methods of the\n *  MathDocument all return the MathDocument itself, so you can\n *  chain the method calls.  E.g.,\n *\n *    const html = MathJax.Document('<html>...</html>');\n *    html.findMath()\n *        .compile()\n *        .getMetrics()\n *        .typeset()\n *        .updateDocument();\n *\n *  The MathDocument is the main interface for page authors to\n *  interact with MathJax.\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport interface MathDocument<N, T, D> {\n  /**\n   * The document being processed (e.g., DOM document, or Markdown string)\n   */\n  document: D;\n\n  /**\n   * The kind of MathDocument (e.g., \"HTML\")\n   */\n  kind: string;\n\n  /**\n   * The options for the document\n   */\n  options: OptionList;\n\n  /**\n   * The list of MathItems found in this page\n   */\n  math: MathList<N, T, D>;\n\n  /**\n   * The list of actions to take during a render() or convert() call\n   */\n  renderActions: RenderList<N, T, D>;\n\n  /**\n   * This object tracks what operations have been performed, so that (when\n   *  asynchronous operations are used), the ones that have already been\n   *  completed won't be performed again.\n   */\n  processed: BitField;\n\n  /**\n   * An array of input jax to run on the document\n   */\n  inputJax: InputJax<N, T, D>[];\n\n  /**\n   * The output jax to use for the document\n   */\n  outputJax: OutputJax<N, T, D>;\n\n  /**\n   * The DOM adaptor to use for input and output\n   */\n  adaptor: DOMAdaptor<N, T, D>;\n\n  /**\n   * The MmlFactory to be used for input jax and error processing\n   */\n  mmlFactory: MmlFactory;\n\n  /**\n   * @param {string} id      The id of the action to add\n   * @param {any[]} action   The RenderAction to take\n   */\n  addRenderAction(id: string, ...action: any[]): void;\n\n  /**\n   * @param {string} id   The id of the action to remove\n   */\n  removeRenderAction(id: string): void;\n\n  /**\n   * Perform the renderActions on the document\n   */\n  render(): MathDocument<N, T, D>;\n\n  /**\n   * Rerender the MathItems on the page\n   *\n   * @param {number=} start    The state to start rerendering at\n   * @return {MathDocument}    The math document instance\n   */\n  rerender(start?: number): MathDocument<N, T, D>;\n\n  /**\n   * Convert a math string to the document's output format\n   *\n   * @param {string} math           The math string to convert\n   * @params {OptionList} options   The options for the conversion (e.g., format, ex, em, etc.)\n   * @return {MmlNode|N}            The MmlNode or N node for the converted content\n   */\n  convert(math: string, options?: OptionList): MmlNode | N;\n\n  /**\n   * Locates the math in the document and constructs the MathList\n   *  for the document.\n   *\n   * @param {OptionList} options  The options for locating the math\n   * @return {MathDocument}       The math document instance\n   */\n  findMath(options?: OptionList): MathDocument<N, T, D>;\n\n  /**\n   * Calls the input jax to process the MathItems in the MathList\n   *\n   * @return {MathDocument}  The math document instance\n   */\n  compile(): MathDocument<N, T, D>;\n\n  /**\n   * Gets the metric information for the MathItems\n   *\n   * @return {MathDocument}  The math document instance\n   */\n  getMetrics(): MathDocument<N, T, D>;\n\n  /**\n   * Calls the output jax to process the compiled math in the MathList\n   *\n   * @return {MathDocument}  The math document instance\n   */\n  typeset(): MathDocument<N, T, D>;\n\n  /**\n   * Updates the document to include the typeset math\n   *\n   * @return {MathDocument}  The math document instance\n   */\n  updateDocument(): MathDocument<N, T, D>;\n\n  /**\n   * Removes the typeset math from the document\n   *\n   * @param {boolean} restore  True if the original math should be put\n   *                            back into the document as well\n   * @return {MathDocument}    The math document instance\n   */\n  removeFromDocument(restore?: boolean): MathDocument<N, T, D>;\n\n  /**\n   * Set the state of the document (allowing you to roll back\n   *  the state to a previous one, if needed).\n   *\n   * @param {number} state     The new state of the document\n   * @param {boolean} restore  True if the original math should be put\n   *                            back into the document during the rollback\n   * @return {MathDocument}    The math document instance\n   */\n  state(state: number, restore?: boolean): MathDocument<N, T, D>;\n\n  /**\n   * Clear the processed values so that the document can be reprocessed\n   *\n   * @param {ResetList} options   The things to be reset\n   * @return {MathDocument}       The math document instance\n   */\n  reset(options?: ResetList): MathDocument<N, T, D>;\n\n  /**\n   * Reset the processed values and clear the MathList (so that new math\n   * can be processed in the document).\n   *\n   * @return {MathDocument}  The math document instance\n   */\n  clear(): MathDocument<N, T, D>;\n\n  /**\n   * Merges a MathList into the list for this document.\n   *\n   * @param {MathList} list   The MathList to be merged into this document's list\n   * @return {MathDocument}   The math document instance\n   */\n  concat(list: MathList<N, T, D>): MathDocument<N, T, D>;\n\n  /**\n   * Clear the typeset MathItems that are within the given container\n   *   from the document's MathList.  (E.g., when the content of the\n   *   container has been updated and you want to remove the\n   *   associated MathItems)\n   *\n   * @param {ContainerList<N>} elements   The container DOM elements whose math items are to be removed\n   * @return {MathItem<N,T,D>[]}          The removed MathItems\n   */\n  clearMathItemsWithin(containers: ContainerList<N>): MathItem<N, T, D>[];\n\n  /**\n   * Get the typeset MathItems that are within a given container.\n   *\n   * @param {ContainerList<N>} elements   The container DOM elements whose math items are to be found\n   * @return {MathItem<N,T,D>[]}          The list of MathItems within that container\n   */\n  getMathItemsWithin(elements: ContainerList<N>): MathItem<N, T, D>[];\n\n}\n\n/*****************************************************************/\n\n/**\n * Defaults used when input jax isn't specified\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nclass DefaultInputJax<N, T, D> extends AbstractInputJax<N, T, D> {\n  /**\n   * @override\n   */\n  public compile(_math: MathItem<N, T, D>) {\n    return null as MmlNode;\n  }\n}\n\n/**\n * Defaults used when ouput jax isn't specified\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nclass DefaultOutputJax<N, T, D> extends AbstractOutputJax<N, T, D> {\n  /**\n   * @override\n   */\n  public typeset(_math: MathItem<N, T, D>, _document: MathDocument<N, T, D> = null) {\n    return null as N;\n  }\n  /**\n   * @override\n   */\n  public escaped(_math: MathItem<N, T, D>, _document?: MathDocument<N, T, D>) {\n    return null as N;\n  }\n}\n\n/**\n * Default for the MathList when one isn't specified\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nclass DefaultMathList<N, T, D> extends AbstractMathList<N, T, D> {}\n\n/**\n * Default for the Mathitem when one isn't specified\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nclass DefaultMathItem<N, T, D> extends AbstractMathItem<N, T, D> {}\n\n/*****************************************************************/\n/**\n *  Implements the abstract MathDocument class\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport abstract class AbstractMathDocument<N, T, D> implements MathDocument<N, T, D> {\n\n  /**\n   * The type of MathDocument\n   */\n  public static KIND: string = 'MathDocument';\n\n  /**\n   * The default options for the document\n   */\n  public static OPTIONS: OptionList = {\n    OutputJax: null,           // instance of an OutputJax for the document\n    InputJax: null,            // instance of an InputJax or an array of them\n    MmlFactory: null,          // instance of a MmlFactory for this document\n    MathList: DefaultMathList, // constructor for a MathList to use for the document\n    MathItem: DefaultMathItem, // constructor for a MathItem to use for the MathList\n    compileError: (doc: AbstractMathDocument<any, any, any>, math: MathItem<any, any, any>, err: Error) => {\n      doc.compileError(math, err);\n    },\n    typesetError: (doc: AbstractMathDocument<any, any, any>, math: MathItem<any, any, any>, err: Error) => {\n      doc.typesetError(math, err);\n    },\n    renderActions: expandable({\n      find:    [STATE.FINDMATH, 'findMath', '', false],\n      compile: [STATE.COMPILED],\n      metrics: [STATE.METRICS, 'getMetrics', '', false],\n      typeset: [STATE.TYPESET],\n      update:  [STATE.INSERTED, 'updateDocument', false]\n    }) as RenderActions<any, any, any>\n  };\n\n  /**\n   * A bit-field for the actions that have been processed\n   */\n  public static ProcessBits = BitFieldClass('findMath', 'compile', 'getMetrics', 'typeset', 'updateDocument');\n\n  /**\n   * The document managed by this MathDocument\n   */\n  public document: D;\n  /**\n   * The actual options for this document (with user-supplied ones merged in)\n   */\n  public options: OptionList;\n\n  /**\n   * The list of MathItems for this document\n   */\n  public math: MathList<N, T, D>;\n\n  /**\n   * The list of render actions\n   */\n  public renderActions: RenderList<N, T, D>;\n\n  /**\n   * The bit-field used to tell what steps have been taken on the document (for retries)\n   */\n  public processed: BitField;\n\n  /**\n   * The list of input jax for the document\n   */\n  public inputJax: InputJax<N, T, D>[];\n\n  /**\n   * The output jax for the document\n   */\n  public outputJax: OutputJax<N, T, D>;\n\n  /**\n   * The DOM adaptor for the document\n   */\n  public adaptor: DOMAdaptor<N, T, D>;\n\n  /**\n   * The MathML node factory for the internal MathML representation\n   */\n  public mmlFactory: MmlFactory;\n\n\n  /**\n   * @param {any} document           The document (HTML string, parsed DOM, etc.) to be processed\n   * @param {DOMAdaptor} adaptor     The DOM adaptor for this document\n   * @param {OptionList} options     The options for this document\n   * @constructor\n   */\n  constructor (document: D, adaptor: DOMAdaptor<N, T, D>, options: OptionList) {\n    let CLASS = this.constructor as typeof AbstractMathDocument;\n    this.document = document;\n    this.options = userOptions(defaultOptions({}, CLASS.OPTIONS), options);\n    this.math = new (this.options['MathList'] || DefaultMathList)();\n    this.renderActions = RenderList.create<N, T, D>(this.options['renderActions']);\n    this.processed = new AbstractMathDocument.ProcessBits();\n    this.outputJax = this.options['OutputJax'] || new DefaultOutputJax<N, T, D>();\n    let inputJax = this.options['InputJax'] || [new DefaultInputJax<N, T, D>()];\n    if (!Array.isArray(inputJax)) {\n      inputJax = [inputJax];\n    }\n    this.inputJax = inputJax;\n    //\n    // Pass the DOM adaptor to the jax\n    //\n    this.adaptor = adaptor;\n    this.outputJax.setAdaptor(adaptor);\n    this.inputJax.map(jax => jax.setAdaptor(adaptor));\n    //\n    // Pass the MmlFactory to the jax\n    //\n    this.mmlFactory = this.options['MmlFactory'] || new MmlFactory();\n    this.inputJax.map(jax => jax.setMmlFactory(this.mmlFactory));\n    //\n    // Do any initialization that requires adaptors or factories\n    //\n    this.outputJax.initialize();\n    this.inputJax.map(jax => jax.initialize());\n  }\n\n  /**\n   * @return {string}  The kind of document\n   */\n  public get kind(): string {\n    return (this.constructor as typeof AbstractMathDocument).KIND;\n  }\n\n  /**\n   * @override\n   */\n  public addRenderAction(id: string, ...action: any[]) {\n    const [fn, p] = RenderList.action<N, T, D>(id, action as RenderAction<N, T, D>);\n    this.renderActions.add(fn, p);\n  }\n\n  /**\n   * @override\n   */\n  public removeRenderAction(id: string) {\n    const action = this.renderActions.findID(id);\n    if (action) {\n      this.renderActions.remove(action);\n    }\n  }\n\n  /**\n   * @override\n   */\n  public render() {\n    this.renderActions.renderDoc(this);\n    return this;\n  }\n\n  /**\n   * @override\n   */\n  public rerender(start: number = STATE.RERENDER) {\n    this.state(start - 1);\n    this.render();\n    return this;\n  }\n\n  /**\n   * @override\n   */\n  public convert(math: string, options: OptionList = {}) {\n    let {format, display, end, ex, em, containerWidth, lineWidth, scale, family} = userOptions({\n      format: this.inputJax[0].name, display: true, end: STATE.LAST,\n      em: 16, ex: 8, containerWidth: null, lineWidth: 1000000, scale: 1, family: ''\n    }, options);\n    if (containerWidth === null) {\n      containerWidth = 80 * ex;\n    }\n    const jax = this.inputJax.reduce((jax, ijax) => (ijax.name === format ? ijax : jax), null);\n    const mitem = new this.options.MathItem(math, jax, display);\n    mitem.start.node = this.adaptor.body(this.document);\n    mitem.setMetrics(em, ex, containerWidth, lineWidth, scale);\n    if (this.outputJax.options.mtextInheritFont) {\n      mitem.outputData.mtextFamily = family;\n    }\n    if (this.outputJax.options.merrorInheritFont) {\n      mitem.outputData.merrorFamily = family;\n    }\n    mitem.convert(this, end);\n    return (mitem.typesetRoot || mitem.root);\n  }\n\n  /**\n   * @override\n   */\n  public findMath(_options: OptionList = null) {\n    this.processed.set('findMath');\n    return this;\n  }\n\n  /**\n   * @override\n   */\n  public compile() {\n    if (!this.processed.isSet('compile')) {\n      //\n      //  Compile all the math in the list\n      //\n      const recompile = [];\n      for (const math of this.math) {\n        this.compileMath(math);\n        if (math.inputData.recompile !== undefined) {\n          recompile.push(math);\n        }\n      }\n      //\n      //  If any were added to the recompile list,\n      //    compile them again\n      //\n      for (const math of recompile) {\n        const data = math.inputData.recompile;\n        math.state(data.state);\n        math.inputData.recompile = data;\n        this.compileMath(math);\n      }\n      this.processed.set('compile');\n    }\n    return this;\n  }\n\n  /**\n   * @param {MathItem} math   The item to compile\n   */\n  protected compileMath(math: MathItem<N, T, D>) {\n    try {\n      math.compile(this);\n    } catch (err) {\n      if (err.retry || err.restart) {\n        throw err;\n      }\n      this.options['compileError'](this, math, err);\n      math.inputData['error'] = err;\n    }\n  }\n\n  /**\n   * Produce an error using MmlNodes\n   *\n   * @param {MathItem} math  The MathItem producing the error\n   * @param {Error} err      The Error object for the error\n   */\n  public compileError(math: MathItem<N, T, D>, err: Error) {\n    math.root = this.mmlFactory.create('math', null, [\n      this.mmlFactory.create('merror', {'data-mjx-error': err.message, title: err.message}, [\n        this.mmlFactory.create('mtext', null, [\n          (this.mmlFactory.create('text') as TextNode).setText('Math input error')\n        ])\n      ])\n    ]);\n    if (math.display) {\n      math.root.attributes.set('display', 'block');\n    }\n    math.inputData.error = err.message;\n  }\n\n  /**\n   * @override\n   */\n  public typeset() {\n    if (!this.processed.isSet('typeset')) {\n      for (const math of this.math) {\n        try {\n          math.typeset(this);\n        } catch (err) {\n          if (err.retry || err.restart) {\n            throw err;\n          }\n          this.options['typesetError'](this, math, err);\n          math.outputData['error'] = err;\n        }\n      }\n      this.processed.set('typeset');\n    }\n    return this;\n  }\n\n  /**\n   * Produce an error using HTML\n   *\n   * @param {MathItem} math  The MathItem producing the error\n   * @param {Error} err      The Error object for the error\n   */\n  public typesetError(math: MathItem<N, T, D>, err: Error) {\n    math.typesetRoot = this.adaptor.node('mjx-container', {\n      class: 'MathJax mjx-output-error',\n      jax: this.outputJax.name,\n    }, [\n      this.adaptor.node('span', {\n        'data-mjx-error': err.message,\n        title: err.message,\n        style: {\n          color: 'red',\n          'background-color': 'yellow',\n          'line-height': 'normal'\n        }\n      }, [\n        this.adaptor.text('Math output error')\n      ])\n    ]);\n    if (math.display) {\n      this.adaptor.setAttributes(math.typesetRoot, {\n        style: {\n          display: 'block',\n          margin: '1em 0',\n          'text-align': 'center'\n        }\n      });\n    }\n    math.outputData.error = err.message;\n  }\n\n  /**\n   * @override\n   */\n  public getMetrics() {\n    if (!this.processed.isSet('getMetrics')) {\n      this.outputJax.getMetrics(this);\n      this.processed.set('getMetrics');\n    }\n    return this;\n  }\n\n  /**\n   * @override\n   */\n  public updateDocument() {\n    if (!this.processed.isSet('updateDocument')) {\n      for (const math of this.math.reversed()) {\n        math.updateDocument(this);\n      }\n      this.processed.set('updateDocument');\n    }\n    return this;\n  }\n\n  /**\n   * @override\n   */\n  public removeFromDocument(_restore: boolean = false) {\n    return this;\n  }\n\n  /**\n   * @override\n   */\n  public state(state: number, restore: boolean = false) {\n    for (const math of this.math) {\n      math.state(state, restore);\n    }\n    if (state < STATE.INSERTED) {\n      this.processed.clear('updateDocument');\n    }\n    if (state < STATE.TYPESET) {\n      this.processed.clear('typeset');\n      this.processed.clear('getMetrics');\n    }\n    if (state < STATE.COMPILED) {\n      this.processed.clear('compile');\n    }\n    return this;\n  }\n\n  /**\n   * @override\n   */\n  public reset(options: ResetList = {processed: true}) {\n    options = userOptions(Object.assign({}, resetOptions), options);\n    options.all && Object.assign(options, resetAllOptions);\n    options.processed && this.processed.reset();\n    options.inputJax && this.inputJax.forEach(jax => jax.reset(...options.inputJax));\n    options.outputJax && this.outputJax.reset(...options.outputJax);\n    return this;\n  }\n\n  /**\n   * @override\n   */\n  public clear() {\n    this.reset();\n    this.math.clear();\n    return this;\n  }\n\n  /**\n   * @override\n   */\n  public concat(list: MathList<N, T, D>) {\n    this.math.merge(list);\n    return this;\n  }\n\n  /**\n   * @override\n   */\n  public clearMathItemsWithin(containers: ContainerList<N>) {\n    const items = this.getMathItemsWithin(containers);\n    this.math.remove(...items);\n    return items;\n  }\n\n  /**\n   * @override\n   */\n  public getMathItemsWithin(elements: ContainerList<N>) {\n    if (!Array.isArray(elements)) {\n      elements = [elements];\n    }\n    const adaptor = this.adaptor;\n    const items = [] as MathItem<N, T, D>[];\n    const containers = adaptor.getElements(elements, this.document);\n    ITEMS:\n    for (const item of this.math) {\n      for (const container of containers) {\n        if (item.start.node && adaptor.contains(container, item.start.node)) {\n          items.push(item);\n          continue ITEMS;\n        }\n      }\n    }\n    return items;\n  }\n\n}\n\n/**\n * The constructor type for a MathDocument\n *\n * @template D    The MathDocument type this constructor is for\n */\nexport interface MathDocumentConstructor<D extends MathDocument<any, any, any>> {\n  KIND: string;\n  OPTIONS: OptionList;\n  ProcessBits: typeof BitField;\n  new (...args: any[]): D;\n}\n","/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the interface and abstract class for MathList objects\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {LinkedList} from '../util/LinkedList.js';\nimport {MathItem} from './MathItem.js';\n\n/*****************************************************************/\n/**\n *  The MathList interface (extends LinkedList<MathItem>)\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport interface MathList<N, T, D> extends LinkedList<MathItem<N, T, D>> {\n  /**\n   * Test if one math item is before the other in the document (a < b)\n   *\n   * @param {MathItem} a   The first MathItem\n   * @param {MathItem} b   The second MathItem\n   */\n  isBefore(a: MathItem<N, T, D>, b: MathItem<N, T, D>): boolean;\n}\n\n/*****************************************************************/\n/**\n *  The MathList abstract class (extends LinkedList<MathItem>)\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport abstract class AbstractMathList<N, T, D> extends\nLinkedList<MathItem<N, T, D>> implements MathList<N, T, D> {\n\n  /**\n   * @override\n   */\n  public isBefore(a: MathItem<N, T, D>, b: MathItem<N, T, D>) {\n    return (a.start.i < b.start.i || (a.start.i === b.start.i && a.start.n < b.start.n));\n  }\n\n}\n","/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the interface and abstract class for the OutputJax\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {userOptions, defaultOptions, OptionList} from '../util/Options.js';\nimport {MathDocument} from './MathDocument.js';\nimport {MathItem} from './MathItem.js';\nimport {DOMAdaptor} from '../core/DOMAdaptor.js';\nimport {FunctionList} from '../util/FunctionList.js';\n\n/*****************************************************************/\n/**\n *  The OutputJax interface\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport interface OutputJax<N, T, D> {\n  /**\n   * The name of this output jax class\n   */\n  name: string;\n\n  /**\n   * The options for the instance\n   */\n  options: OptionList;\n\n  /**\n   * Lists of post-filters to call after typesetting the math\n   */\n  postFilters: FunctionList;\n\n  /**\n   * The DOM adaptor for managing HTML elements\n   */\n  adaptor: DOMAdaptor<N, T, D>;\n\n  /**\n   * @param {DOMAdaptor} adaptor The adaptor to use in this jax\n   */\n  setAdaptor(adaptor: DOMAdaptor<N, T, D>): void;\n\n  /**\n   * Do any initialization that depends on the document being set up\n   */\n  initialize(): void;\n\n  /**\n   * Reset any needed features of the output jax\n   *\n   * @param {any[]} args   The arguments needed by the reset operation\n   */\n  reset(...args: any[]): void;\n\n  /**\n   * Typset a given MathItem\n   *\n   * @param {MathItem} math          The MathItem to be typeset\n   * @param {MathDocument} document  The MathDocument in which the typesetting should occur\n   * @return {N}                     The DOM tree for the typeset math\n   */\n  typeset(math: MathItem<N, T, D>, document?: MathDocument<N, T, D>): N;\n\n  /**\n   * Handle an escaped character (e.g., \\$ from the TeX input jax preventing it from being a delimiter)\n   *\n   * @param {MathItem} math          The MathItem to be escaped\n   * @param {MathDocument} document  The MathDocument in which the math occurs\n   * @return {N}                     The DOM tree for the escaped item\n   */\n  escaped(math: MathItem<N, T, D>, document?: MathDocument<N, T, D>): N;\n\n  /**\n   * Get the metric information for all math in the given document\n   *\n   * @param {MathDocument} document  The MathDocument being processed\n   */\n  getMetrics(document: MathDocument<N, T, D>): void;\n\n  /**\n   * Produce the stylesheet needed for this output jax\n   *\n   * @param {MathDocument} document  The MathDocument being processed\n   */\n  styleSheet(document: MathDocument<N, T, D>): N;\n\n  /**\n   * Produce any page-specific elements needed for this output jax\n   *\n   * @param {MathDocument} document  The MathDocument being processed\n   */\n  pageElements(document: MathDocument<N, T, D>): N;\n}\n\n\n/*****************************************************************/\n/**\n *  The OutputJax abstract class\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport abstract class AbstractOutputJax<N, T, D> implements OutputJax<N, T, D> {\n\n  /**\n   * The name for the output jax\n   */\n  public static NAME: string = 'generic';\n\n  /**\n   * The default options for the output jax\n   */\n  public static OPTIONS: OptionList = {};\n\n  /**\n   * The actual options supplied to the output jax\n   */\n  public options: OptionList;\n\n  /**\n   * Filters to run after the output is processed\n   */\n  public postFilters: FunctionList;\n\n  /**\n   * The MathDocument's DOMAdaptor\n   */\n  public adaptor: DOMAdaptor<N, T, D> = null;  // set by the handler\n\n  /**\n   * @param {OptionList} options  The options for this instance\n   */\n  constructor(options: OptionList = {}) {\n    let CLASS = this.constructor as typeof AbstractOutputJax;\n    this.options = userOptions(defaultOptions({}, CLASS.OPTIONS), options);\n    this.postFilters = new FunctionList();\n  }\n\n  /**\n   * @return {string}  The name for this output jax class\n   */\n  public get name(): string {\n    return (this.constructor as typeof AbstractOutputJax).NAME;\n  }\n\n  /**\n   * @override\n   */\n  public setAdaptor(adaptor: DOMAdaptor<N, T, D>) {\n    this.adaptor = adaptor;\n  }\n\n  /**\n   * @override\n   */\n  public initialize() {\n  }\n\n  /**\n   * @override\n   */\n  public reset(..._args: any[]) {\n  }\n\n  /**\n   * @override\n   */\n  public abstract typeset(math: MathItem<N, T, D>, document?: MathDocument<N, T, D>): N;\n\n  /**\n   * @override\n   */\n  public abstract escaped(math: MathItem<N, T, D>, document?: MathDocument<N, T, D>): N;\n\n  /**\n   * @override\n   */\n  public getMetrics(_document: MathDocument<N, T, D>) {\n  }\n\n  /**\n   * @override\n   */\n  public styleSheet(_document: MathDocument<N, T, D>) {\n    return null as N;\n  }\n\n  /**\n   * @override\n   */\n  public pageElements(_document: MathDocument<N, T, D>) {\n    return null as N;\n  }\n\n  /**\n   * Execute a set of filters, passing them the MathItem and any needed data,\n   *  and return the (possibly modified) data\n   *\n   * @param {FunctionList} filters   The list of functions to be performed\n   * @param {MathItem} math          The math item that is being processed\n   * @param {MathDocument} document  The math document contaiing the math item\n   * @param {any} data               Whatever other data is needed\n   * @return {any}                   The (possibly modified) data\n   */\n  protected executeFilters(\n    filters: FunctionList, math: MathItem<N, T, D>,\n    document: MathDocument<N, T, D>, data: any\n  ): any {\n    let args = {math, document, data};\n    filters.execute(args);\n    return args.data;\n  }\n\n}\n","/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the HTMLDocument class\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {AbstractMathDocument} from '../../core/MathDocument.js';\nimport {userOptions, separateOptions, OptionList, expandable} from '../../util/Options.js';\nimport {HTMLMathItem} from './HTMLMathItem.js';\nimport {HTMLMathList} from './HTMLMathList.js';\nimport {HTMLDomStrings} from './HTMLDomStrings.js';\nimport {DOMAdaptor} from '../../core/DOMAdaptor.js';\nimport {InputJax} from '../../core/InputJax.js';\nimport {STATE, ProtoItem, Location} from '../../core/MathItem.js';\nimport {StyleList} from '../../util/StyleList.js';\n\n/*****************************************************************/\n/**\n * List of Lists of pairs consisting of a DOM node and its text length\n *\n * These represent the Text elements that make up a single\n * string in the list of strings to be searched for math\n * (multiple consecutive Text nodes can form a single string).\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n */\nexport type HTMLNodeArray<N, T> = [N | T, number][][];\n\n/*****************************************************************/\n/**\n *  The HTMLDocument class (extends AbstractMathDocument)\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport class HTMLDocument<N, T, D> extends AbstractMathDocument<N, T, D> {\n\n  /**\n   * The kind of document\n   */\n  public static KIND: string = 'HTML';\n\n  /**\n   * The default options for HTMLDocument\n   */\n  public static OPTIONS: OptionList = {\n    ...AbstractMathDocument.OPTIONS,\n    renderActions: expandable({\n      ...AbstractMathDocument.OPTIONS.renderActions,\n      styles: [STATE.INSERTED + 1, '', 'updateStyleSheet', false]  // update styles on a rerender() call\n    }),\n    MathList: HTMLMathList,           // Use the HTMLMathList for MathLists\n    MathItem: HTMLMathItem,           // Use the HTMLMathItem for MathItem\n    DomStrings: null                  // Use the default DomString parser\n  };\n\n  /**\n   * Extra styles to be included in the document's stylesheet (added by extensions)\n   */\n  protected styles: StyleList[];\n\n  /**\n   * The DomString parser for locating the text in DOM trees\n   */\n  public domStrings: HTMLDomStrings<N, T, D>;\n\n  /**\n   * @override\n   * @constructor\n   * @extends {AbstractMathDocument}\n   */\n  constructor(document: any, adaptor: DOMAdaptor<N, T, D>, options: OptionList) {\n    let [html, dom] = separateOptions(options, HTMLDomStrings.OPTIONS);\n    super(document, adaptor, html);\n    this.domStrings = this.options['DomStrings'] || new HTMLDomStrings<N, T, D>(dom);\n    this.domStrings.adaptor = adaptor;\n    this.styles = [];\n  }\n\n  /**\n   * Creates a Location object for a delimiter at the position given by index in the N's string\n   *  of the array of strings searched for math, recovering the original DOM node where the delimiter\n   *  was found.\n   *\n   * @param {number} N             The index of the string in the string array\n   * @param {number} index         The position within the N's string that needs to be found\n   * @param {string} delim         The delimiter for this position\n   * @param {HTMLNodeArray} nodes  The list of node lists representing the string array\n   * @return {Location}            The Location object for the position of the delimiter in the document\n   */\n  protected findPosition(N: number, index: number, delim: string, nodes: HTMLNodeArray<N, T>): Location<N, T> {\n    const adaptor = this.adaptor;\n    for (const list of nodes[N]) {\n      let [node, n] = list;\n      if (index <= n && adaptor.kind(node) === '#text') {\n        return {node: node, n: Math.max(index, 0), delim: delim};\n      }\n      index -= n;\n    }\n    return {node: null, n: 0, delim: delim};\n  }\n\n  /**\n   * Convert a ProtoItem to a MathItem (i.e., determine the actual Location\n   *  objects for its start and end)\n   *\n   * @param {ProtoItem} item       The proto math item to turn into an actual MathItem\n   * @param {InputJax} jax         The input jax to use for the MathItem\n   * @param {HTMLNodeArray} nodes  The array of node lists that produced the string array\n   * @return {HTMLMathItem}        The MathItem for the given proto item\n   */\n  protected mathItem(item: ProtoItem<N, T>, jax: InputJax<N, T, D>,\n                     nodes: HTMLNodeArray<N, T>): HTMLMathItem<N, T, D> {\n                       let math = item.math;\n                       let start = this.findPosition(item.n, item.start.n, item.open, nodes);\n                       let end = this.findPosition(item.n, item.end.n, item.close, nodes);\n                       return new this.options.MathItem(math, jax, item.display, start, end) as HTMLMathItem<N, T, D>;\n                     }\n\n  /**\n   * Find math within the document:\n   *  Get the list of containers (default is document.body), and for each:\n   *    For each input jax:\n   *      Make a new MathList to store the located math\n   *      If the input jax processes strings:\n   *        If we haven't already made the string array and corresponding node list, do so\n   *        Ask the jax to find the math in the string array, and\n   *          for each one, push it onto the math list\n   *      Otherwise (the jax processes DOM nodes):\n   *        Ask the jax to find the math in the container, and\n   *          for each one, make the result into a MathItem, and push it on the list\n   *      Merge the new math list into the document's math list\n   *        (we use merge to maintain a sorted list of MathItems)\n   *\n   * @override\n   */\n  public findMath(options: OptionList) {\n    if (!this.processed.isSet('findMath')) {\n      this.adaptor.document = this.document;\n      options = userOptions({elements: this.options.elements || [this.adaptor.body(this.document)]}, options);\n      for (const container of this.adaptor.getElements(options['elements'], this.document)) {\n        let [strings, nodes] = [null, null] as [string[], HTMLNodeArray<N, T>];\n        for (const jax of this.inputJax) {\n          let list = new (this.options['MathList'])();\n          if (jax.processStrings) {\n            if (strings === null) {\n              [strings, nodes] = this.domStrings.find(container);\n            }\n            for (const math of jax.findMath(strings)) {\n              list.push(this.mathItem(math, jax, nodes));\n            }\n          } else {\n            for (const math of jax.findMath(container)) {\n              let item: HTMLMathItem<N, T, D> =\n                new this.options.MathItem(math.math, jax, math.display, math.start, math.end);\n              list.push(item);\n            }\n          }\n          this.math.merge(list);\n        }\n      }\n      this.processed.set('findMath');\n    }\n    return this;\n  }\n\n  /**\n   * @override\n   */\n  public updateDocument() {\n    if (!this.processed.isSet('updateDocument')) {\n      this.addPageElements();\n      this.addStyleSheet();\n      super.updateDocument();\n      this.processed.set('updateDocument');\n    }\n    return this;\n  }\n\n  /**\n   *  Add any elements needed for the document\n   */\n  protected addPageElements() {\n    const body = this.adaptor.body(this.document);\n    const node = this.documentPageElements();\n    if (node) {\n      this.adaptor.append(body, node);\n    }\n  }\n\n  /**\n   * Add the stylesheet to the document\n   */\n  public addStyleSheet() {\n    const sheet = this.documentStyleSheet();\n    const adaptor = this.adaptor;\n    if (sheet && !adaptor.parent(sheet)) {\n      const head = adaptor.head(this.document);\n      let styles = this.findSheet(head, adaptor.getAttribute(sheet, 'id'));\n      if (styles) {\n        adaptor.replace(sheet, styles);\n      } else {\n        adaptor.append(head, sheet);\n      }\n    }\n  }\n\n  /**\n   * @param {N} head     The document <head>\n   * @param {string} id  The id of the stylesheet to find\n   * @param {N|null}     The stylesheet with the given ID\n   */\n  protected findSheet(head: N, id: string) {\n    if (id) {\n      for (const sheet of this.adaptor.tags(head, 'style')) {\n        if (this.adaptor.getAttribute(sheet, 'id') === id) {\n          return sheet;\n        }\n      }\n    }\n    return null as N;\n  }\n\n  /**\n   * @override\n   */\n  public removeFromDocument(restore: boolean = false) {\n    if (this.processed.isSet('updateDocument')) {\n      for (const math of this.math) {\n        if (math.state() >= STATE.INSERTED) {\n          math.state(STATE.TYPESET, restore);\n        }\n      }\n    }\n    this.processed.clear('updateDocument');\n    return this;\n  }\n\n  /**\n   * @override\n   */\n  public documentStyleSheet() {\n    return this.outputJax.styleSheet(this);\n  }\n\n  /**\n   * @override\n   */\n  public documentPageElements() {\n    return this.outputJax.pageElements(this);\n  }\n\n  /**\n   * Add styles to be included in the document's stylesheet\n   *\n   * @param {StyleList} styles   The styles to include\n   */\n  public addStyles(styles: StyleList) {\n    this.styles.push(styles);\n  }\n\n  /**\n   * Get the array of document-specific styles\n   */\n  public getStyles() {\n    return this.styles;\n  }\n\n}\n","/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the HTMLDomStrings class\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {userOptions, defaultOptions, OptionList, makeArray} from '../../util/Options.js';\nimport {DOMAdaptor} from '../../core/DOMAdaptor.js';\n\n/**\n *  List of consecutive text nodes and their text lengths\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n */\nexport type HTMLNodeList<N, T> = [N | T, number][];\n\n/*****************************************************************/\n/**\n *  The HTMLDocument class (extends AbstractMathDocument)\n *\n *  A class for extracting the text from DOM trees\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport class HTMLDomStrings<N, T, D> {\n\n  /**\n   * The default options for string processing\n   */\n  public static OPTIONS: OptionList = {\n    skipHtmlTags: ['script', 'noscript', 'style', 'textarea', 'pre', 'code', 'annotation', 'annotation-xml'],\n                                        // The names of the tags whose contents will not be\n                                        // scanned for math delimiters\n\n    includeHtmlTags: {br: '\\n', wbr: '', '#comment': ''},\n                                        //  tags to be included in the text (and what\n                                        //  text to replace them with)\n\n    ignoreHtmlClass: 'mathjax_ignore',  // the class name of elements whose contents should\n                                        // NOT be processed by tex2jax.  Note that this\n                                        // is a regular expression, so be sure to quote any\n                                        // regexp special characters\n\n    processHtmlClass: 'mathjax_process' // the class name of elements whose contents SHOULD\n                                        // be processed when they appear inside ones that\n                                        // are ignored.  Note that this is a regular expression,\n                                        // so be sure to quote any regexp special characters\n  };\n\n  /**\n   * The options for this instance\n   */\n  protected options: OptionList;\n\n  /**\n   * The array of strings found in the DOM\n   */\n  protected strings: string[];\n\n  /**\n   * The string currently being constructed\n   */\n  protected string: string;\n\n  /**\n   * The list of nodes and lengths for the string being constructed\n   */\n  protected snodes: HTMLNodeList<N, T>;\n\n  /**\n   * The list of node lists corresponding to the strings in this.strings\n   */\n  protected nodes: HTMLNodeList<N, T>[];\n\n  /**\n   * The container nodes that are currently being traversed, and whether their\n   *  contents are being ignored or not\n   */\n  protected stack: [N | T, boolean][];\n\n  /**\n   * Regular expression for the tags to be skipped\n   *  processing of math\n   */\n  protected skipHtmlTags: RegExp;\n  /**\n   * Regular expression for which classes should stop processing of math\n   */\n  protected ignoreHtmlClass: RegExp;\n  /**\n   * Regular expression for which classes should start processing of math\n   */\n  protected processHtmlClass: RegExp;\n\n  /**\n   * The DOM Adaptor to managing HTML elements\n   */\n  public adaptor: DOMAdaptor<N, T, D>;\n\n  /**\n   * @param {OptionList} options  The user-supplied options\n   * @constructor\n   */\n  constructor(options: OptionList = null) {\n    let CLASS = this.constructor as typeof HTMLDomStrings;\n    this.options = userOptions(defaultOptions({}, CLASS.OPTIONS), options);\n    this.init();\n    this.getPatterns();\n  }\n\n  /**\n   * Set the initial values of the main properties\n   */\n  protected init() {\n    this.strings = [];\n    this.string = '';\n    this.snodes = [];\n    this.nodes = [];\n    this.stack = [];\n  }\n\n  /**\n   * Create the search patterns for skipHtmlTags, ignoreHtmlClass, and processHtmlClass\n   */\n  protected getPatterns() {\n    let skip = makeArray(this.options['skipHtmlTags']);\n    let ignore = makeArray(this.options['ignoreHtmlClass']);\n    let process = makeArray(this.options['processHtmlClass']);\n    this.skipHtmlTags = new RegExp('^(?:' + skip.join('|') + ')$', 'i');\n    this.ignoreHtmlClass = new RegExp('(?:^| )(?:' + ignore.join('|') + ')(?: |$)');\n    this.processHtmlClass = new RegExp('(?:^| )(?:' + process + ')(?: |$)');\n  }\n\n  /**\n   * Add a string to the string array and record its node list\n   */\n  protected pushString() {\n    if (this.string.match(/\\S/)) {\n      this.strings.push(this.string);\n      this.nodes.push(this.snodes);\n    }\n    this.string = '';\n    this.snodes = [];\n  }\n\n  /**\n   * Add more text to the current string, and record the\n   * node and its position in the string.\n   *\n   * @param {N|T} node        The node to be pushed\n   * @param {string} text   The text to be added (it may not be the actual text\n   *                         of the node, if it is one of the nodes that gets\n   *                         translated to text, like <br> to a newline).\n   */\n  protected extendString(node: N | T, text: string) {\n    this.snodes.push([node, text.length]);\n    this.string += text;\n  }\n\n  /**\n   * Handle a #text node (add its text to the current string)\n   *\n   * @param {T} node          The Text node to process\n   * @param {boolean} ignore  Whether we are currently ignoring content\n   * @return {N | T}          The next element to process\n   */\n  protected handleText(node: T, ignore: boolean): N | T {\n    if (!ignore) {\n      this.extendString(node, this.adaptor.value(node));\n    }\n    return this.adaptor.next(node);\n  }\n\n  /**\n   * Handle a BR, WBR, or #comment element (or others in the includeHtmlTags object).\n   *\n   * @param {N} node          The node to process\n   * @param {boolean} ignore  Whether we are currently ignoring content\n   * @return {N | T}          The next element to process\n   */\n  protected handleTag(node: N, ignore: boolean): N | T {\n    if (!ignore) {\n      let text = this.options['includeHtmlTags'][this.adaptor.kind(node)];\n      this.extendString(node, text);\n    }\n    return this.adaptor.next(node);\n  }\n\n  /**\n   * Handle an arbitrary DOM node:\n   *   Check the class to see if it matches the processHtmlClass regex\n   *   If the node has a child and is not marked as created by MathJax (data-MJX)\n   *       and either it is marked as restarting processing or is not a tag to be skipped, then\n   *     Save the next node (if there is one) and whether we are currently ignoring content\n   *     Move to the first child node\n   *     Update whether we are ignoring content\n   *   Otherwise\n   *     Move on to the next sibling\n   *   Return the next node to process and the ignore state\n   *\n   * @param {N} node               The node to process\n   * @param {boolean} ignore       Whether we are currently ignoring content\n   * @return {[N|T, boolean]}      The next element to process and whether to ignore its content\n   */\n  protected handleContainer(node: N, ignore: boolean): [N | T, boolean] {\n    this.pushString();\n    const cname = this.adaptor.getAttribute(node, 'class') || '';\n    const tname = this.adaptor.kind(node) || '';\n    const process = this.processHtmlClass.exec(cname);\n    let next = node as N | T;\n    if (this.adaptor.firstChild(node) && !this.adaptor.getAttribute(node, 'data-MJX') &&\n        (process || !this.skipHtmlTags.exec(tname))) {\n      if (this.adaptor.next(node)) {\n        this.stack.push([this.adaptor.next(node), ignore]);\n      }\n      next = this.adaptor.firstChild(node);\n      ignore = (ignore || this.ignoreHtmlClass.exec(cname)) && !process;\n    } else {\n      next = this.adaptor.next(node);\n    }\n    return [next, ignore];\n  }\n\n  /**\n   * Handle an unknown node type (nodeType other than 1, 3, 8)\n   *\n   * @param {N} node           The node to process\n   * @param {boolean} ignore   Whether we are currently ignoring content\n   * @return {N|T}             The next element to process\n   */\n  protected handleOther(node: N, _ignore: boolean): N | T {\n    this.pushString();\n    return this.adaptor.next(node);\n  }\n\n  /**\n   * Find the strings for a given DOM element:\n   *   Initialize the state\n   *   Get the element where we stop processing\n   *   While we still have a node, and it is not the one where we are to stop:\n   *     If it is a text node, handle it and get the next node\n   *     Otherwise, if it is in the includeHtmlTags list, handle it and get the next node\n   *     Otherwise, handle it as a container and get the next node and ignore status\n   *     If there is no next node, and there are more nodes on the stack:\n   *       Save the current string, and pop the node and ignore status from the stack\n   *   Push the final string\n   *   Get the string array and array of associated DOM nodes\n   *   Clear the internal values (so the memory can be freed)\n   *   Return the strings and node lists\n   *\n   * @param {N} node                       The node to search\n   * @return {[string[], HTMLNodeList[]]}  The array of strings and their associated lists of nodes\n   */\n  public find(node: N | T): [string[], HTMLNodeList<N, T>[]] {\n    this.init();\n    let stop = this.adaptor.next(node);\n    let ignore = false;\n    let include = this.options['includeHtmlTags'];\n\n    while (node && node !== stop) {\n      const kind = this.adaptor.kind(node);\n      if (kind === '#text') {\n        node = this.handleText(node as T, ignore);\n      } else if (include.hasOwnProperty(kind)) {\n        node = this.handleTag(node as N, ignore);\n      } else if (kind) {\n        [node, ignore] = this.handleContainer(node as N, ignore);\n      } else {\n        node = this.handleOther(node as N, ignore);\n      }\n      if (!node && this.stack.length) {\n        this.pushString();\n        [node, ignore] = this.stack.pop();\n      }\n    }\n\n    this.pushString();\n    let result = [this.strings, this.nodes] as [string[], HTMLNodeList<N, T>[]];\n    this.init(); // free up memory\n    return result;\n  }\n\n}\n","/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the HTMLHandler class\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {AbstractHandler} from '../../core/Handler.js';\nimport {MinHTMLAdaptor} from '../../adaptors/HTMLAdaptor.js';\nimport {HTMLDocument} from './HTMLDocument.js';\nimport {OptionList} from '../../util/Options.js';\n\n/*****************************************************************/\n/**\n *  Implements the HTMLHandler class (extends AbstractHandler)\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport class HTMLHandler<N, T, D> extends AbstractHandler<N, T, D> {\n\n  /**\n   * The DOMAdaptor for the document being handled\n   */\n  public adaptor: MinHTMLAdaptor<N, T, D>;  // declare a more specific adaptor type\n\n  /**\n   * @override\n   */\n  public documentClass = HTMLDocument;\n\n  /**\n   * @override\n   */\n  public handlesDocument(document: any) {\n    const adaptor = this.adaptor;\n    if (typeof(document) === 'string') {\n      try {\n        document = adaptor.parse(document, 'text/html');\n      } catch (err) {}\n    }\n    if (document instanceof adaptor.window.Document ||\n        document instanceof adaptor.window.HTMLElement ||\n        document instanceof adaptor.window.DocumentFragment) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * If the document isn't already a Document object, create one\n   * using the given data\n   *\n   * @override\n   */\n  public create(document: any, options: OptionList) {\n    const adaptor = this.adaptor;\n    if (typeof(document) === 'string') {\n      document = adaptor.parse(document, 'text/html');\n    } else if (document instanceof adaptor.window.HTMLElement ||\n               document instanceof adaptor.window.DocumentFragment) {\n      let child = document as N;\n      document = adaptor.parse('', 'text/html');\n      adaptor.append(adaptor.body(document), child);\n    }\n    return super.create(document, options) as HTMLDocument<N, T, D>;\n  }\n\n}\n","/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the HTMLMathItem class\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {AbstractMathItem, Location, STATE} from '../../core/MathItem.js';\nimport {InputJax} from '../../core/InputJax.js';\nimport {HTMLDocument} from './HTMLDocument.js';\n\n/*****************************************************************/\n/**\n *  Implements the HTMLMathItem class (extends AbstractMathItem)\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport class HTMLMathItem<N, T, D> extends AbstractMathItem<N, T, D> {\n\n  /**\n   * Easy access to DOM adaptor\n   */\n  get adaptor() {\n    return this.inputJax.adaptor;\n  }\n\n  /**\n   * @override\n   */\n  constructor(math: string, jax: InputJax<N, T, D>, display: boolean = true,\n              start: Location<N, T> = {node: null, n: 0, delim: ''},\n              end: Location<N, T> = {node: null, n: 0, delim: ''}) {\n    super(math, jax, display, start, end);\n  }\n\n  /**\n   * Insert the typeset MathItem into the document at the right location\n   *   If the starting and ending nodes are the same:\n   *     Split the text to isolate the math and its delimiters\n   *     Replace the math by the typeset version\n   *   Otherewise (spread over several nodes)\n   *     Split the start node, if needed\n   *     Remove nodes until we reach the end node\n   *     Insert the math before the end node\n   *     Split the end node, if needed\n   *     Remove the end node\n   *\n   * @override\n   */\n  public updateDocument(_html: HTMLDocument<N, T, D>) {\n    if (this.state() < STATE.INSERTED) {\n      if (this.inputJax.processStrings) {\n        let node = this.start.node as T;\n        if (node === this.end.node) {\n          if (this.end.n && this.end.n < this.adaptor.value(this.end.node).length) {\n            this.adaptor.split(this.end.node, this.end.n);\n          }\n          if (this.start.n) {\n            node = this.adaptor.split(this.start.node as T, this.start.n);\n          }\n          this.adaptor.replace(this.typesetRoot, node);\n        } else {\n          if (this.start.n) {\n            node = this.adaptor.split(node, this.start.n);\n          }\n          while (node !== this.end.node) {\n            let next = this.adaptor.next(node) as T;\n            this.adaptor.remove(node);\n            node = next;\n          }\n          this.adaptor.insert(this.typesetRoot, node);\n          if (this.end.n < this.adaptor.value(node).length) {\n            this.adaptor.split(node, this.end.n);\n          }\n          this.adaptor.remove(node);\n        }\n      } else {\n        this.adaptor.replace(this.typesetRoot, this.start.node);\n      }\n      this.start.node = this.end.node = this.typesetRoot;\n      this.start.n = this.end.n = 0;\n      this.state(STATE.INSERTED);\n    }\n  }\n\n  /**\n   * Update the style sheet for any changes due to rerendering\n   *\n   * @param {HTMLDocument} document   The document whose styles are to be updated\n   */\n  public updateStyleSheet(document: HTMLDocument<N, T, D>) {\n    document.addStyleSheet();\n  }\n\n  /**\n   * Remove the typeset math from the document, and put back the original\n   *  expression and its delimiters, if requested.\n   *\n   * @override\n   */\n  public removeFromDocument(restore: boolean = false) {\n    if (this.state() >= STATE.TYPESET) {\n      const adaptor = this.adaptor;\n      let node = this.start.node;\n      let math: N | T = adaptor.text('');\n      if (restore) {\n        let text = this.start.delim + this.math + this.end.delim;\n        if (this.inputJax.processStrings) {\n          math = adaptor.text(text);\n        } else {\n          const doc = adaptor.parse(text, 'text/html');\n          math = adaptor.firstChild(adaptor.body(doc));\n        }\n      }\n      if (adaptor.parent(node)) {\n        adaptor.replace(math, node);\n      }\n      this.start.node = this.end.node = math;\n      this.start.n = this.end.n = 0;\n    }\n  }\n\n}\n","/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the HTMLMathList object\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {AbstractMathList} from '../../core/MathList.js';\n\n/*****************************************************************/\n/**\n *  Implement the HTMLMathList class (extends AbstractMathList)\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport class HTMLMathList<N, T, D> extends AbstractMathList<N, T, D> {\n}\n","/*************************************************************\n *\n *  Copyright (c) 2018-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements bit-fields with extendable field names\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nexport class BitField {\n\n  /**\n   * The largest bit available\n   */\n  protected static MAXBIT = 1 << 31;\n\n  /**\n   * The next bit to be allocated\n   */\n  protected static next: number = 1;\n\n  /**\n   * The map of names to bit positions\n   */\n  protected static names: Map<string, number> = new Map();\n\n  /**\n   * The bits that are set\n   */\n  protected bits: number = 0;\n\n  /**\n   * @param {string} names    The names of the bit positions to reserve\n   */\n  public static allocate(...names: string[]) {\n    for (const name of names) {\n      if (this.has(name)) {\n        throw new Error('Bit already allocated for ' + name);\n      }\n      if (this.next === BitField.MAXBIT) {\n        throw new Error('Maximum number of bits already allocated');\n      }\n      this.names.set(name, this.next);\n      this.next <<= 1;\n    }\n  }\n\n  /**\n   * @param {string} name   The name of the bit to check for being defined\n   * @return {boolean}      True if the named bit is already allocated\n   */\n  public static has(name: string): boolean {\n    return this.names.has(name);\n  }\n\n  /**\n   * @param {string} name    The name of the bit position to set\n   */\n  public set(name: string) {\n    this.bits |= this.getBit(name);\n  }\n\n  /**\n   * @param {string} name    The name of the bit position to clear\n   */\n  public clear(name: string) {\n    this.bits &= ~this.getBit(name);\n  }\n\n  /**\n   * @param {string} name   The name of the bit to check if set\n   * @return {boolean}      True if the named bit is set\n   */\n  public isSet(name: string): boolean {\n    return !!(this.bits & this.getBit(name));\n  }\n\n  /**\n   * Clear all bits\n   */\n  public reset() {\n    this.bits = 0;\n  }\n\n  /**\n   * @param {string} name   The name whose bit position is needed (error if not defined)\n   * @return {number}       The position of the named bit\n   */\n  protected getBit(name: string): number {\n    const bit = (this.constructor as typeof BitField).names.get(name);\n    if (!bit) {\n      throw new Error('Unknown bit-field name: ' + name);\n    }\n    return bit;\n  }\n\n}\n\n/**\n * @param {string[]} names    The name of the positions to allocate initially\n * @return {typeof AbstractBitField}  The bit-field class with names allocated\n */\nexport function BitFieldClass(...names: string[]): typeof BitField {\n  const Bits = class extends BitField {};\n  Bits.allocate(...names);\n  return Bits;\n}\n","/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implement FunctionList object\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {PrioritizedList, PrioritizedListItem} from './PrioritizedList.js';\n\n/*****************************************************************/\n/**\n *  The FunctionListItem interface (extends PrioritizedListItem<Function>)\n */\n\nexport interface FunctionListItem extends PrioritizedListItem<Function> {}\n\n/*****************************************************************/\n/**\n *  Implements the FunctionList class (extends PrioritizedList<Function>)\n */\n\nexport class FunctionList extends PrioritizedList<Function> {\n\n  /**\n   * Executes the functions in the list (in prioritized order),\n   *   passing the given data to the functions.  If any return\n   *   false, the list is terminated.\n   *\n   * @param {any[]} data  The array of arguments to pass to the functions\n   * @return {boolean}    False if any function stopped the list by\n   *                       returning false, true otherwise\n   */\n  public execute(...data: any[]): boolean {\n    for (const item of this) {\n      let result = item.item(...data);\n      if (result === false) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Executes the functions in the list (in prioritized order) asynchronously,\n   *   passing the given data to the functions, and doing the next function\n   *   only when the previous one completes.  If the function returns a\n   *   Promise, then use that to control the flow.  Otherwise, if the\n   *   function returns false, the list is terminated.\n   * This function returns a Promise.  If any function in the list fails,\n   *   the promise fails.  If any function returns false, the promise\n   *   succeeds, but passes false as its argument.  Otherwise it succeeds\n   *   and passes true.\n   *\n   * @param {any[]} data  The array of arguments to pass to the functions\n   * @return {Promise}    The promise that is satisfied when the function\n   *                       list completes (with argument true or false\n   *                       depending on whether some function returned\n   *                       false or not).\n   */\n  public asyncExecute(...data: any[]): Promise<void> {\n    let i = -1;\n    let items = this.items;\n    return new Promise((ok: Function, fail: Function) => {\n      (function execute() {\n        while (++i < items.length) {\n          let result = items[i].item(...data);\n          if (result instanceof Promise) {\n            result.then(execute).catch(err => fail(err));\n            return;\n          }\n          if (result === false) {\n            ok(false);\n            return;\n          }\n        }\n        ok(true);\n      })();\n    });\n  }\n\n}\n","/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implement a generic LinkedList object.\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\n/*****************************************************************/\n/**\n *  A symbol used to mark the special node used to indicate\n *  the start and end of the list.\n */\nexport const END = Symbol();\n\n/**\n * Shorthand type for the functions used to sort the data items\n *\n * @template DataClass   The type of data stored in the list\n */\nexport type SortFn<DataClass> = (a: DataClass, b: DataClass) => boolean;\n\n/*****************************************************************/\n/**\n *  The ListItem interface (for a specific type of data item)\n *\n *  These are the items in the doubly-linked list.\n *\n * @template DataClass   The type of data stored in the list\n */\n\nexport class ListItem<DataClass> {\n  /**\n   * The data for the list item\n   */\n  public data: DataClass | symbol;\n\n  /**\n   * Pointers to the next item in the list\n   */\n  public next: ListItem<DataClass> = null;\n  /**\n   * Pointers to the previous item in the list\n   */\n  public prev: ListItem<DataClass> = null;\n\n  /**\n   * @param {any} data  The data to be stored in the list item\n   * @constructor\n   */\n  constructor(data: any = null) {\n    this.data = data;\n  }\n}\n\n/*****************************************************************/\n/**\n *  Implements the generic LinkedList class\n *\n * @template DataClass   The type of data stored in the list\n */\n\nexport class LinkedList<DataClass> {\n  /**\n   * The linked list\n   */\n  protected list: ListItem<DataClass>;\n\n  /**\n   *  This.list is a special ListItem whose next property\n   *    points to the head of the list and whose prev\n   *    property points to the tail.  This lets us relink\n   *    the head and tail items in the same way as any other\n   *    item in the list, without having to handle special\n   *    cases.\n   *\n   * @param {DataClass[]} args  The data items that form the initial list\n   * @constructor\n   */\n  constructor(...args: DataClass[]) {\n    this.list = new ListItem<DataClass>(END);\n    this.list.next = this.list.prev = this.list;\n    this.push(...args);\n  }\n\n  /**\n   *  Used for sorting and merging lists (Overridden by subclasses)\n   *\n   * @param {DataClass} a   The first item to compare\n   * @param {DataClass} b   The second item to compare\n   * @return {boolean}      True if a is before b, false otherwise\n   */\n  public isBefore(a: DataClass, b: DataClass): boolean {\n    return a < b;\n  }\n\n  /**\n   * Push items on the end of the list\n   *\n   * @param {DataClass[]} args   The list of data items to be pushed\n   * @return {LinkedList}        The LinkedList object (for chaining)\n   */\n  public push(...args: DataClass[]): LinkedList<DataClass> {\n    for (const data of args) {\n      let item = new ListItem<DataClass>(data);\n      item.next = this.list;\n      item.prev = this.list.prev;\n      this.list.prev = item;\n      item.prev.next = item;\n    }\n    return this;\n  }\n\n  /**\n   * Pop the end item off the list and return its data\n   *\n   * @return {DataClass}  The data from the last item in the list\n   */\n  public pop(): DataClass {\n    let item = this.list.prev;\n    if (item.data === END) {\n      return null;\n    }\n    this.list.prev = item.prev;\n    item.prev.next = this.list;\n    item.next = item.prev = null;\n    return item.data as DataClass;\n  }\n\n  /**\n   * Push items at the head of the list\n   *\n   * @param {DataClass[]} args   The list of data items to inserted\n   * @return {LinkedList}        The LinkedList object (for chaining)\n   */\n  public unshift(...args: DataClass[]): LinkedList<DataClass> {\n    for (const data of args.slice(0).reverse()) {\n      let item = new ListItem<DataClass>(data);\n      item.next = this.list.next;\n      item.prev = this.list;\n      this.list.next = item;\n      item.next.prev = item;\n    }\n    return this;\n  }\n\n  /**\n   * Remove an item from the head of the list and return its data\n   *\n   * @return {DataClass}  The data from the first item in the list\n   */\n  public shift(): DataClass {\n    let item = this.list.next;\n    if (item.data === END) {\n      return null;\n    }\n    this.list.next = item.next;\n    item.next.prev = this.list;\n    item.next = item.prev = null;\n    return item.data as DataClass;\n  }\n\n  /**\n   * Remove items from the list\n   *\n   * @param {DataClass[]} items   The items to remove\n   */\n  public remove(...items: DataClass[]) {\n    const map = new Map<DataClass, boolean>();\n    for (const item of items) {\n      map.set(item, true);\n    }\n    let item = this.list.next;\n    while (item.data !== END) {\n      const next = item.next;\n      if (map.has(item.data as DataClass)) {\n        item.prev.next = item.next;\n        item.next.prev = item.prev;\n        item.next = item.prev = null;\n      }\n      item = next;\n    }\n  }\n\n  /**\n   * Empty the list\n   *\n   * @return {LinkedList}  The LinkedList object (for chaining)\n   */\n  public clear(): LinkedList<DataClass> {\n    this.list.next.prev = this.list.prev.next = null;\n    this.list.next = this.list.prev = this.list;\n    return this;\n  }\n\n  /**\n   * An iterator for the list in forward order\n   *\n   * @yield {DataClass} The next item in the iteration sequence\n   */\n  public *[Symbol.iterator](): IterableIterator<DataClass> {\n    let current = this.list.next;\n\n    while (current.data !== END) {\n      yield current.data as DataClass;\n      current = current.next;\n    }\n  }\n\n  /**\n   * An iterator for the list in reverse order\n   *\n   * @yield {DataClass} The previous item in the iteration sequence\n   */\n  public *reversed(): IterableIterator<DataClass> {\n    let current = this.list.prev;\n\n    while (current.data !== END) {\n      yield current.data as DataClass;\n      current = current.prev;\n    }\n  }\n\n  /**\n   * Insert a new item into a sorted list in the correct locations\n   *\n   * @param {DataClass} data   The data item to add\n   * @param {SortFn} isBefore   The function used to order the data\n   * @param {LinkedList}        The LinkedList object (for chaining)\n   */\n  public insert(data: DataClass, isBefore: SortFn<DataClass> = null) {\n    if (isBefore === null) {\n      isBefore = this.isBefore.bind(this);\n    }\n    let item = new ListItem<DataClass>(data);\n    let cur = this.list.next;\n    while (cur.data !== END && isBefore(cur.data as DataClass, item.data as DataClass)) {\n      cur = cur.next;\n    }\n    item.prev = cur.prev;\n    item.next = cur;\n    cur.prev.next = cur.prev = item;\n    return this;\n  }\n\n  /**\n   * Sort the list using an optional sort function\n   *\n   * @param {SortFn} isBefore  The function used to order the data\n   * @return {LinkedList}      The LinkedList object (for chaining)\n   */\n  public sort(isBefore: SortFn<DataClass> = null): LinkedList<DataClass> {\n    if (isBefore === null) {\n      isBefore = this.isBefore.bind(this);\n    }\n    //\n    //  Make an array of singleton lists\n    //\n    let lists: LinkedList<DataClass>[] = [];\n    for (const item of this) {\n      lists.push(new LinkedList<DataClass>(item as DataClass));\n    }\n    //\n    //  Clear current list\n    //\n    this.list.next = this.list.prev = this.list;\n    //\n    //  Merge pairs of lists until there is only one left\n    //\n    while (lists.length > 1) {\n      let l1 = lists.shift();\n      let l2 = lists.shift();\n      l1.merge(l2, isBefore);\n      lists.push(l1);\n    }\n    //\n    //  Use the final list as our list\n    //\n    if (lists.length) {\n      this.list = lists[0].list;\n    }\n    return this;\n  }\n\n  /**\n   * Merge a sorted list with another sorted list\n   *\n   * @param {LinkedList} list  The list to merge into this instance's list\n   * @param {SortFn} isBefore  The function used to order the data\n   * @return {LinkedList}      The LinkedList instance (for chaining)\n   */\n  public merge(list: LinkedList<DataClass>, isBefore: SortFn<DataClass> = null): LinkedList<DataClass> {\n    if (isBefore === null) {\n      isBefore = this.isBefore.bind(this);\n    }\n    //\n    //  Get the head of each list\n    //\n    let lcur = this.list.next;\n    let mcur = list.list.next;\n    //\n    //  While there is more in both lists\n    //\n    while (lcur.data !== END && mcur.data !== END) {\n      //\n      //  If the merge item is before the list item\n      //    (we have found where the head of the merge list belongs)\n      //    Link the merge list into the main list at this point\n      //      and make the merge list be the remainder of the original list.\n      //    The merge continues by looking for where the rest of the original\n      //      list fits into the newly formed main list (the old merge list).\n      //  Otherwise\n      //    Go on to the next item in the main list\n      //\n      if (isBefore(mcur.data as DataClass, lcur.data as DataClass)) {\n        [mcur.prev.next, lcur.prev.next] = [lcur, mcur];\n        [mcur.prev, lcur.prev] = [lcur.prev, mcur.prev];\n        [this.list.prev.next, list.list.prev.next] = [list.list, this.list];\n        [this.list.prev, list.list.prev] = [list.list.prev, this.list.prev];\n        [lcur, mcur] = [mcur.next, lcur];\n      } else {\n        lcur = lcur.next;\n      }\n    }\n    //\n    //  If there is more to be merged (i.e., we came to the end of the main list),\n    //  then link that at the end of the main list.\n    //\n    if (mcur.data !== END) {\n      this.list.prev.next = list.list.next;\n      list.list.next.prev = this.list.prev;\n      list.list.prev.next = this.list;\n      this.list.prev = list.list.prev;\n      list.list.next = list.list.prev = list.list;\n    }\n    return this;\n  }\n}\n","/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements a list sorted by a numeric priority\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\n/*****************************************************************/\n/**\n *  The PrioritizedListItem<DataClass> interface\n *\n * @template DataClass   The class of data stored in the item\n */\n\nexport interface PrioritizedListItem<DataClass> {\n\n  /**\n   * The priority of this item\n   */\n  priority: number;\n\n  /**\n   * The data for the list item\n   */\n  item: DataClass;\n}\n\n/*****************************************************************/\n/**\n *  Implements the PrioritizedList<DataClass> class\n *\n * @template DataClass   The class of data stored in the list\n */\n\nexport class PrioritizedList<DataClass> {\n\n  /**\n   * The default priority for items added to the list\n   */\n  public static DEFAULTPRIORITY: number = 5;\n\n  /**\n   * The list of items, sorted by priority (smallest number first)\n   */\n  protected items: PrioritizedListItem<DataClass>[] = [];\n\n  /**\n   * @constructor\n   */\n  constructor() {\n    this.items = [];\n  }\n\n  /**\n   * Make the list iterable, and return the data for the items in the list\n   *\n   * @return {{next: Function}}  The object containing the iterator's next() function\n   */\n  public [Symbol.iterator](): Iterator<PrioritizedListItem<DataClass>> {\n    let i = 0;\n    let items = this.items;\n    return {\n      /* tslint:disable-next-line:jsdoc-require */\n      next(): IteratorResult<PrioritizedListItem<DataClass>> {\n        return {value: items[i++], done: (i > items.length)};\n      }\n    };\n  }\n\n  /**\n   * Add an item to the list\n   *\n   * @param {DataClass} item   The data for the item to be added\n   * @param {number} priority  The priority for the item\n   * @return {DataClass}       The data itself\n   */\n  public add(item: DataClass, priority: number = PrioritizedList.DEFAULTPRIORITY): DataClass {\n    let i = this.items.length;\n    do {\n      i--;\n    } while (i >= 0 && priority < this.items[i].priority);\n    this.items.splice(i + 1, 0, {item: item, priority: priority});\n    return item;\n  }\n\n  /**\n   * Remove an item from the list\n   *\n   * @param {DataClass} item   The data for the item to be removed\n   */\n  public remove(item: DataClass) {\n    let i = this.items.length;\n    do {\n      i--;\n    } while (i >= 0 && this.items[i].item !== item);\n    if (i >= 0) {\n      this.items.splice(i, 1);\n    }\n  }\n}\n"],"names":["AbstractMathDocument","adaptor","priority","documentClass","DefaultMathDocument","this","constructor","NAME","handlesDocument","_document","create","document","options","AbstractHandler","mmlFactory","CLASS","userOptions","defaultOptions","OPTIONS","preFilters","FunctionList","postFilters","setAdaptor","setMmlFactory","initialize","reset","findMath","_node","_options","executeFilters","filters","math","data","args","execute","AbstractInputJax","actions","list","Object","keys","id","action","add","renderDoc","renderMath","convert","length","methodActions","slice","method1","method2","start","STATE","UNPROCESSED","items","item","renderConvert","end","LAST","findID","PrioritizedList","RenderList","resetOptions","all","processed","inputJax","outputJax","resetAllOptions","compile","_math","typeset","escaped","AbstractOutputJax","AbstractMathList","AbstractMathItem","DefaultMathList","renderActions","ProcessBits","DefaultOutputJax","DefaultInputJax","Array","isArray","map","jax","MmlFactory","KIND","addRenderAction","fn","p","removeRenderAction","remove","render","rerender","RERENDER","state","format","name","display","em","ex","containerWidth","lineWidth","scale","family","reduce","ijax","mitem","MathItem","node","body","setMetrics","mtextInheritFont","outputData","mtextFamily","merrorInheritFont","merrorFamily","typesetRoot","root","set","isSet","recompile","compileMath","undefined","inputData","push","err","retry","restart","compileError","message","title","setText","attributes","error","typesetError","class","style","color","text","setAttributes","margin","getMetrics","updateDocument","reversed","removeFromDocument","_restore","restore","INSERTED","clear","TYPESET","COMPILED","assign","forEach","concat","merge","clearMathItemsWithin","containers","getMathItemsWithin","elements","getElements","ITEMS","container","contains","OutputJax","InputJax","MathList","DefaultMathItem","doc","expandable","find","FINDMATH","metrics","METRICS","update","BitFieldClass","isBefore","a","b","i","n","LinkedList","styleSheet","pageElements","separateOptions","HTMLDomStrings","html","dom","domStrings","styles","findPosition","N","index","delim","nodes","kind","Math","max","mathItem","open","close","strings","processStrings","addPageElements","addStyleSheet","documentPageElements","append","sheet","documentStyleSheet","parent","head","findSheet","getAttribute","replace","tags","addStyles","getStyles","HTMLMathList","HTMLMathItem","DomStrings","HTMLDocument","init","getPatterns","string","snodes","stack","skip","makeArray","ignore","process","skipHtmlTags","RegExp","join","ignoreHtmlClass","processHtmlClass","pushString","match","extendString","handleText","value","next","handleTag","handleContainer","cname","tname","exec","firstChild","handleOther","_ignore","stop","include","hasOwnProperty","pop","result","includeHtmlTags","br","wbr","parse","window","Document","HTMLElement","DocumentFragment","child","HTMLHandler","_html","split","insert","updateStyleSheet","bits","allocate","names","has","Error","BitField","MAXBIT","getBit","bit","get","Map","Bits","asyncExecute","Promise","ok","fail","then","catch","END","Symbol","prev","ListItem","unshift","reverse","shift","iterator","current","bind","cur","sort","lists","l1","l2","lcur","mcur","done","DEFAULTPRIORITY","splice"],"sourceRoot":""}