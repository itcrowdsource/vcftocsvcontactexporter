{"version":3,"file":"4637.nbdime.js","mappings":"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","sources":["webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/core/MathItem.ts","webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/core/MmlTree/MmlNodes/TeXAtom.ts","webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/core/MmlTree/MmlNodes/maction.ts","webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/core/MmlTree/MmlNodes/math.ts","webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/core/MmlTree/MmlNodes/menclose.ts","webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/core/MmlTree/MmlNodes/mfenced.ts","webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/core/MmlTree/MmlNodes/mfrac.ts","webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/core/MmlTree/MmlNodes/mglyph.ts","webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/core/MmlTree/MmlNodes/mi.ts","webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/core/MmlTree/MmlNodes/mmultiscripts.ts","webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/core/MmlTree/MmlNodes/mn.ts","webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/core/MmlTree/MmlNodes/mpadded.ts","webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/core/MmlTree/MmlNodes/mroot.ts","webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/core/MmlTree/MmlNodes/mrow.ts","webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/core/MmlTree/MmlNodes/ms.ts","webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/core/MmlTree/MmlNodes/mspace.ts","webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/core/MmlTree/MmlNodes/msqrt.ts","webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/core/MmlTree/MmlNodes/msubsup.ts","webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/core/MmlTree/MmlNodes/mtable.ts","webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/core/MmlTree/MmlNodes/mtd.ts","webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/core/MmlTree/MmlNodes/mtext.ts","webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/core/MmlTree/MmlNodes/mtr.ts","webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/core/MmlTree/MmlNodes/munderover.ts","webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/core/MmlTree/MmlNodes/semantics.ts","webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/core/Tree/Factory.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the interface and abstract class for MathItem objects\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {MathDocument} from './MathDocument.js';\nimport {InputJax} from './InputJax.js';\nimport {OptionList} from '../util/Options.js';\nimport {MmlNode} from './MmlTree/MmlNode.js';\n\n/*****************************************************************/\n/**\n *  The Location gives a location of a position in a document\n *  (either a node and character position within it, or\n *  an index into a string array, the character position within\n *  the string, and the delimiter at that location).\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n */\nexport type Location<N, T> = {\n  i?: number;\n  n?: number;\n  delim?: string;\n  node?: N | T;\n};\n\n/*****************************************************************/\n/**\n *  The Metrics object includes the data needed to typeset\n *  a MathItem.\n */\nexport type Metrics = {\n  em: number;\n  ex: number;\n  containerWidth: number;\n  lineWidth: number;\n  scale: number;\n};\n\n/*****************************************************************/\n/**\n *  The MathItem interface\n *\n *  The MathItem is the object that holds the information about a\n *  particular expression on the page, including pointers to\n *  where it is in the document, its compiled version (in the\n *  internal format), its typeset version, its bounding box,\n *  and so on.\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport interface MathItem<N, T, D> {\n  /**\n   * The string representing the expression to be processed\n   */\n  math: string;\n\n  /**\n   * The input jax used to process the math\n   */\n  inputJax: InputJax<N, T, D>;\n\n  /**\n   * Whether the math is in display mode or inline mode\n   */\n  display: boolean;\n\n  /**\n   * Whether this item is an escaped character or not\n   */\n  isEscaped: boolean;\n\n  /**\n   * The start and ending locations in the document of\n   *   this expression\n   */\n  start: Location<N, T>;\n  end: Location<N, T>;\n\n  /**\n   * The internal format for this expression (once compiled)\n   */\n  root: MmlNode;\n\n  /**\n   * The typeset version of the expression (once typeset)\n   */\n  typesetRoot: N;\n\n  /**\n   * The metric information at the location of the math\n   * (the em-size, scaling factor, etc.)\n   */\n  metrics: Metrics;\n\n  /**\n   * Extra data needed by the input or output jax, as needed\n   */\n  inputData: OptionList;\n  outputData: OptionList;\n\n  /**\n   * Perform the renderActions on the document\n   *\n   * @param {MathDocument} document  The MathDocument in which the math resides\n   */\n  render(document: MathDocument<N, T, D>): void;\n\n  /**\n   * Rerenders an already rendered item and inserts it into the document\n   *\n   * @param {MathDocument} document  The MathDocument in which the math resides\n   * @param {number=} start          The state to start rerendering at (default = RERENDER)\n   */\n  rerender(document: MathDocument<N, T, D>, start?: number): void;\n\n  /**\n   * Converts the expression by calling the render actions until the state matches the end state\n   *\n   * @param {MathDocument} document  The MathDocument in which the math resides\n   * @param {number=} end            The state to end rerendering at (default = LAST)\n   */\n  convert(document: MathDocument<N, T, D>, end?: number): void;\n\n  /**\n   * Converts the expression into the internal format by calling the input jax\n   *\n   * @param {MathDocument} document  The MathDocument in which the math resides\n   */\n  compile(document: MathDocument<N, T, D>): void;\n\n  /**\n   * Converts the internal format to the typeset version by calling the output jax\n   *\n   * @param {MathDocument} document  The MathDocument in which the math resides\n   */\n  typeset(document: MathDocument<N, T, D>): void;\n\n  /**\n   * Inserts the typeset version in place of the original form in the document\n   *\n   * @param {MathDocument} document  The MathDocument in which the math resides\n   */\n  updateDocument(document: MathDocument<N, T, D>): void;\n\n  /**\n   * Removes the typeset version from the document, optionally replacing the original\n   * form of the expression and its delimiters.\n   *\n   * @param {boolean} restore  True if the original version is to be restored\n   */\n  removeFromDocument(restore: boolean): void;\n\n  /**\n   * Sets the metric information for this expression\n   *\n   * @param {number} em      The size of 1 em in pixels\n   * @param {number} ex      The size of 1 ex in pixels\n   * @param {number} cwidth  The container width in pixels\n   * @param {number} lwidth  The line breaking width in pixels\n   * @param {number} scale   The scaling factor (unitless)\n   */\n  setMetrics(em: number, ex: number, cwidth: number, lwidth: number, scale: number): void;\n\n  /**\n   * Set or return the current processing state of this expression,\n   * optionally restoring the document if rolling back an expression\n   * that has been added to the document.\n   *\n   * @param {number} state    The state to set for the expression\n   * @param {number} restore  True if the original form should be restored\n   *                           to the document when rolling back a typeset version\n   * @returns {number}        The current state\n   */\n  state(state?: number, restore?: boolean): number;\n\n  /**\n   * Reset the item to its unprocessed state\n   *\n   * @param {number} restore  True if the original form should be restored\n   *                           to the document when rolling back a typeset version\n   */\n  reset(restore?: boolean): void;\n}\n\n/*****************************************************************/\n/**\n *  The ProtoItem interface\n *\n *  This is what is returned by the FindMath class, giving the location\n *  of math within the document, and is used to produce the full\n *  MathItem later (e.g., when the position within a string array\n *  is translated back into the actual node location in the DOM).\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n */\nexport type ProtoItem<N, T> = {\n  math: string;            // The math expression itself\n  start: Location<N, T>;   // The starting location of the math\n  end: Location<N, T>;     // The ending location of the math\n  open?: string;           // The opening delimiter\n  close?: string;          // The closing delimiter\n  n?: number;              // The index of the string in which this math is found\n  display: boolean;        // True means display mode, false is inline mode\n};\n\n/**\n *  Produce a proto math item that can be turned into a MathItem\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n */\nexport function protoItem<N, T>(open: string, math: string, close: string, n: number,\n                                start: number, end: number, display: boolean = null) {\n  let item: ProtoItem<N, T> = {open: open, math: math, close: close,\n                               n: n, start: {n: start}, end: {n: end}, display: display};\n  return item;\n}\n\n/*****************************************************************/\n/**\n *  Implements the MathItem class\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport abstract class AbstractMathItem<N, T, D> implements MathItem<N, T, D> {\n\n  /**\n   * The source text for the math (e.g., TeX string)\n   */\n  public math: string;\n\n  /**\n   * The input jax associated with this item\n   */\n\n  public inputJax: InputJax<N, T, D>;\n\n  /**\n   * True when this math is in display mode\n   */\n  public display: boolean;\n\n  /**\n   * Reference to the beginning of the math in the document\n   */\n  public start: Location<N, T>;\n  /**\n   * Reference to the end of the math in the document\n   */\n  public end: Location<N, T>;\n\n  /**\n   * The compiled internal MathML (result of InputJax)\n   */\n  public root: MmlNode = null;\n  /**\n   * The typeset result (result of OutputJax)\n   */\n  public typesetRoot: N = null;\n\n  /**\n   * The metric information about the surrounding environment\n   */\n  public metrics: Metrics = {} as Metrics;\n\n  /**\n   * Data private to the input jax\n   */\n  public inputData: OptionList = {};\n\n  /**\n   * Data private to the output jax\n   */\n  public outputData: OptionList = {};\n\n  /**\n   * The current state of the item (how far in the render actions it has been processed)\n   */\n  protected _state: number = STATE.UNPROCESSED;\n\n  /**\n   * @return {boolean}   True when this item is an escaped delimiter\n   */\n  public get isEscaped(): boolean {\n    return this.display === null;\n  }\n\n  /**\n   * @param {string} math      The math expression for this item\n   * @param {Inputjax} jax     The input jax to use for this item\n   * @param {boolean} display  True if display mode, false if inline\n   * @param {Location} start   The starting position of the math in the document\n   * @param {Location} end     The ending position of the math in the document\n   * @constructor\n   */\n  constructor (math: string, jax: InputJax<N, T, D>, display: boolean = true,\n               start: Location<N, T> = {i: 0, n: 0, delim: ''},\n               end: Location<N, T> = {i: 0, n: 0, delim: ''}) {\n    this.math = math;\n    this.inputJax = jax;\n    this.display = display;\n    this.start = start;\n    this.end = end;\n    this.root = null;\n    this.typesetRoot = null;\n    this.metrics = {} as Metrics;\n    this.inputData = {};\n    this.outputData = {};\n  }\n\n  /**\n   * @override\n   */\n  public render(document: MathDocument<N, T, D>) {\n    document.renderActions.renderMath(this, document);\n  }\n\n  /**\n   * @override\n   */\n  public rerender(document: MathDocument<N, T, D>, start: number = STATE.RERENDER) {\n    if (this.state() >= start) {\n      this.state(start - 1);\n    }\n    document.renderActions.renderMath(this, document, start);\n  }\n\n  /**\n   * @override\n   */\n  public convert(document: MathDocument<N, T, D>, end: number = STATE.LAST) {\n    document.renderActions.renderConvert(this, document, end);\n  }\n\n  /**\n   * @override\n   */\n  public compile(document: MathDocument<N, T, D>) {\n    if (this.state() < STATE.COMPILED) {\n      this.root = this.inputJax.compile(this, document);\n      this.state(STATE.COMPILED);\n    }\n  }\n\n  /**\n   * @override\n   */\n  public typeset(document: MathDocument<N, T, D>) {\n    if (this.state() < STATE.TYPESET) {\n      this.typesetRoot = document.outputJax[this.isEscaped ? 'escaped' : 'typeset'](this, document);\n      this.state(STATE.TYPESET);\n    }\n  }\n\n  /**\n   * @override\n   */\n  public updateDocument(_document: MathDocument<N, T, D>) {}\n\n  /**\n   * @override\n   */\n  public removeFromDocument(_restore: boolean = false) {}\n\n  /**\n   * @override\n   */\n  public setMetrics(em: number, ex: number, cwidth: number, lwidth: number, scale: number) {\n    this.metrics = {\n      em: em, ex: ex,\n      containerWidth: cwidth,\n      lineWidth: lwidth,\n      scale: scale\n    };\n  }\n\n  /**\n   * @override\n   */\n  public state(state: number = null, restore: boolean = false) {\n    if (state != null) {\n      if (state < STATE.INSERTED && this._state >= STATE.INSERTED) {\n        this.removeFromDocument(restore);\n      }\n      if (state < STATE.TYPESET && this._state >= STATE.TYPESET) {\n        this.outputData = {};\n      }\n      if (state < STATE.COMPILED && this._state >= STATE.COMPILED) {\n        this.inputData = {};\n      }\n      this._state = state;\n    }\n    return this._state;\n  }\n\n  /**\n   * @override\n   */\n  public reset(restore: boolean = false) {\n    this.state(STATE.UNPROCESSED, restore);\n  }\n\n}\n\n/*****************************************************************/\n/**\n * The various states that a MathItem (or MathDocument) can be in\n *   (open-ended so that extensions can add to it)\n */\nexport const STATE: {[state: string]: number} = {\n  UNPROCESSED: 0,\n  FINDMATH: 10,\n  COMPILED: 20,\n  CONVERT: 100,\n  METRICS: 110,\n  RERENDER: 125,\n  TYPESET: 150,\n  INSERTED: 200,\n  LAST: 10000\n};\n\n/**\n * Allocate a new named state\n *\n * @param {string} name    The name of the new state\n * @param {number} state   The value for the new state\n */\nexport function newState(name: string, state: number) {\n  if (name in STATE) {\n    throw Error('State ' + name + ' already exists');\n  }\n  STATE[name] = state;\n}\n","/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the TeXAtom node\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {MmlFactory} from '../MmlFactory.js';\nimport {PropertyList} from '../../Tree/Node.js';\nimport {AbstractMmlBaseNode, MmlNode, TEXCLASS} from '../MmlNode.js';\nimport {MmlMo} from './mo.js';\n\n/*****************************************************************/\n/**\n *  Implements the TeXAtom node class (subclass of AbstractMmlBaseNode)\n */\n\nexport class TeXAtom extends AbstractMmlBaseNode {\n\n  /**\n   * @override\n   */\n  public static defaults: PropertyList = {\n    ...AbstractMmlBaseNode.defaults\n  };\n\n  /**\n   * TeX class is ORD\n   */\n  protected texclass = TEXCLASS.ORD;\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'TeXAtom';\n  }\n\n  /**\n   * Inferred mrow with any number of children\n   * @override\n   */\n  public get arity() {\n    return -1;\n  }\n\n  /**\n   * This element is not considered a MathML container\n   * @override\n   */\n  public get notParent() {\n    return this.childNodes[0] && this.childNodes[0].childNodes.length === 1;\n  }\n\n  /**\n   * @override\n   */\n  constructor(factory: MmlFactory, attributes: PropertyList, children: MmlNode[]) {\n    super(factory, attributes, children);\n    this.setProperty('texClass', this.texClass);   // needed for serialization to include the texClass\n  }\n\n  /**\n   * @override\n   */\n  public setTeXclass(prev: MmlNode) {\n    this.childNodes[0].setTeXclass(null);\n    return this.adjustTeXclass(prev);\n  }\n\n  /**\n   * (Replaced below by the version from the MmlMo node)\n   *\n   * @override\n   */\n  public adjustTeXclass(prev: MmlNode) {\n    return prev;\n  }\n\n}\n/**\n *  Use the method from the MmlMo class\n */\nTeXAtom.prototype.adjustTeXclass = MmlMo.prototype.adjustTeXclass;\n","/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the MmlMaction node\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {PropertyList} from '../../Tree/Node.js';\nimport {MmlNode, AbstractMmlNode} from '../MmlNode.js';\n\n/*****************************************************************/\n/**\n *  Implements the MmlMaction node class (subclass of AbstractMmlNode)\n */\n\nexport class MmlMaction extends AbstractMmlNode {\n\n  /**\n   * @override\n   */\n  public static defaults: PropertyList = {\n    ...AbstractMmlNode.defaults,\n    actiontype: 'toggle',\n    selection: 1\n  };\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'maction';\n  }\n\n  /**\n   * At least one child\n   * @override\n   */\n  public get arity() {\n    return 1;\n  }\n\n  /**\n   * @return {MmlNode}  The selected child node (or an mrow if none selected)\n   */\n  public get selected(): MmlNode {\n    const selection = this.attributes.get('selection') as number;\n    const i = Math.max(1, Math.min(this.childNodes.length, selection)) - 1;\n    return this.childNodes[i] || this.factory.create('mrow');\n  }\n\n  /**\n   * @override\n   */\n  public get isEmbellished() {\n    return this.selected.isEmbellished;\n  }\n\n  /**\n   * @override\n   */\n  public get isSpacelike() {\n    return this.selected.isSpacelike;\n  }\n\n  /**\n   * @override\n   */\n  public core(): MmlNode {\n    return this.selected.core();\n  }\n\n  /**\n   * @override\n   */\n  public coreMO(): MmlNode {\n    return this.selected.coreMO();\n  }\n\n  /**\n   * @override\n   */\n  protected verifyAttributes(options: PropertyList) {\n    super.verifyAttributes(options);\n    if (this.attributes.get('actiontype') !== 'toggle' &&\n        this.attributes.getExplicit('selection') !== undefined) {\n      const attributes = this.attributes.getAllAttributes();\n      delete attributes.selection;\n    }\n  }\n\n  /**\n   * Get the TeX class from the selceted node\n   * For tooltips, set TeX classes within the tip as a separate math list\n   *\n   * @override\n   */\n  public setTeXclass(prev: MmlNode) {\n    if (this.attributes.get('actiontype') === 'tooltip' && this.childNodes[1]) {\n      this.childNodes[1].setTeXclass(null);\n    }\n    let selected = this.selected;\n    prev = selected.setTeXclass(prev);\n    this.updateTeXclass(selected);\n    return prev;\n  }\n\n  /**\n   * Select the next child for a toggle action\n   */\n  public nextToggleSelection() {\n    let selection = Math.max(1, (this.attributes.get('selection') as number) + 1);\n    if (selection > this.childNodes.length) {\n      selection = 1;\n    }\n    this.attributes.set('selection', selection);\n  }\n\n}\n","/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the MmlMath node\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {PropertyList} from '../../Tree/Node.js';\nimport {AbstractMmlLayoutNode, AttributeList} from '../MmlNode.js';\n\n/*****************************************************************/\n/**\n *  Implements the MmlMath node class (subclass of AbstractMmlLayoutNode)\n */\n\nexport class MmlMath extends AbstractMmlLayoutNode {\n\n  /**\n   *  These are used as the defaults for any attributes marked INHERIT in other classes\n   */\n  public static defaults: PropertyList = {\n    ...AbstractMmlLayoutNode.defaults,\n    mathvariant: 'normal',\n    mathsize: 'normal',\n    mathcolor: '', // Should be 'black', but allow it to inherit from surrounding text\n    mathbackground: 'transparent',\n    dir: 'ltr',\n    scriptlevel: 0,\n    displaystyle: false,\n    display: 'inline',\n    maxwidth: '',\n    overflow: 'linebreak',\n    altimg: '',\n    'altimg-width': '',\n    'altimg-height': '',\n    'altimg-valign': '',\n    alttext: '',\n    cdgroup: '',\n    scriptsizemultiplier: 1 / Math.sqrt(2),\n    scriptminsize: '8px',        // Should be 8pt, but that's too big\n    infixlinebreakstyle: 'before',\n    lineleading: '1ex',\n    linebreakmultchar: '\\u2062', // Invisible times\n    indentshift: 'auto',         // Use user configuration\n    indentalign: 'auto',\n    indenttarget: '',\n    indentalignfirst: 'indentalign',\n    indentshiftfirst: 'indentshift',\n    indentalignlast:  'indentalign',\n    indentshiftlast:  'indentshift'\n  };\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'math';\n  }\n\n  /**\n   * Linebreaking can occur in math nodes\n   * @override\n   */\n  public get linebreakContainer() {\n    return true;\n  }\n\n  /**\n   * The attributes of math nodes are inherited, so add them into the list.\n   * The displaystyle attribute comes from the display attribute if not given explicitly\n   * The scriptlevel comes from the scriptlevel attribute or default\n   *\n   * @override\n   */\n  protected setChildInheritedAttributes(attributes: AttributeList, display: boolean, level: number, prime: boolean) {\n    if (this.attributes.get('mode') === 'display') {\n      this.attributes.setInherited('display', 'block');\n    }\n    attributes = this.addInheritedAttributes(attributes, this.attributes.getAllAttributes());\n    display = (!!this.attributes.get('displaystyle') ||\n               (!this.attributes.get('displaystyle') && this.attributes.get('display') === 'block'));\n    this.attributes.setInherited('displaystyle', display);\n    level = (this.attributes.get('scriptlevel') ||\n             (this.constructor as typeof MmlMath).defaults['scriptlevel']) as number;\n    super.setChildInheritedAttributes(attributes, display, level, prime);\n  }\n\n}\n","/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the MmlMenclose node\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {PropertyList} from '../../Tree/Node.js';\nimport {MmlNode, AbstractMmlNode, TEXCLASS} from '../MmlNode.js';\n\n/*****************************************************************/\n/**\n *  Implements the MmlEnclose node class (subclass of AbstractMmlNode)\n */\n\nexport class MmlMenclose extends AbstractMmlNode {\n\n  /**\n   * @override\n   */\n  public static defaults: PropertyList = {\n    ...AbstractMmlNode.defaults,\n    notation: 'longdiv'\n  };\n\n  /**\n   * TeX class is ORD\n   */\n  protected texclass = TEXCLASS.ORD;\n\n  /**\n   * The menclose kind\n   * @override\n   */\n  public get kind() {\n    return 'menclose';\n  }\n\n  /**\n   * <menclose> has an inferred mrow\n   * @override\n   */\n  public get arity() {\n    return -1;\n  }\n\n  /**\n   * <menclose> is a linebreak container\n   * @override\n   */\n  public get linebreakContininer() {\n    return true;\n  }\n\n  /**\n   * @override\n   */\n  public setTeXclass(prev: MmlNode) {\n    prev = this.childNodes[0].setTeXclass(prev);\n    this.updateTeXclass(this.childNodes[0]);\n    return prev;\n  }\n\n}\n","/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the MmlMfenced node\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {PropertyList} from '../../Tree/Node.js';\nimport {MmlNode, TextNode, AbstractMmlNode, AttributeList, TEXCLASS} from '../MmlNode.js';\n\n/*****************************************************************/\n/**\n *  Implements the MmlMfenced node class (subclass of AbstractMmlNode)\n */\n\nexport class MmlMfenced extends AbstractMmlNode {\n\n  /**\n   * @overeride\n   */\n  public static defaults: PropertyList = {\n    ...AbstractMmlNode.defaults,\n    open: '(',\n    close: ')',\n    separators: ','\n  };\n\n  /**\n   * TeX class is INNER\n   */\n  protected texclass = TEXCLASS.INNER;\n\n  /**\n   * Storage for \"fake\" nodes for the separators\n   */\n  public separators: MmlNode[] = [];\n  /**\n   * Storage for \"fake\" open node\n   */\n  public open: MmlNode = null;\n  /**\n   * Storage for \"fake\" close node\n   */\n  public close: MmlNode = null;\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'mfenced';\n  }\n\n  /**\n   * Include the fake nodes in the process, since they will be used\n   *  to produce the output.\n   *\n   * @override\n   */\n  public setTeXclass(prev: MmlNode) {\n    this.getPrevClass(prev);\n    if (this.open) {\n      prev = this.open.setTeXclass(prev);\n    }\n    if (this.childNodes[0]) {\n      prev = this.childNodes[0].setTeXclass(prev);\n    }\n    for (let i = 1, m = this.childNodes.length; i < m; i++) {\n      if (this.separators[i - 1]) {\n        prev = this.separators[i - 1].setTeXclass(prev);\n      }\n      if (this.childNodes[i]) {\n        prev = this.childNodes[i].setTeXclass(prev);\n      }\n    }\n    if (this.close) {\n      prev = this.close.setTeXclass(prev);\n    }\n    this.updateTeXclass(this.open);\n    return prev;\n  }\n\n  /**\n   * Create the fake nodes and do their inheritance\n   * Then do inheridence of usual children\n   *\n   * @override\n   */\n  protected setChildInheritedAttributes(attributes: AttributeList, display: boolean, level: number, prime: boolean) {\n    this.addFakeNodes();\n    for (const child of [this.open, this.close].concat(this.separators)) {\n      if (child) {\n        child.setInheritedAttributes(attributes, display, level, prime);\n      }\n    }\n    super.setChildInheritedAttributes(attributes, display, level, prime);\n  }\n\n  /**\n   * Create <mo> elements for the open and close delimiters, and for the separators (if any)\n   */\n  protected addFakeNodes() {\n    let {open, close, separators} = this.attributes.getList('open', 'close', 'separators') as\n    {open: string, close: string, separators: string};\n    open = open.replace(/[ \\t\\n\\r]/g, '');\n    close = close.replace(/[ \\t\\n\\r]/g, '');\n    separators = separators.replace(/[ \\t\\n\\r]/g, '');\n    //\n    // Create open node\n    //\n    if (open) {\n      this.open = this.fakeNode(open, {fence: true, form: 'prefix'}, TEXCLASS.OPEN);\n    }\n    //\n    // Create nodes for the separators\n    //\n    if (separators) {\n      while (separators.length < this.childNodes.length - 1) {\n        separators += separators.charAt(separators.length - 1);\n      }\n      let i = 0;\n      for (const child of this.childNodes.slice(1)) {\n        if (child) {\n          this.separators.push(this.fakeNode(separators.charAt(i++)));\n        }\n      }\n    }\n    //\n    //  Create close node\n    //\n    if (close) {\n      this.close = this.fakeNode(close, {fence: true, form: 'postfix'}, TEXCLASS.CLOSE);\n    }\n  }\n\n  /**\n   * @param {string} c                 The character for the text of the node\n   * @param {PropertyList} properties  The attributes for the node\n   * @param {number} texClass          The TeX class for the node\n   * @return {MmlNode}                 The generated <mo> node\n   */\n  protected fakeNode(c: string, properties: PropertyList = {}, texClass: number = null): MmlNode {\n    let text = (this.factory.create('text') as TextNode).setText(c);\n    let node = this.factory.create('mo', properties, [text]);\n    node.texClass = texClass;\n    node.parent = this;\n    return node;\n  }\n\n}\n","/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the MmlMfrac node\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {PropertyList} from '../../Tree/Node.js';\nimport {MmlNode, AbstractMmlBaseNode, AttributeList} from '../MmlNode.js';\n\n/*****************************************************************/\n/**\n *  Implements the MmlMfrac node class (subclass of AbstractMmlBaseNode)\n */\n\nexport class MmlMfrac extends AbstractMmlBaseNode {\n\n  /**\n   * @override\n   */\n  public static defaults: PropertyList = {\n    ...AbstractMmlBaseNode.defaults,\n    linethickness: 'medium',\n    numalign: 'center',\n    denomalign: 'center',\n    bevelled: false\n  };\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'mfrac';\n  }\n\n  /**\n   * <mfrac> requires two children\n   * @override\n   */\n  public get arity() {\n    return 2;\n  }\n\n  /**\n   * The children of <mfrac> can include line breaks\n   * @override\n   */\n  public get linebreakContainer() {\n    return true;\n  }\n\n  /**\n   * Update the children separately\n   * @override\n   */\n  public setTeXclass(prev: MmlNode) {\n    this.getPrevClass(prev);\n    for (const child of this.childNodes) {\n      child.setTeXclass(null);\n    }\n    return this;\n  }\n\n  /**\n   * Adjust the display level, and use prime style in denominator\n   * @override\n   */\n  protected setChildInheritedAttributes(attributes: AttributeList, display: boolean, level: number, prime: boolean) {\n    if (!display || level > 0) {\n      level++;\n    }\n    this.childNodes[0].setInheritedAttributes(attributes, false, level, prime);\n    this.childNodes[1].setInheritedAttributes(attributes, false, level, true);\n  }\n\n}\n","/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the MmlMglyph node\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {PropertyList} from '../../Tree/Node.js';\nimport {AbstractMmlTokenNode, TEXCLASS} from '../MmlNode.js';\n\n/*****************************************************************/\n/**\n *  Implements the MmlMglyph node class (subclass of AbstractMmlTokenNode)\n */\n\nexport class MmlMglyph extends AbstractMmlTokenNode {\n\n  /**\n   * @override\n   */\n  public static defaults: PropertyList = {\n    ...AbstractMmlTokenNode.defaults,\n    alt: '',\n    src: '',\n    index: '',\n    width: 'auto',\n    height: 'auto',\n    valign: '0em'\n  };\n\n  /**\n   * TeX class is ORD\n   */\n  protected texclass = TEXCLASS.ORD;\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'mglyph';\n  }\n\n  /**\n   * @override\n   */\n  public verifyAttributes(options: PropertyList) {\n    const {src, fontfamily, index} = this.attributes.getList('src', 'fontfamily', 'index');\n    if (src === '' && (fontfamily === '' || index === '')) {\n      this.mError('mglyph must have either src or fontfamily and index attributes', options, true);\n    } else {\n      super.verifyAttributes(options);\n    }\n  }\n\n}\n","/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the MmlMi node\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {PropertyList} from '../../Tree/Node.js';\nimport {AbstractMmlTokenNode, AbstractMmlNode, AttributeList, TEXCLASS} from '../MmlNode.js';\n\n/*****************************************************************/\n/**\n *  Implements the MmlMi node class (subclass of AbstractMmlTokenNode)\n */\n\nexport class MmlMi extends AbstractMmlTokenNode {\n\n  /**\n   * @override\n   */\n  public static defaults: PropertyList = {\n    ...AbstractMmlTokenNode.defaults\n  };\n\n  /**\n   * Pattern for operator names\n   */\n  public static operatorName: RegExp = /^[a-z][a-z0-9]*$/i;\n  /**\n   * Pattern for single-character texts\n   */\n  public static singleCharacter: RegExp =\n    /^[\\uD800-\\uDBFF]?.[\\u0300-\\u036F\\u1AB0-\\u1ABE\\u1DC0-\\u1DFF\\u20D0-\\u20EF]*$/;\n\n  /**\n   * TeX class is ORD\n   */\n  protected texclass = TEXCLASS.ORD;\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'mi';\n  }\n\n  /**\n   * Do the usual inheritance, then check the text length to see\n   *   if mathvariant should be normal or italic.\n   *\n   * @override\n   */\n  public setInheritedAttributes(attributes: AttributeList = {},\n                                display: boolean = false, level: number = 0, prime: boolean = false) {\n    super.setInheritedAttributes(attributes, display, level, prime);\n    let text = this.getText();\n    if (text.match(MmlMi.singleCharacter) && !attributes.mathvariant) {\n      this.attributes.setInherited('mathvariant', 'italic');\n    }\n  }\n\n  /**\n   * Mark multi-character texts as OP rather than ORD for spacing purposes\n   *\n   * @override\n   */\n  public setTeXclass(prev: AbstractMmlNode) {\n    this.getPrevClass(prev);\n    let name = this.getText();\n    if (name.length > 1 && name.match(MmlMi.operatorName) &&\n        this.attributes.get('mathvariant') === 'normal' &&\n        this.getProperty('autoOP') === undefined &&\n        this.getProperty('texClass') === undefined) {\n      this.texClass = TEXCLASS.OP;\n      this.setProperty('autoOP', true);\n    }\n    return this;\n  }\n\n}\n","/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the MmlMmultiscripts node\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {PropertyList} from '../../Tree/Node.js';\nimport {AbstractMmlNode, AttributeList} from '../MmlNode.js';\nimport {MmlMsubsup} from './msubsup.js';\n\n/*****************************************************************/\n/**\n *  Implements the MmlMmultiscripts node class (subclass of MmlMsubsup)\n */\n\nexport class MmlMmultiscripts extends MmlMsubsup {\n\n  /**\n   * @override\n   */\n  public static defaults: PropertyList = {\n    ...MmlMsubsup.defaults\n  };\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'mmultiscripts';\n  }\n\n  /**\n   * <mmultiscripts> requires at least one child (the base)\n   * @override\n   */\n  public get arity() {\n    return 1;\n  }\n\n  /**\n   * Push the inherited values to the base\n   * Make sure the number of pre- and post-scripts are even by adding mrows, if needed.\n   * For the scripts, use displaystyle = false, scriptlevel + 1, and\n   *   set the primestyle in the subscripts.\n   *\n   * @override\n   */\n  protected setChildInheritedAttributes(attributes: AttributeList, display: boolean, level: number, prime: boolean) {\n    this.childNodes[0].setInheritedAttributes(attributes, display, level, prime);\n    let prescripts = false;\n    for (let i = 1, n = 0; i < this.childNodes.length; i++) {\n      let child = this.childNodes[i];\n      if (child.isKind('mprescripts')) {\n        if (!prescripts) {\n          prescripts = true;\n          if (i % 2 === 0) {\n            let mrow = this.factory.create('mrow');\n            this.childNodes.splice(i, 0, mrow);\n            mrow.parent = this;\n            i++;\n          }\n        }\n      } else {\n        let primestyle = prime || (n % 2 === 0);\n        child.setInheritedAttributes(attributes, false, level + 1, primestyle);\n        n++;\n      }\n    }\n    if (this.childNodes.length % 2 === (prescripts ? 1 : 0)) {\n      this.appendChild(this.factory.create('mrow'));\n      this.childNodes[this.childNodes.length - 1].setInheritedAttributes(attributes, false, level + 1, prime);\n    }\n  }\n\n  /**\n   * Check that mprescripts only occurs once, and that the number of pre- and post-scripts are even.\n   *\n   * @override\n   */\n  protected verifyChildren(options: PropertyList) {\n    let prescripts = false;\n    let fix = options['fixMmultiscripts'];\n    for (let i = 0; i < this.childNodes.length; i++) {\n      let child = this.childNodes[i];\n      if (child.isKind('mprescripts')) {\n        if (prescripts) {\n          child.mError(child.kind + ' can only appear once in ' + this.kind, options, true);\n        } else {\n          prescripts = true;\n          if (i % 2 === 0 && !fix) {\n            this.mError('There must be an equal number of prescripts of each type', options);\n          }\n        }\n      }\n    }\n    if (this.childNodes.length % 2 === (prescripts ? 1 : 0) && !fix) {\n      this.mError('There must be an equal number of scripts of each type', options);\n    }\n    super.verifyChildren(options);\n  }\n\n}\n\n/*****************************************************************/\n/**\n *  Implements the MmlMprescripts node class (subclass of AbstractMmlNode)\n */\n\nexport class MmlMprescripts extends AbstractMmlNode {\n\n  /**\n   * @override\n   */\n  public static defaults: PropertyList = {\n    ...AbstractMmlNode.defaults\n  };\n\n  /**\n   * @return {string}  The mprescripts kind\n   */\n  public get kind(): string {\n    return 'mprescripts';\n  }\n\n  /**\n   * @return {number}  <mprescripts> can have no children\n   */\n  public get arity(): number {\n    return 0;\n  }\n\n  /**\n   * Check that parent is mmultiscripts\n   *\n   * @override\n   */\n  public verifyTree(options: PropertyList) {\n    super.verifyTree(options);\n    if (this.parent && !this.parent.isKind('mmultiscripts')) {\n      this.mError(this.kind + ' must be a child of mmultiscripts', options, true);\n    }\n  }\n\n}\n\n/*****************************************************************/\n/**\n *  Implements the MmlNone node class (subclass of AbstractMmlNode)\n */\n\nexport class MmlNone extends AbstractMmlNode {\n\n  /**\n   * @override\n   */\n  public static defaults: PropertyList = {\n    ...AbstractMmlNode.defaults\n  };\n\n  /**\n   * @return {string}  The none kind\n   */\n  public get kind(): string {\n    return 'none';\n  }\n\n  /**\n   * @return {number}  <none> can have no children\n   */\n  public get arity(): number {\n    return 0;\n  }\n\n  /**\n   * Check that parent is mmultiscripts\n   *\n   * @override\n   */\n  public verifyTree(options: PropertyList) {\n    super.verifyTree(options);\n    if (this.parent && !this.parent.isKind('mmultiscripts')) {\n      this.mError(this.kind + ' must be a child of mmultiscripts', options, true);\n    }\n  }\n\n}\n","/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the MmlMn node\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {PropertyList} from '../../Tree/Node.js';\nimport {AbstractMmlTokenNode, TEXCLASS} from '../MmlNode.js';\n\n/*****************************************************************/\n/**\n *  Implements the MmlMn node class (subclass of AbstractMmlTokenNode)\n */\n\nexport class MmlMn extends AbstractMmlTokenNode {\n\n  /**\n   * @override\n   */\n  public static defaults: PropertyList = {\n    ...AbstractMmlTokenNode.defaults\n  };\n\n  /**\n   * TeX class is ORD\n   */\n  protected texclass = TEXCLASS.ORD;\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'mn';\n  }\n\n}\n","/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the MmlMpadded node\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {PropertyList} from '../../Tree/Node.js';\nimport {AbstractMmlLayoutNode} from '../MmlNode.js';\n\n/*****************************************************************/\n/**\n *  Implements the MmlMpadded node class (subclass of AbstractMmlLayoutNode)\n */\n\nexport class MmlMpadded extends AbstractMmlLayoutNode {\n\n  /**\n   * @override\n   */\n  public static defaults: PropertyList = {\n    ...AbstractMmlLayoutNode.defaults,\n    width: '',\n    height: '',\n    depth: '',\n    lspace: 0,\n    voffset: 0\n  };\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'mpadded';\n  }\n\n}\n","/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the MmlMroot node\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {PropertyList} from '../../Tree/Node.js';\nimport {MmlNode, AbstractMmlNode, AttributeList, TEXCLASS} from '../MmlNode.js';\n\n/*****************************************************************/\n/**\n *  Implements the MmlMroot node class (subclass of AbstractMmlNode)\n */\n\nexport class MmlMroot extends AbstractMmlNode {\n\n  /**\n   * @override\n   */\n  public static defaults: PropertyList = {\n    ...AbstractMmlNode.defaults\n  };\n\n  /**\n   * TeX class is ORD\n   */\n  protected texclass = TEXCLASS.ORD;\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'mroot';\n  }\n\n  /**\n   * <mroot> requires two children\n   * @override\n   */\n  public get arity() {\n    return 2;\n  }\n\n  /**\n   * Set the TeX class for the content of the root and the root separately.\n   * Return ourself as the previous item.\n   *\n   * @override\n   */\n  public setTeXclass(prev: MmlNode) {\n    this.getPrevClass(prev);\n    this.childNodes[0].setTeXclass(null);\n    this.childNodes[1].setTeXclass(null);\n    return this;\n  }\n\n  /**\n   * Set the children display/level/prime for the base and root.\n   *\n   * @override\n   */\n  protected setChildInheritedAttributes(attributes: AttributeList, display: boolean, level: number, prime: boolean) {\n    this.childNodes[0].setInheritedAttributes(attributes, display, level, true);\n    this.childNodes[1].setInheritedAttributes(attributes, false, level + 2, prime);\n  }\n\n}\n","/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the MmlMrow node\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {PropertyList} from '../../Tree/Node.js';\nimport {MmlNode, AbstractMmlNode, TEXCLASS} from '../MmlNode.js';\n\n/*****************************************************************/\n/**\n *  Implements the MmlMrow node class (subclass of AbstractMmlNode)\n */\n\nexport class MmlMrow extends AbstractMmlNode {\n\n  /**\n   * @override\n   */\n  public static defaults: PropertyList = {\n    ...AbstractMmlNode.defaults\n  };\n\n  /**\n   * The index of the core child, when acting as an embellish mrow\n   */\n  protected _core: number = null;\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'mrow';\n  }\n\n  /**\n   * An mrow is space-like if all its children are.\n   *\n   * @override\n   */\n  public get isSpacelike() {\n    for (const child of this.childNodes) {\n      if (!child.isSpacelike) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * An mrow is embellished if it contains one embellished operator\n   * and any number of space-like nodes\n   *\n   * @override\n   */\n  public get isEmbellished() {\n    let embellished = false;\n    let i = 0;\n    for (const child of this.childNodes) {\n      if (child) {\n        if (child.isEmbellished) {\n          if (embellished) {\n            return false;\n          }\n          embellished = true;\n          this._core = i;\n        } else if (!child.isSpacelike) {\n          return false;\n        }\n      }\n      i++;\n    }\n    return embellished;\n  }\n\n  /**\n   * @override\n   */\n  public core(): MmlNode {\n    if (!this.isEmbellished || this._core == null) {\n      return this;\n    }\n    return this.childNodes[this._core];\n  }\n\n  /**\n   * @override\n   */\n  public coreMO(): MmlNode {\n    if (!this.isEmbellished || this._core == null) {\n      return this;\n    }\n    return this.childNodes[this._core].coreMO();\n  }\n\n  /**\n   * @return {number}  The number of non-spacelike child nodes\n   */\n  public nonSpaceLength(): number {\n    let n = 0;\n    for (const child of this.childNodes) {\n      if (child && !child.isSpacelike) {\n        n++;\n      }\n    }\n    return n;\n  }\n\n  /**\n   * @return {MmlNode|null}  The first non-space-like child node\n   */\n  public firstNonSpace(): MmlNode | null {\n    for (const child of this.childNodes) {\n      if (child && !child.isSpacelike) {\n        return child;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @return {MmlNode|null}  The last non-space-like child node\n   */\n  public lastNonSpace(): MmlNode | null {\n    let i = this.childNodes.length;\n    while (--i >= 0) {\n      let child = this.childNodes[i];\n      if (child && !child.isSpacelike) {\n        return child;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @override\n   */\n  public setTeXclass(prev: MmlNode) {\n    if (this.getProperty('open') != null || this.getProperty('close') != null) {\n      //\n      // <mrow> looks like it came from \\left...\\right\n      //   so treat as subexpression (TeX class INNER).\n      // Use prev = null for the initial element in the\n      //   delimiters, since there is nothing previous to\n      //   it in what would be the TeX math list.\n      //\n      this.getPrevClass(prev);\n      prev = null;\n      for (const child of this.childNodes) {\n        prev = child.setTeXclass(prev);\n      }\n      if (this.texClass == null) {\n        this.texClass = TEXCLASS.INNER;\n      }\n    } else {\n      //\n      //  Normal <mrow>, so treat as though mrow is not there\n      //\n      for (const child of this.childNodes) {\n        prev = child.setTeXclass(prev);\n      }\n      if (this.childNodes[0]) {\n        this.updateTeXclass(this.childNodes[0]);\n      }\n    }\n    return prev;\n  }\n\n}\n\n\n/*****************************************************************/\n/**\n *  Implements the MmlInferredMrow node class (subclass of MmlMrow)\n */\n\nexport class MmlInferredMrow extends MmlMrow {\n\n  /**\n   * @override\n   */\n  public static defaults: PropertyList = MmlMrow.defaults;\n\n  /**\n   * @return {string}  The inferred-mrow kind\n   */\n  public get kind(): string {\n    return 'inferredMrow';\n  }\n\n  /**\n   * @return {boolean}  This is inferred\n   */\n  public get isInferred(): boolean {\n    return true;\n  }\n\n  /**\n   * @override\n   */\n  public get notParent() {\n    return true;\n  }\n\n  /**\n   * Show the child nodes in brackets\n   */\n  public toString() {\n    return '[' + this.childNodes.join(',') + ']';\n  }\n\n}\n","/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the MmlMs node\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {PropertyList} from '../../Tree/Node.js';\nimport {AbstractMmlTokenNode, TEXCLASS} from '../MmlNode.js';\n\n/*****************************************************************/\n/**\n *  Implements the MmlMs node class (subclass of AbstractMmlTokenNode)\n */\n\nexport class MmlMs extends AbstractMmlTokenNode {\n\n  /**\n   * @override\n   */\n  public static defaults: PropertyList = {\n    ...AbstractMmlTokenNode.defaults,\n    lquote: '\"',\n    rquote: '\"'\n  };\n\n  /**\n   * TeX class is ORD\n   */\n  protected texclass = TEXCLASS.ORD;\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'ms';\n  }\n\n}\n","/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the MmlMspace node\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {PropertyList} from '../../Tree/Node.js';\nimport {MmlNode, AbstractMmlTokenNode, TEXCLASS} from '../MmlNode.js';\n\n/*****************************************************************/\n/**\n *  Implements the MmlMspace node class (subclass of AbstractMmlTokenNode)\n */\n\nexport class MmlMspace extends AbstractMmlTokenNode {\n\n  /**\n   * @override\n   */\n  public static defaults: PropertyList = {\n    ...AbstractMmlTokenNode.defaults,\n    width:  '0em',\n    height: '0ex',\n    depth:  '0ex',\n    linebreak: 'auto'\n  };\n\n  /**\n   * TeX class is ORD\n   */\n  protected texclass = TEXCLASS.NONE;\n\n  /**\n   * @override\n   */\n  public setTeXclass(prev: MmlNode): MmlNode {\n    return prev;\n  }\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'mspace';\n  }\n\n  /**\n   * mspace can't have children\n   * @override\n   */\n  public get arity() {\n    return 0;\n  }\n\n  /**\n   * @override\n   */\n  public get isSpacelike() {\n    return true;\n  }\n\n  /**\n   * Only process linebreak if the space has no explicit dimensions (according to spec)\n   *\n   * @override\n   */\n  public get hasNewline() {\n    let attributes = this.attributes;\n    return (attributes.getExplicit('width') == null && attributes.getExplicit('height') == null &&\n            attributes.getExplicit('depth') == null && attributes.get('linebreak') === 'newline');\n  }\n\n}\n","/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the MmlMsqrt node\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {PropertyList} from '../../Tree/Node.js';\nimport {MmlNode, AbstractMmlNode, AttributeList, TEXCLASS} from '../MmlNode.js';\n\n/*****************************************************************/\n/**\n *  Implements the MmlMsqrt node class (subclass of AbstractMmlNode)\n */\n\nexport class MmlMsqrt extends AbstractMmlNode {\n\n  /**\n   * @override\n   */\n  public static defaults: PropertyList = {\n    ...AbstractMmlNode.defaults\n  };\n\n  /**\n   * TeX class is ORD\n   */\n  protected texclass = TEXCLASS.ORD;\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'msqrt';\n  }\n\n  /**\n   * <msqrt> has an inferred mrow\n   * @override\n   */\n  public get arity() {\n    return -1;\n  }\n\n  /**\n   * <msqrt> can contain line breaks\n   * @override\n   */\n  public get linebreakContainer() {\n    return true;\n  }\n\n  /**\n   * @override\n   */\n  public setTeXclass(prev: MmlNode) {\n    this.getPrevClass(prev);\n    this.childNodes[0].setTeXclass(null);\n    return this;\n  }\n\n  /**\n   * The contents of sqrt are in TeX prime style.\n   *\n   * @override\n   */\n  protected setChildInheritedAttributes(attributes: AttributeList, display: boolean, level: number, _prime: boolean) {\n    this.childNodes[0].setInheritedAttributes(attributes, display, level, true);\n  }\n\n}\n","/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the MmlMsubsup, MmlMsub, and MmlMsup nodes\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {PropertyList} from '../../Tree/Node.js';\nimport {AbstractMmlBaseNode, AttributeList} from '../MmlNode.js';\n\n/*****************************************************************/\n/**\n *  Implements the MmlMsubsup node class (subclass of AbstractMmlBaseNode)\n */\n\nexport class MmlMsubsup extends AbstractMmlBaseNode {\n\n  /**\n   * @override\n   */\n  public static defaults: PropertyList = {\n    ...AbstractMmlBaseNode.defaults,\n    subscriptshift: '',\n    superscriptshift: ''\n  };\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'msubsup';\n  }\n\n  /**\n   * <msubsup> requires three children\n   * @override\n   */\n  public get arity() {\n    return 3;\n  }\n\n  /**\n   * @return {number}  The position of the base element\n   */\n  public get base(): number {\n    return 0;\n  }\n\n  /**\n   * @return {number}  The position of the subscript (overridden in msup below)\n   */\n  public get sub(): number {\n    return 1;\n  }\n\n  /**\n   * @return {number}  The position of the superscript (overridden in msup below)\n   */\n  public get sup(): number {\n    return 2;\n  }\n\n  /**\n   * Super- and subscripts are not in displaymode, have scriptlevel increased, and prime style in subscripts.\n   *\n   * @override\n   */\n  protected setChildInheritedAttributes(attributes: AttributeList, display: boolean, level: number, prime: boolean) {\n    let nodes = this.childNodes;\n    nodes[0].setInheritedAttributes(attributes, display, level, prime);\n    nodes[1].setInheritedAttributes(attributes, false, level + 1, prime || this.sub === 1);\n    if (!nodes[2]) {\n      return;\n    }\n    nodes[2].setInheritedAttributes(attributes, false, level + 1, prime || this.sub === 2);\n  }\n\n}\n\n/*****************************************************************/\n/**\n *  Implements the MmlMsub node class (subclass of MmlMsubsup)\n */\n\nexport class MmlMsub extends MmlMsubsup {\n\n  /**\n   * @override\n   */\n  public static defaults: PropertyList = {\n    ...MmlMsubsup.defaults\n  };\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'msub';\n  }\n\n  /**\n   * <msub> only gets two children\n   * @override\n   */\n  public get arity() {\n    return 2;\n  }\n\n}\n\n/*****************************************************************/\n/**\n *  Implements the MmlMsup node class (subclass of MmlMsubsup)\n */\n\nexport class MmlMsup extends MmlMsubsup {\n\n  /**\n   * @override\n   */\n  public static defaults: PropertyList = {\n    ...MmlMsubsup.defaults\n  };\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'msup';\n  }\n\n  /**\n   * <msup> only gets two children\n   * @override\n   */\n  get arity() {\n    return 2;\n  }\n\n  /**\n   * child 1 is superscript\n   * @override\n   */\n  get sup() {\n    return 1;\n  }\n\n  /**\n   * child 2 is null (no subscript)\n   * @override\n   */\n  get sub() {\n    return 2;\n  }\n\n}\n\n","/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the MmlMtable node\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {PropertyList} from '../../Tree/Node.js';\nimport {MmlNode, AbstractMmlNode, AttributeList, TEXCLASS, indentAttributes} from '../MmlNode.js';\nimport {split} from '../../../util/string.js';\n\n/*****************************************************************/\n/**\n *  Implements the MmlMtable node class (subclass of AbstractMmlNode)\n */\n\nexport class MmlMtable extends AbstractMmlNode {\n\n  /**\n   * @override\n   */\n  public static defaults: PropertyList = {\n    ...AbstractMmlNode.defaults,\n    align: 'axis',\n    rowalign: 'baseline',\n    columnalign: 'center',\n    groupalign: '{left}',\n    alignmentscope: true,\n    columnwidth: 'auto',\n    width: 'auto',\n    rowspacing: '1ex',\n    columnspacing: '.8em',\n    rowlines: 'none',\n    columnlines: 'none',\n    frame: 'none',\n    framespacing: '0.4em 0.5ex',\n    equalrows: false,\n    equalcolumns: false,\n    displaystyle: false,\n    side: 'right',\n    minlabelspacing: '0.8em'\n  };\n\n  /**\n   * Extra properties for this node\n   */\n  public properties = {\n    useHeight: true\n  };\n\n  /**\n   * TeX class is ORD\n   */\n  protected texclass = TEXCLASS.ORD;\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'mtable';\n  }\n\n  /**\n   * Linebreaks are allowed in tables\n   * @override\n   */\n  public get linebreakContainer() {\n    return true;\n  }\n\n  /**\n   * @override\n   */\n  public setInheritedAttributes(attributes: AttributeList, display: boolean, level: number, prime: boolean) {\n    //\n    // Force inheritance of shift and align values (since they are needed to output tables with labels)\n    //   but make sure they are not given explicitly on the <mtable> tag.\n    //\n    for (const name of indentAttributes) {\n      if (attributes[name]) {\n        this.attributes.setInherited(name, attributes[name][1]);\n      }\n      if (this.attributes.getExplicit(name) !== undefined) {\n        delete (this.attributes.getAllAttributes())[name];\n      }\n    }\n    super.setInheritedAttributes(attributes, display, level, prime);\n  }\n\n  /**\n   * Make sure all children are mtr or mlabeledtr nodes\n   * Inherit the table attributes, and set the display attribute based on the table's displaystyle attribute\n   * Reset the prime value to false\n   *\n   * @override\n   */\n  protected setChildInheritedAttributes(attributes: AttributeList, display: boolean, level: number, _prime: boolean) {\n    for (const child of this.childNodes) {\n      if (!child.isKind('mtr')) {\n        this.replaceChild(this.factory.create('mtr'), child)\n          .appendChild(child);\n      }\n    }\n    level = this.getProperty('scriptlevel') as number || level;\n    display = !!(this.attributes.getExplicit('displaystyle') || this.attributes.getDefault('displaystyle'));\n    attributes = this.addInheritedAttributes(attributes, {\n      columnalign: this.attributes.get('columnalign'),\n      rowalign: 'center'\n    });\n    const cramped = this.attributes.getExplicit('data-cramped') as boolean;\n    const ralign = split(this.attributes.get('rowalign') as string);\n    for (const child of this.childNodes) {\n      attributes.rowalign[1] = ralign.shift() || attributes.rowalign[1];\n      child.setInheritedAttributes(attributes, display, level, !!cramped);\n    }\n  }\n\n  /**\n   * Check that children are mtr or mlabeledtr\n   *\n   * @override\n   */\n  protected verifyChildren(options: PropertyList) {\n    let mtr: MmlNode = null;      // all consecutive non-mtr elements are collected into one mtr\n    const factory = this.factory;\n    for (let i = 0; i < this.childNodes.length; i++) {\n      const child = this.childNodes[i];\n      if (child.isKind('mtr')) {\n        mtr = null;               // start a new row if there are non-mtr children\n      } else {\n        const isMtd = child.isKind('mtd');\n        //\n        //  If there is already an mtr for previous children, just remove the child\n        //    otherwise replace the child with a new mtr\n        //\n        if (mtr) {\n          this.removeChild(child);\n          i--;   // there is one fewer child now\n        } else {\n          mtr = this.replaceChild(factory.create('mtr'), child) as MmlNode;\n        }\n        mtr.appendChild(isMtd ? child : factory.create('mtd', {}, [child]));  // Move the child into the mtr\n        if (!options['fixMtables']) {\n          child.parent.removeChild(child);  // remove the child from its mtd or mtr\n          child.parent = this;              // ... and make it think it is a child of the table again\n          isMtd && mtr.appendChild(factory.create('mtd'));  // child will be replaced, so make sure there is an mtd\n          const merror = child.mError('Children of ' + this.kind + ' must be mtr or mlabeledtr', options, isMtd);\n          mtr.childNodes[mtr.childNodes.length - 1].appendChild(merror);   // append the error to the mtd in the mtr\n        }\n      }\n    }\n    super.verifyChildren(options);\n  }\n\n  /**\n   * @override\n   */\n  public setTeXclass(prev: MmlNode) {\n    this.getPrevClass(prev);\n    for (const child of this.childNodes) {\n      child.setTeXclass(null);\n    }\n    return this;\n  }\n\n}\n","/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the MmlMtd node\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {PropertyList} from '../../Tree/Node.js';\nimport {AbstractMmlBaseNode, MmlNode} from '../MmlNode.js';\nimport {INHERIT} from '../Attributes.js';\n\n/*****************************************************************/\n/**\n *  Implements the MmlMtd node class (subclass of AbstractMmlBaseNode)\n */\n\nexport class MmlMtd extends AbstractMmlBaseNode {\n\n  /**\n   * @override\n   */\n  public static defaults: PropertyList = {\n    ...AbstractMmlBaseNode.defaults,\n    rowspan: 1,\n    columnspan: 1,\n    rowalign: INHERIT,\n    columnalign: INHERIT,\n    groupalign: INHERIT\n  };\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'mtd';\n  }\n\n  /**\n   * <mtd> has an inferred mrow\n   * @overrride\n   */\n  public get arity() {\n    return -1;\n  }\n\n  /**\n   * <mtd> can contain line breaks\n   * @override\n   */\n  public get linebreakContainer() {\n    return true;\n  }\n\n  /**\n   * Check that parent is mtr\n   *\n   * @override\n   */\n  protected verifyChildren(options: PropertyList) {\n    if (this.parent && !this.parent.isKind('mtr')) {\n      this.mError(this.kind + ' can only be a child of an mtr or mlabeledtr', options, true);\n      return;\n    }\n    super.verifyChildren(options);\n  }\n\n  /**\n   * @override\n   */\n  public setTeXclass(prev: MmlNode) {\n    this.getPrevClass(prev);\n    this.childNodes[0].setTeXclass(null);\n    return this;\n  }\n\n}\n","/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the MmlMtext node\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {PropertyList} from '../../Tree/Node.js';\nimport {AbstractMmlTokenNode, TEXCLASS} from '../MmlNode.js';\n\n/*****************************************************************/\n/**\n *  Implements the MmlMtext node class (subclass of AbstractMmlTokenNode)\n */\n\nexport class MmlMtext extends AbstractMmlTokenNode {\n\n  /**\n   * @override\n   */\n  public static defaults: PropertyList = {\n    ...AbstractMmlTokenNode.defaults\n  };\n\n  /**\n   * TeX class is ORD\n   */\n  protected texclass = TEXCLASS.ORD;\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'mtext';\n  }\n\n  /**\n   * <mtext> is always space-like according to the spec\n   * @override\n   */\n  public get isSpacelike() {\n    return true;\n  }\n\n}\n","/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the MmlMtr and MmlMlabeledtr nodes\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {PropertyList} from '../../Tree/Node.js';\nimport {MmlNode, AbstractMmlNode, AttributeList} from '../MmlNode.js';\nimport {INHERIT} from '../Attributes.js';\nimport {split} from '../../../util/string.js';\n\n/*****************************************************************/\n/**\n *  Implements the MmlMtr node class (subclass of AbstractMmlNode)\n */\n\nexport class MmlMtr extends AbstractMmlNode {\n\n  /**\n   * @override\n   */\n  public static defaults: PropertyList = {\n    ...AbstractMmlNode.defaults,\n    rowalign: INHERIT,\n    columnalign: INHERIT,\n    groupalign: INHERIT\n  };\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'mtr';\n  }\n\n  /**\n   * <mtr> can contain linebreaks\n   * @override\n   */\n  public get linebreakContainer() {\n    return true;\n  }\n\n  /**\n   * Inherit the mtr attributes\n   *\n   * @override\n   */\n  protected setChildInheritedAttributes(attributes: AttributeList, display: boolean, level: number, prime: boolean) {\n    for (const child of this.childNodes) {\n      if (!child.isKind('mtd')) {\n        this.replaceChild(this.factory.create('mtd'), child)\n            .appendChild(child);\n      }\n    }\n    const calign = split(this.attributes.get('columnalign') as string);\n    if (this.arity === 1) {\n      calign.unshift(this.parent.attributes.get('side') as string);\n    }\n    attributes = this.addInheritedAttributes(attributes, {\n      rowalign: this.attributes.get('rowalign'),\n      columnalign: 'center'\n    });\n    for (const child of this.childNodes) {\n      attributes.columnalign[1] = calign.shift() || attributes.columnalign[1];\n      child.setInheritedAttributes(attributes, display, level, prime);\n    }\n  }\n\n  /**\n   * Check that parent is mtable and children are mtd\n   *\n   * @override\n   */\n  protected verifyChildren(options: PropertyList) {\n    if (this.parent && !this.parent.isKind('mtable')) {\n      this.mError(this.kind + ' can only be a child of an mtable', options, true);\n      return;\n    }\n    for (const child of this.childNodes) {\n      if (!child.isKind('mtd')) {\n        let mtd = this.replaceChild(this.factory.create('mtd'), child) as MmlNode;\n        mtd.appendChild(child);\n        if (!options['fixMtables']) {\n          child.mError('Children of ' + this.kind + ' must be mtd', options);\n        }\n      }\n    }\n    super.verifyChildren(options);\n  }\n\n  /**\n   * @override\n   */\n  public setTeXclass(prev: MmlNode) {\n    this.getPrevClass(prev);\n    for (const child of this.childNodes) {\n      child.setTeXclass(null);\n    }\n    return this;\n  }\n\n}\n\n/*****************************************************************/\n/**\n *  Implements the MmlMlabeledtr node class (subclass of MmlMtr)\n */\n\nexport class MmlMlabeledtr extends MmlMtr {\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'mlabeledtr';\n  }\n\n  /**\n   * <mlabeledtr> requires at least one child (the label)\n   * @override\n   */\n  get arity() {\n    return 1;\n  }\n\n}\n","/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the MmlMunderover node\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {PropertyList} from '../../Tree/Node.js';\nimport {AbstractMmlBaseNode, AttributeList} from '../MmlNode.js';\n\n/*****************************************************************/\n/**\n *  Implements the MmlMunderover node class (subclass of AbstractMmlNode)\n */\n\nexport class MmlMunderover extends AbstractMmlBaseNode {\n\n  /**\n   * @override\n   */\n  public static defaults: PropertyList = {\n    ...AbstractMmlBaseNode.defaults,\n    accent: false,\n    accentunder: false,\n    align: 'center'\n  };\n\n  /**\n   * The names of attributes controling accents for each child node (reversed for mover below)\n   */\n  protected static ACCENTS = ['', 'accentunder', 'accent'];\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'munderover';\n  }\n\n  /**\n   * <munderover> requires three children\n   * @override\n   */\n  public get arity() {\n    return 3;\n  }\n\n  /**\n   * @return {number}  The base is child 0\n   */\n  public get base(): number {\n    return 0;\n  }\n\n  /**\n   * @return {number}  Child 1 goes under (overridden by mover below)\n   */\n  public get under(): number {\n    return 1;\n  }\n\n  /**\n   * @return {number}  Child 2 goes over (overridden by mover below)\n   */\n  public get over(): number {\n    return 2;\n  }\n\n  /**\n   * <munderover> can contain line breaks\n   * @override\n   */\n  public get linebreakContainer() {\n    return true;\n  }\n\n  /**\n   * Base is in prime style if there is an over node\n   * Force scriptlevel change if converted to sub-sup by movablelimits on the base in non-display mode\n   * Adjust displaystyle, scriptlevel, and primestyle for the under/over nodes and check if accent\n   *   values have changed due to the inheritance (e.g., settings in operator dictionary)\n   *\n   * @override\n   */\n  protected setChildInheritedAttributes(attributes: AttributeList, display: boolean, level: number, prime: boolean) {\n    let nodes = this.childNodes;\n    nodes[0].setInheritedAttributes(attributes, display, level, prime || !!nodes[this.over]);\n    let force = !!(!display && nodes[0].coreMO().attributes.get('movablelimits'));\n    let ACCENTS = (this.constructor as typeof MmlMunderover).ACCENTS;\n    nodes[1].setInheritedAttributes(attributes, false,\n                                    this.getScriptlevel(ACCENTS[1], force, level),\n                                    prime || this.under === 1);\n    this.setInheritedAccent(1, ACCENTS[1], display, level, prime, force);\n    if (!nodes[2]) {\n      return;\n    }\n    nodes[2].setInheritedAttributes(attributes, false,\n                                    this.getScriptlevel(ACCENTS[2], force, level),\n                                    prime || this.under === 2);\n    this.setInheritedAccent(2, ACCENTS[2], display, level, prime, force);\n  }\n\n  /**\n   * @param {string} accent  The name of the accent attribute to check (\"accent\" or \"accentunder\")\n   * @param {boolean} force  True if the scriptlevel change is to be forced to occur\n   * @param {number} level   The current scriptlevel\n   * @return {number}        The new script level based on the accent attribute\n   */\n  protected getScriptlevel(accent: string, force: boolean, level: number): number {\n    if (force || !this.attributes.get(accent)) {\n      level++;\n    }\n    return level;\n  }\n\n  /**\n   * Check if an under or over accent should cause the appropriate accent attribute to be inherited\n   *   on the munderover node, and if it is not the default, re-inherit the scriptlevel, since that\n   *   is affected by the accent attribute\n   *\n   * @param {number} n         The index of the node to check\n   * @param {string} accent    The name of the accent attribute to check (\"accent\" or \"accentunder\")\n   * @param {boolean} display  The displaystyle\n   * @param {number} level     The scriptlevel\n   * @param {number} prime     The TeX prime style\n   * @param {boolean} force    Whether to force the scriptlevel change\n   */\n  protected setInheritedAccent(n: number, accent: string, display: boolean, level: number,\n                               prime: boolean, force: boolean) {\n    let node = this.childNodes[n];\n    if (this.attributes.getExplicit(accent) == null && node.isEmbellished) {\n      let value = node.coreMO().attributes.get('accent');\n      this.attributes.setInherited(accent, value);\n      if (value !== this.attributes.getDefault(accent)) {\n        node.setInheritedAttributes({}, display, this.getScriptlevel(accent, force, level), prime);\n      }\n    }\n  }\n\n}\n\n/*****************************************************************/\n/**\n *  Implements the MmlMunder node class (subclass of MmlMunderover)\n */\n\nexport class MmlMunder extends MmlMunderover {\n\n  /**\n   * @override\n   */\n  public static defaults: PropertyList = {\n      ...MmlMunderover.defaults\n  };\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'munder';\n  }\n\n  /**\n   * <munder> has only two children\n   * @override\n   */\n  public get arity() {\n    return 2;\n  }\n\n}\n\n/*****************************************************************/\n/**\n *  Implements the MmlMover node class (subclass of MmlMunderover)\n */\n\nexport class MmlMover extends MmlMunderover {\n\n  /**\n   * @override\n   */\n  public static defaults: PropertyList = {\n      ...MmlMunderover.defaults\n  };\n  /**\n   *  The first child is the over accent (second never occurs)\n   */\n  protected static ACCENTS = ['', 'accent', 'accentunder'];\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'mover';\n  }\n\n  /**\n   * <mover> has only two children\n   * @override\n   */\n  get arity() {\n    return 2;\n  }\n\n  /**\n   * Child 1 is the over node\n   * @override\n   */\n  public get over() {\n    return 1;\n  }\n\n  /**\n   * Child 2 is the null (the under node)\n   * @override\n   */\n  public get under() {\n    return 2;\n  }\n\n}\n","/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the MmlSemantics, MmlAnnotation, and MmlAnnotationXML nodes\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {PropertyList} from '../../Tree/Node.js';\nimport {AbstractMmlNode, AbstractMmlBaseNode} from '../MmlNode.js';\n\n/*****************************************************************/\n/**\n *  Implements the MmlMroot node class (subclass of AbstractMmlBaseNode)\n */\n\nexport class MmlSemantics extends AbstractMmlBaseNode {\n\n  /**\n   * @override\n   */\n  public static defaults: PropertyList = {\n    ...AbstractMmlBaseNode.defaults,\n    definitionUrl: null,\n    encoding: null\n  };\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'semantics';\n  }\n\n  /**\n   * <semantics> requires at least one node\n   * @override\n   */\n  public get arity() {\n    return 1;\n  }\n\n  /**\n   * Ignore <semantics> when looking for partent node\n   * @override\n   */\n  public get notParent() {\n    return true;\n  }\n\n}\n\n/*****************************************************************/\n/**\n *  Implements the MmlMroot node class (subclass of AbstractMmlNode)\n */\n\nexport class MmlAnnotationXML extends AbstractMmlNode {\n\n  /**\n   * @override\n   */\n  public static defaults: PropertyList = {\n    ...AbstractMmlNode.defaults,\n    definitionUrl: null,\n    encoding: null,\n    cd: 'mathmlkeys',\n    name: '',\n    src: null\n  };\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'annotation-xml';\n  }\n\n  /**\n   * Children are XMLNodes, so don't bother inheritting to them\n   * @override\n   */\n  protected setChildInheritedAttributes() {}\n\n}\n\n/*****************************************************************/\n/**\n *  Implements the MmlMroot node class (subclass of MmlAnnotationXML)\n */\n\nexport class MmlAnnotation extends MmlAnnotationXML {\n\n  /**\n   * @override\n   */\n  public static defaults = {\n    ...MmlAnnotationXML.defaults\n  };\n\n  /**\n   * Extra properties for this node\n   */\n  public properties = {\n    isChars: true\n  };\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'annotation';\n  }\n\n}\n","/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  The generic Factory class for creating arbitrary objects\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\n/*****************************************************************/\n/**\n * The Factory node interfaces (one for the node instance, one for the node class)\n */\n\nexport interface FactoryNode {\n  readonly kind: string;\n}\n\n/**\n * @template N  The Node type being created by the factory\n */\nexport interface FactoryNodeClass<N extends FactoryNode> {\n  /**\n   * @param {Factory<N, FactoryNodeClass<N>>} factory  The factory for creating more nodes\n   * @param {any[]} args  Any additional arguments needed by the node\n   * @return {N}  The newly created node\n   */\n  new(factory: Factory<N, FactoryNodeClass<N>>, ...args: any[]): N;\n}\n\n/*****************************************************************/\n/**\n * The Factory interface\n *\n * Factory<N, C> takes a node type N and a node class C, which give\n * the interfaces for the node instance and the node constructors. We\n * need both for two reasons: first, you can't use typeof N to get C,\n * since N is a type not an object, and if N has static members, we\n * may want to access them from the results of getNodeClass(kind)\n * (this is done in MmlNodes, for example).\n *\n * @template N  The node type created by the factory\n * @template C  The class of the node being constructed (for access to static properties)\n */\nexport interface Factory<N extends FactoryNode, C extends FactoryNodeClass<N>> {\n  /**\n   * @param {string} kind  The kind of node to create\n   * @return {N}  The newly created node of the given kind\n   */\n  create(kind: string): N;\n\n  /**\n   * Defines a class for a given node kind\n   *\n   * @param {string} kind  The kind whose class is being defined\n   * @param {C} nodeClass  The class for the given kind\n   */\n  setNodeClass(kind: string, nodeClass: C): void;\n\n  /**\n   * @param {string} kind  The kind of node whose class is to be returned\n   * @return {C}  The class object for the given kind\n   */\n  getNodeClass(kind: string): C;\n\n  /**\n   * @param {string} kind  The kind whose definition is to be deleted\n   */\n  deleteNodeClass(kind: string): void;\n\n  /**\n   * @param {N} node  The node to test if it is of a given kind\n   * @param {string} kind  The kind to test for\n   * @return {boolean}  True if the node is of the given kind, false otherwise\n   */\n  nodeIsKind(node: N, kind: string): boolean;\n\n  /**\n   * @return {string[]}  The names of all the available kinds of nodes\n   */\n  getKinds(): string[];\n}\n\n\n/*****************************************************************/\n/**\n * The generic AbstractFactoryClass interface\n *   (needed for access to defaultNodes via the constructor)\n *\n * @template N  The node type created by the factory\n * @template C  The class of the node being constructed (for access to static properties)\n */\ninterface AbstractFactoryClass<N extends FactoryNode, C extends FactoryNodeClass<N>> extends Function {\n  defaultNodes: {[kind: string]: C};\n}\n\n\n/*****************************************************************/\n/**\n * The generic AbstractFactory class\n *\n * @template N  The node type created by the factory\n * @template C  The class of the node being constructed (for access to static properties)\n */\nexport abstract class AbstractFactory<N extends FactoryNode, C extends FactoryNodeClass<N>> implements Factory<N, C> {\n\n  /**\n   * The default collection of objects to use for the node map\n   */\n  public static defaultNodes = {};\n\n  /**\n   * The default kind\n   */\n  public defaultKind = 'unknown';\n\n  /**\n   * The map of node kinds to node classes\n   */\n  protected nodeMap: Map<string, C> = new Map();\n\n  /**\n   * An object containing functions for creating the various node kinds\n   */\n  protected node: {[kind: string]: (...args: any[]) => N} = {};\n\n  /**\n   * @override\n   */\n  constructor(nodes: {[kind: string]: C} = null) {\n    if (nodes === null) {\n      nodes = (this.constructor as AbstractFactoryClass<N, C>).defaultNodes;\n    }\n    for (const kind of Object.keys(nodes)) {\n      this.setNodeClass(kind, nodes[kind]);\n    }\n  }\n\n  /**\n   * @override\n   */\n  public create(kind: string, ...args: any[]) {\n    return (this.node[kind] || this.node[this.defaultKind])(...args);\n  }\n\n  /**\n   * @override\n   */\n  public setNodeClass(kind: string, nodeClass: C) {\n    this.nodeMap.set(kind, nodeClass);\n    let THIS = this;\n    let KIND = this.nodeMap.get(kind);\n    this.node[kind] = (...args: any[]) => {\n      return new KIND(THIS, ...args);\n    };\n  }\n  /**\n   * @override\n   */\n  public getNodeClass(kind: string): C {\n    return this.nodeMap.get(kind);\n  }\n\n  /**\n   * @override\n   */\n  public deleteNodeClass(kind: string) {\n    this.nodeMap.delete(kind);\n    delete this.node[kind];\n  }\n\n  /**\n   * @override\n   */\n  public nodeIsKind(node: N, kind: string) {\n    return (node instanceof this.getNodeClass(kind));\n  }\n\n  /**\n   * @override\n   */\n  public getKinds() {\n    return Array.from(this.nodeMap.keys());\n  }\n\n}\n"],"names":["open","math","close","n","start","end","display","jax","i","delim","root","typesetRoot","metrics","inputData","outputData","_state","STATE","UNPROCESSED","this","inputJax","render","document","renderActions","renderMath","rerender","RERENDER","state","convert","LAST","renderConvert","compile","COMPILED","typeset","TYPESET","outputJax","isEscaped","updateDocument","_document","removeFromDocument","_restore","setMetrics","em","ex","cwidth","lwidth","scale","containerWidth","lineWidth","restore","INSERTED","reset","AbstractMathItem","FINDMATH","CONVERT","METRICS","name","Error","factory","attributes","children","texclass","TEXCLASS","ORD","setProperty","texClass","childNodes","length","setTeXclass","prev","adjustTeXclass","defaults","AbstractMmlBaseNode","TeXAtom","prototype","MmlMo","selection","get","Math","max","min","create","selected","isEmbellished","isSpacelike","core","coreMO","verifyAttributes","options","undefined","getExplicit","getAllAttributes","updateTeXclass","nextToggleSelection","set","AbstractMmlNode","actiontype","MmlMaction","setChildInheritedAttributes","level","prime","setInherited","addInheritedAttributes","constructor","AbstractMmlLayoutNode","mathvariant","mathsize","mathcolor","mathbackground","dir","scriptlevel","displaystyle","maxwidth","overflow","altimg","alttext","cdgroup","scriptsizemultiplier","sqrt","scriptminsize","infixlinebreakstyle","lineleading","linebreakmultchar","indentshift","indentalign","indenttarget","indentalignfirst","indentshiftfirst","indentalignlast","indentshiftlast","MmlMath","notation","MmlMenclose","INNER","separators","getPrevClass","m","addFakeNodes","concat","child","setInheritedAttributes","getList","replace","fakeNode","fence","form","OPEN","charAt","slice","push","CLOSE","c","properties","text","setText","node","parent","MmlMfenced","linethickness","numalign","denomalign","bevelled","MmlMfrac","src","fontfamily","index","mError","AbstractMmlTokenNode","alt","width","height","valign","MmlMglyph","getText","match","MmlMi","singleCharacter","operatorName","getProperty","OP","prescripts","isKind","mrow","splice","primestyle","appendChild","verifyChildren","fix","kind","MmlMsubsup","MmlMmultiscripts","verifyTree","MmlMprescripts","MmlNone","MmlMn","depth","lspace","voffset","MmlMpadded","MmlMroot","_core","embellished","nonSpaceLength","firstNonSpace","lastNonSpace","MmlMrow","toString","join","MmlInferredMrow","lquote","rquote","MmlMs","NONE","linebreak","MmlMspace","_prime","MmlMsqrt","nodes","sub","subscriptshift","superscriptshift","MmlMsub","MmlMsup","useHeight","indentAttributes","replaceChild","getDefault","columnalign","rowalign","cramped","ralign","split","shift","mtr","isMtd","removeChild","merror","align","groupalign","alignmentscope","columnwidth","rowspacing","columnspacing","rowlines","columnlines","frame","framespacing","equalrows","equalcolumns","side","minlabelspacing","MmlMtable","rowspan","columnspan","INHERIT","MmlMtd","MmlMtext","calign","arity","unshift","MmlMtr","MmlMlabeledtr","over","force","ACCENTS","getScriptlevel","under","setInheritedAccent","accent","value","accentunder","MmlMunderover","MmlMunder","MmlMover","definitionUrl","encoding","MmlSemantics","cd","MmlAnnotationXML","isChars","MmlAnnotation","defaultKind","nodeMap","Map","defaultNodes","Object","keys","setNodeClass","args","nodeClass","THIS","KIND","getNodeClass","deleteNodeClass","delete","nodeIsKind","getKinds","Array","from","AbstractFactory"],"sourceRoot":""}