{"version":3,"file":"8245.nbdime.js","mappings":"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","sources":["webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/a11y/assistive-mml.ts","webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/core/MmlTree/MmlVisitor.ts","webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/core/MmlTree/SerializedMmlVisitor.ts","webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/core/Tree/Visitor.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2019-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Mixin that adds hidden MathML to the output\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {Handler} from '../core/Handler.js';\nimport {MathDocument, AbstractMathDocument, MathDocumentConstructor} from '../core/MathDocument.js';\nimport {MathItem, AbstractMathItem, STATE, newState} from '../core/MathItem.js';\nimport {MmlNode} from '../core/MmlTree/MmlNode.js';\nimport {SerializedMmlVisitor} from '../core/MmlTree/SerializedMmlVisitor.js';\nimport {OptionList, expandable} from '../util/Options.js';\nimport {StyleList} from '../util/StyleList.js';\n\n/*==========================================================================*/\n\nexport class LimitedMmlVisitor extends SerializedMmlVisitor {\n\n  /**\n   * @override\n   */\n  protected getAttributes(node: MmlNode): string {\n    /**\n     * Remove id from attribute output\n     */\n    return super.getAttributes(node).replace(/ ?id=\".*?\"/, '');\n  }\n\n}\n\n/**\n * Generic constructor for Mixins\n */\nexport type Constructor<T> = new(...args: any[]) => T;\n\n/*==========================================================================*/\n\n/**\n * Add STATE value for having assistive MathML (after TYPESETTING)\n */\nnewState('ASSISTIVEMML', 153);\n\n/**\n * The functions added to MathItem for assistive MathML\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport interface AssistiveMmlMathItem<N, T, D> extends MathItem<N, T, D> {\n  /**\n   * @param {MathDocument} document  The document where assistive MathML is being added\n   * @param {boolean} force          True to force assistive MathML even if enableAssistiveMml is false\n   */\n  assistiveMml(document: MathDocument<N, T, D>, force?: boolean): void;\n}\n\n/**\n * The mixin for adding assistive MathML to MathItems\n *\n * @param {B} BaseMathItem      The MathItem class to be extended\n * @return {AssistiveMathItem}  The augmented MathItem class\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n * @template B  The MathItem class to extend\n */\nexport function AssistiveMmlMathItemMixin<N, T, D, B extends Constructor<AbstractMathItem<N, T, D>>>(\n  BaseMathItem: B\n): Constructor<AssistiveMmlMathItem<N, T, D>> & B {\n\n  return class extends BaseMathItem {\n\n    /**\n     * @param {MathDocument} document   The MathDocument for the MathItem\n     * @param {boolean} force           True to force assistive MathML evenif enableAssistiveMml is false\n     */\n    public assistiveMml(document: AssistiveMmlMathDocument<N, T, D>, force: boolean = false) {\n      if (this.state() >= STATE.ASSISTIVEMML) return;\n      if (!this.isEscaped && (document.options.enableAssistiveMml || force)) {\n        const adaptor = document.adaptor;\n        //\n        // Get the serialized MathML\n        //\n        const mml = document.toMML(this.root).replace(/\\n */g, '').replace(/<!--.*?-->/g, '');\n        //\n        // Parse is as HTML and retrieve the <math> element\n        //\n        const mmlNodes = adaptor.firstChild(adaptor.body(adaptor.parse(mml, 'text/html')));\n        //\n        // Create a container for the hidden MathML\n        //\n        const node = adaptor.node('mjx-assistive-mml', {\n          unselectable: 'on', display: (this.display ? 'block' : 'inline')\n        }, [mmlNodes]);\n        //\n        // Hide the typeset math from assistive technology and append the MathML that is visually\n        //   hidden from other users\n        //\n        adaptor.setAttribute(adaptor.firstChild(this.typesetRoot) as N, 'aria-hidden', 'true');\n        adaptor.setStyle(this.typesetRoot, 'position', 'relative');\n        adaptor.append(this.typesetRoot, node);\n      }\n      this.state(STATE.ASSISTIVEMML);\n    }\n\n  };\n\n}\n\n/*==========================================================================*/\n\n/**\n * The functions added to MathDocument for assistive MathML\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport interface AssistiveMmlMathDocument<N, T, D> extends AbstractMathDocument<N, T, D> {\n\n  /**\n   * @param {MmlNode} node   The node to be serializes\n   * @return {string}        The serialization of the node\n   */\n  toMML: (node: MmlNode) => string;\n\n  /**\n   * Add assistive MathML to the MathItems in the MathDocument\n   *\n   * @return {AssistiveMmlMathDocument}   The MathDocument (so calls can be chained)\n   */\n  assistiveMml(): AssistiveMmlMathDocument<N, T, D>;\n\n}\n\n/**\n * The mixin for adding assistive MathML to MathDocuments\n *\n * @param {B} BaseDocument         The MathDocument class to be extended\n * @return {AssistiveMmlMathDocument}  The Assistive MathML MathDocument class\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n * @template B  The MathDocument class to extend\n */\nexport function AssistiveMmlMathDocumentMixin<N, T, D,\nB extends MathDocumentConstructor<AbstractMathDocument<N, T, D>>>(\n  BaseDocument: B\n): MathDocumentConstructor<AssistiveMmlMathDocument<N, T, D>> & B {\n\n  return class BaseClass extends BaseDocument {\n\n    /**\n     * @override\n     */\n    public static OPTIONS: OptionList = {\n      ...BaseDocument.OPTIONS,\n      enableAssistiveMml: true,\n      renderActions: expandable({\n        ...BaseDocument.OPTIONS.renderActions,\n        assistiveMml: [STATE.ASSISTIVEMML]\n      })\n    };\n\n    /**\n     * styles needed for the hidden MathML\n     */\n    public static assistiveStyles: StyleList = {\n      'mjx-assistive-mml': {\n        position: 'absolute !important',\n        top: '0px', left: '0px',\n        clip: 'rect(1px, 1px, 1px, 1px)',\n        padding: '1px 0px 0px 0px !important',\n        border: '0px !important',\n        display: 'block !important',\n        width: 'auto !important',\n        overflow: 'hidden !important',\n        /*\n         *  Don't allow the assistive MathML to become part of the selection\n         */\n        '-webkit-touch-callout': 'none',\n        '-webkit-user-select': 'none',\n        '-khtml-user-select': 'none',\n        '-moz-user-select': 'none',\n        '-ms-user-select': 'none',\n        'user-select': 'none'\n      },\n      'mjx-assistive-mml[display=\"block\"]': {\n        width: '100% !important'\n      }\n    };\n\n    /**\n     * Visitor used for serializing internal MathML nodes\n     */\n    protected visitor: LimitedMmlVisitor;\n\n    /**\n     * Augment the MathItem class used for this MathDocument, and create the serialization visitor.\n     *\n     * @override\n     * @constructor\n     */\n    constructor(...args: any[]) {\n      super(...args);\n      const CLASS = (this.constructor as typeof BaseClass);\n      const ProcessBits = CLASS.ProcessBits;\n      if (!ProcessBits.has('assistive-mml')) {\n        ProcessBits.allocate('assistive-mml');\n      }\n      this.visitor = new LimitedMmlVisitor(this.mmlFactory);\n      this.options.MathItem =\n        AssistiveMmlMathItemMixin<N, T, D, Constructor<AbstractMathItem<N, T, D>>>(\n          this.options.MathItem\n        );\n      if ('addStyles' in this) {\n        (this as any).addStyles(CLASS.assistiveStyles);\n      }\n    }\n\n    /**\n     * @param {MmlNode} node   The node to be serializes\n     * @return {string}        The serialization of the node\n     */\n    public toMML(node: MmlNode): string {\n      return this.visitor.visitTree(node);\n    }\n\n    /**\n     * Add assistive MathML to the MathItems in this MathDocument\n     */\n    public assistiveMml() {\n      if (!this.processed.isSet('assistive-mml')) {\n        for (const math of this.math) {\n          (math as AssistiveMmlMathItem<N, T, D>).assistiveMml(this);\n        }\n        this.processed.set('assistive-mml');\n      }\n      return this;\n    }\n\n    /**\n     * @override\n     */\n    public state(state: number, restore: boolean = false) {\n      super.state(state, restore);\n      if (state < STATE.ASSISTIVEMML) {\n        this.processed.clear('assistive-mml');\n      }\n      return this;\n    }\n\n  };\n\n}\n\n/*==========================================================================*/\n\n/**\n * Add assitive MathML support a Handler instance\n *\n * @param {Handler} handler   The Handler instance to enhance\n * @return {Handler}          The handler that was modified (for purposes of chainging extensions)\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport function AssistiveMmlHandler<N, T, D>(handler: Handler<N, T, D>): Handler<N, T, D> {\n  handler.documentClass =\n    AssistiveMmlMathDocumentMixin<N, T, D, MathDocumentConstructor<AbstractMathDocument<N, T, D>>>(\n      handler.documentClass\n    );\n  return handler;\n}\n","/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  A visitor class that visits MmlNode trees\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {TextNode, XMLNode} from './MmlNode.js';\nimport {MmlFactory} from './MmlFactory.js';\nimport {AbstractVisitor} from '../Tree/Visitor.js';\n\n/*****************************************************************/\n/**\n *  Implements the MmlVisitor (subclass of Visitor, and base class\n *  for visitors that accept MmlNode trees)\n */\n\nexport class MmlVisitor extends AbstractVisitor {\n  /**\n   * @param {MmlFactory} factory  The MmlNode factory (defaults to MmlFactory if not given)\n   *\n   * @constructor\n   * @extends {AbstractVisitor}\n   */\n  constructor(factory: MmlFactory = null) {\n    if (!factory) {\n      factory = new MmlFactory();\n    }\n    super(factory);\n  }\n\n  /***********************************************/\n  /**\n   * Stubs for overriding in subclasses\n   */\n\n  /**\n   * @param {TextNode} node  The TextNode to visit\n   * @param {any[]} args  Any arguments needed by the visitor\n   * @return {any}  Any return value needed for the visitor\n   */\n  public visitTextNode(_node: TextNode, ..._args: any[]): any {}\n\n  /**\n   * @param {XMLNode} node  The XMLNode to visit\n   * @param {any[]} args  Any arguments needed by the visitor\n   * @return {any}  Any return value needed for the visitor\n   */\n  public visitXMLNode(_node: XMLNode, ..._args: any[]): any {}\n\n}\n","/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  A visitor that produces a serilaied MathML string\n *                (replacement for toMathML() output from v2)\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {MmlVisitor} from './MmlVisitor.js';\nimport {MmlNode, TextNode, XMLNode, TEXCLASS, TEXCLASSNAMES} from './MmlNode.js';\nimport {MmlMi} from './MmlNodes/mi.js';\n\n\nexport const DATAMJX = 'data-mjx-';\n\nexport const toEntity = (c: string) => '&#x' + c.codePointAt(0).toString(16).toUpperCase() + ';';\n\ntype PropertyList = {[name: string]: string};\n\n\n/*****************************************************************/\n/**\n *  Implements the SerializedMmlVisitor (subclass of MmlVisitor)\n */\n\nexport class SerializedMmlVisitor extends MmlVisitor {\n\n  /**\n   * Translations for the internal mathvariants\n   */\n  public static variants: PropertyList = {\n    '-tex-calligraphic':      'script',\n    '-tex-bold-calligraphic': 'bold-script',\n    '-tex-oldstyle':          'normal',\n    '-tex-bold-oldstyle':     'bold',\n    '-tex-mathit':            'italic'\n  };\n\n  /**\n   * Attributes to include on every element of a given kind\n   */\n  public static defaultAttributes: {[kind: string]: PropertyList} = {\n    math: {\n      xmlns: 'http://www.w3.org/1998/Math/MathML'\n    }\n  };\n\n  /**\n   * Convert the tree rooted at a particular node into a serialized MathML string\n   *\n   * @param {MmlNode} node  The node to use as the root of the tree to traverse\n   * @return {string}       The MathML string representing the internal tree\n   */\n  public visitTree(node: MmlNode): string {\n    return this.visitNode(node, '');\n  }\n\n  /**\n   * @param {TextNode} node  The text node to visit\n   * @param {string} space   The amount of indenting for this node\n   * @return {string}        The (HTML-quoted) text of the node\n   */\n  public visitTextNode(node: TextNode, _space: string): string {\n    return this.quoteHTML(node.getText());\n  }\n\n  /**\n   * @param {XMLNode} node  The XML node to visit\n   * @param {string} space  The amount of indenting for this node\n   * @return {string}       The serialization of the XML node\n   */\n  public visitXMLNode(node: XMLNode, space: string): string {\n    return space + node.getSerializedXML();\n  }\n\n  /**\n   * Visit an inferred mrow, but don't add the inferred row itself (since\n   * it is supposed to be inferred).\n   *\n   * @param {MmlNode} node  The inferred mrow to visit\n   * @param {string} space  The amount of indenting for this node\n   * @return {string}       The serialized contents of the mrow, properly indented\n   */\n  public visitInferredMrowNode(node: MmlNode, space: string): string {\n    let mml = [];\n    for (const child of node.childNodes) {\n      mml.push(this.visitNode(child, space));\n    }\n    return mml.join('\\n');\n  }\n\n  /**\n   * Visit a TeXAtom node. It is turned into a mrow with the appropriate TeX class\n   * indicator.\n   *\n   * @param {MmlNode} node  The TeXAtom to visit.\n   * @param {string} space  The amount of indenting for this node.\n   * @return {string}       The serialized contents of the mrow, properly indented.\n   */\n  public visitTeXAtomNode(node: MmlNode, space: string): string {\n    let children = this.childNodeMml(node, space + '  ', '\\n');\n    let mml = space + '<mrow' + this.getAttributes(node) + '>' +\n      (children.match(/\\S/) ? '\\n' + children + space : '') + '</mrow>';\n    return mml;\n  }\n\n  /**\n   * @param {MmlNode} node    The annotation node to visit\n   * @param {string} space    The number of spaces to use for indentation\n   * @return {string}         The serializied annotation element\n   */\n  public visitAnnotationNode(node: MmlNode, space: string): string {\n    return space + '<annotation' + this.getAttributes(node) + '>'\n      + this.childNodeMml(node, '', '')\n      + '</annotation>';\n  }\n\n  /**\n   * The generic visiting function:\n   *   Make the string version of the open tag, properly indented, with it attributes\n   *   Increate the indentation level\n   *   Add the childnodes\n   *   Add the end tag with proper spacing (empty tags have the close tag following directly)\n   *\n   * @param {MmlNode} node    The node to visit\n   * @param {string} space    The number of spaces to use for indentation\n   * @return {string}         The serialization of the given node\n   */\n  public visitDefault(node: MmlNode, space: string): string {\n    let kind = node.kind;\n    let [nl, endspace] = (node.isToken || node.childNodes.length === 0 ? ['', ''] : ['\\n', space]);\n    const children = this.childNodeMml(node, space + '  ', nl);\n    return space + '<' + kind + this.getAttributes(node) + '>'\n                 + (children.match(/\\S/) ? nl + children + endspace : '')\n                 + '</' + kind + '>';\n  }\n\n  /**\n   * @param {MmlNode} node    The node whose children are to be added\n   * @param {string} space    The spaces to use for indentation\n   * @param {string} nl       The newline character (or empty)\n   * @return {string}         The serializied children\n   */\n  protected childNodeMml(node: MmlNode, space: string, nl: string): string {\n    let mml = '';\n    for (const child of node.childNodes) {\n      mml += this.visitNode(child, space) + nl;\n    }\n    return mml;\n  }\n\n  /**\n   * @param {MmlNode} node  The node whose attributes are to be produced\n   * @return {string}       The attribute list as a string\n   */\n  protected getAttributes(node: MmlNode): string {\n    const attr = [];\n    const defaults = (this.constructor as typeof SerializedMmlVisitor).defaultAttributes[node.kind] || {};\n    const attributes = Object.assign({},\n                                     defaults,\n                                     this.getDataAttributes(node),\n                                     node.attributes.getAllAttributes()\n                                    );\n    const variants = (this.constructor as typeof SerializedMmlVisitor).variants;\n    if (attributes.hasOwnProperty('mathvariant') && variants.hasOwnProperty(attributes.mathvariant)) {\n      attributes.mathvariant = variants[attributes.mathvariant];\n    }\n    for (const name of Object.keys(attributes)) {\n      const value = String(attributes[name]);\n      if (value === undefined) continue;\n      attr.push(name + '=\"' + this.quoteHTML(value) + '\"');\n    }\n    return attr.length ? ' ' + attr.join(' ') : '';\n  }\n\n  /**\n   * Create the list of data-mjx-* attributes\n   *\n   * @param {MmlNode} node        The node whose data list is to be generated\n   * @return {PropertyList}       The final class attribute list\n   */\n  protected getDataAttributes(node: MmlNode): PropertyList {\n    const data = {} as PropertyList;\n    const variant = node.attributes.getExplicit('mathvariant') as string;\n    const variants = (this.constructor as typeof SerializedMmlVisitor).variants;\n    variant && variants.hasOwnProperty(variant) && this.setDataAttribute(data, 'variant', variant);\n    node.getProperty('variantForm') && this.setDataAttribute(data, 'alternate', '1');\n    node.getProperty('pseudoscript') && this.setDataAttribute(data, 'pseudoscript', 'true');\n    node.getProperty('autoOP') === false && this.setDataAttribute(data, 'auto-op', 'false');\n    const scriptalign = node.getProperty('scriptalign') as string;\n    scriptalign && this.setDataAttribute(data, 'script-align', scriptalign);\n    const texclass = node.getProperty('texClass') as number;\n    if (texclass !== undefined) {\n      let setclass = true;\n      if (texclass === TEXCLASS.OP && node.isKind('mi')) {\n        const name = (node as MmlMi).getText();\n        setclass = !(name.length > 1 && name.match(MmlMi.operatorName));\n      }\n      setclass && this.setDataAttribute(data, 'texclass', texclass < 0 ? 'NONE' : TEXCLASSNAMES[texclass]);\n    }\n    node.getProperty('scriptlevel') && node.getProperty('useHeight') === false &&\n      this.setDataAttribute(data, 'smallmatrix', 'true');\n    return data;\n  }\n\n  /**\n   * @param {PropertyList} data  The class attribute list\n   * @param {string} name    The name for the data-mjx-name attribute\n   * @param {string} value   The value of the attribute\n   */\n  protected setDataAttribute(data: PropertyList, name: string, value: string) {\n    data[DATAMJX + name] = value;\n  }\n\n  /**\n   *  Convert HTML special characters to entities (&amp;, &lt;, &gt;, &quot;)\n   *  Convert multi-character Unicode characters to entities\n   *  Convert non-ASCII characters to entities.\n   *\n   * @param {string} value  The string to be made HTML escaped\n   * @return {string}       The string with escaping performed\n   */\n  protected quoteHTML(value: string): string {\n    return value\n      .replace(/&/g, '&amp;')\n      .replace(/</g, '&lt;').replace(/>/g, '&gt;')\n      .replace(/\\\"/g, '&quot;')\n      .replace(/[\\uD800-\\uDBFF]./g, toEntity)\n      .replace(/[\\u0080-\\uD7FF\\uE000-\\uFFFF]/g, toEntity);\n  }\n\n}\n","/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  The generic visitor class for node trees\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {Node, NodeClass, AbstractNode} from './Node.js';\nimport {NodeFactory} from './NodeFactory.js';\n\n/**\n * The type for the functions associated with each node class\n */\nexport type VisitorFunction = (visitor: NodeFactory<Node, NodeClass>, node: Node, ...args: any[]) => any;\n\n/*****************************************************************/\n/**\n *  Implements the Visitor interface\n */\n\nexport interface Visitor {\n\n  /**\n   * Visit the tree rooted at the given node (passing along any needed parameters)\n   *\n   * @param {Node} tree   The node that is the root of the tree\n   * @param {any[]} args  The arguments to pass to the visitNode functions\n   * @return {any}        Whatever the visitNode function returns for the root tree node\n   */\n  visitTree(tree: Node, ...args: any[]): any;\n\n  /**\n   * Visit a node by calling the visitor function for the given type of node\n   *  (passing along any needed parameters)\n   *\n   * @param {Node} node   The node to visit\n   * @param {any[]} args  The arguments to pass to the visitor function for this node\n   * @return {any}        Whatever the visitor function returns for this node\n   */\n  visitNode(node: Node, ...args: any[]): any;\n\n  /**\n   * The default visitor function for when no node-specific function is defined\n   *\n   * @param {Node} node   The node to visit\n   * @param {any[]} args  The arguments to pass to the visitor function for this node\n   * @return {any}        Whatever the visitor function returns for this node\n   */\n  visitDefault(node: Node, ...args: any[]): any;\n\n  /**\n   * Define a visitor function for a given node kind\n   *\n   * @param {string} kind  The node kind for which the handler is being defined\n   * @param {VisitorFunction} handler  The function to call to handle nodes of this kind\n   */\n  setNodeHandler(kind: string, handler: VisitorFunction): void;\n\n  /**\n   * Remove the visitor function for a given node kind\n   *\n   * @param {string} kind  The node kind whose visitor function is to be removed\n   */\n  removeNodeHandler(kind: string): void;\n\n  /**\n   * The various visitor functions implemented by the subclasses, and any data they need\n   */\n  [property: string]: any;\n}\n\n/*****************************************************************/\n/**\n *  Implements the generic Visitor object\n */\n\nexport abstract class AbstractVisitor implements Visitor {\n  /**\n   * Holds the mapping from node kinds to visitor funcitons\n   */\n  protected nodeHandlers: Map<string, VisitorFunction> = new Map();\n\n  /**\n   *  Visitor functions are named \"visitKindNode\" where \"Kind\" is replaced by\n   *    the node kind; e.g., visitTextNode for kind = text.\n   *\n   *  @param {string} kind  The node kind whose method name is needed\n   *  @return {string}  The name of the visitor method for the given node kind\n   */\n  protected static methodName(kind: string): string {\n    return 'visit' + (kind.charAt(0).toUpperCase() + kind.substr(1)).replace(/[^a-z0-9_]/ig, '_') + 'Node';\n  }\n\n  /**\n   * Create the node handler map by looking for methods with the correct names\n   *   based on the node kinds available from the factory.\n   *\n   * @constructor\n   * @param {NodeFactory} factory  The node factory for the kinds of nodes this visitor handles\n   */\n  constructor(factory: NodeFactory<Node, NodeClass>) {\n    for (const kind of factory.getKinds()) {\n      let method = (this as Visitor)[AbstractVisitor.methodName(kind)] as VisitorFunction;\n      if (method) {\n        this.nodeHandlers.set(kind, method);\n      }\n    }\n  }\n\n  /**\n   * @override\n   */\n  public visitTree(tree: Node, ...args: any[]) {\n    return this.visitNode(tree, ...args);\n  }\n\n  /**\n   * @override\n   */\n  public visitNode(node: Node, ...args: any[]) {\n    let handler = this.nodeHandlers.get(node.kind) || this.visitDefault;\n    return handler.call(this, node, ...args);\n  }\n\n  /**\n   * @override\n   */\n  public visitDefault(node: Node, ...args: any[]) {\n    if (node instanceof AbstractNode) {\n      for (const child of node.childNodes) {\n        this.visitNode(child, ...args);\n      }\n    }\n  }\n\n  /**\n   * @override\n   */\n  public setNodeHandler(kind: string, handler: VisitorFunction) {\n    this.nodeHandlers.set(kind, handler);\n  }\n\n  /**\n   * @override\n   */\n  public removeNodeHandler(kind: string) {\n    this.nodeHandlers.delete(kind);\n  }\n\n}\n"],"names":["getAttributes","node","replace","SerializedMmlVisitor","AssistiveMmlMathItemMixin","BaseMathItem","assistiveMml","document","force","this","state","STATE","ASSISTIVEMML","isEscaped","options","enableAssistiveMml","adaptor","mml","toMML","root","mmlNodes","firstChild","body","parse","unselectable","display","setAttribute","typesetRoot","setStyle","append","AssistiveMmlMathDocumentMixin","BaseDocument","args","CLASS","constructor","ProcessBits","has","allocate","visitor","LimitedMmlVisitor","mmlFactory","MathItem","addStyles","assistiveStyles","visitTree","processed","isSet","math","set","restore","clear","OPTIONS","renderActions","expandable","position","top","left","clip","padding","border","width","overflow","newState","handler","documentClass","factory","MmlFactory","visitTextNode","_node","visitXMLNode","AbstractVisitor","MmlVisitor","DATAMJX","toEntity","c","codePointAt","toString","toUpperCase","visitNode","_space","quoteHTML","getText","space","getSerializedXML","visitInferredMrowNode","childNodes","child","push","join","visitTeXAtomNode","children","childNodeMml","match","visitAnnotationNode","visitDefault","kind","isToken","length","nl","endspace","attr","defaults","defaultAttributes","attributes","Object","assign","getDataAttributes","getAllAttributes","variants","hasOwnProperty","mathvariant","keys","value","String","undefined","data","variant","getExplicit","setDataAttribute","getProperty","scriptalign","texclass","setclass","TEXCLASS","OP","isKind","MmlMi","operatorName","TEXCLASSNAMES","name","xmlns","nodeHandlers","Map","getKinds","method","methodName","charAt","substr","tree","get","call","AbstractNode","setNodeHandler","removeNodeHandler","delete"],"sourceRoot":""}