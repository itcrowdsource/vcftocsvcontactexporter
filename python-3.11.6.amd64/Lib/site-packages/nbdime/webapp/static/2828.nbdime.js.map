{"version":3,"file":"2828.nbdime.js","mappings":"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AAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,KAAgB,EAAAsN,GAAGtN,IACnB,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,KAAgB,EAAAsN,GAAGtN,IACnB,IAAU,EAAAsN,GAAGtN,IACb,KAAgB,EAAAsN,GAAGtN,IACnB,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,KAAgB,EAAAsN,GAAGtN,IACnB,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,KAAgB,EAAAsN,GAAGtN,IACnB,IAAU,EAAAsN,GAAGtN,IACb,KAAgB,EAAAsN,GAAGtN,IACnB,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGtN,IACb,KAAgB,EAAAsN,GAAGtN,IACnB,IAAU,EAAAsN,GAAGtN,IACb,KAAgB,EAAAsN,GAAGtN,IACnB,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGI,MACb,IAAU,EAAAJ,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGQ,KACb,IAAU,EAAAR,GAAGQ,KACb,IAAU,EAAAR,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGtN,IACb,IAAU,EAAAsN,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGtN,IACb,IAAU,EAAAsN,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb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,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGtN,IACb,IAAU,EAAAsN,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGS,KACb,IAAU,EAAAT,GAAGS,KACb,IAAU,EAAAT,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,KAAgB,EAAAsN,GAAGtN,IACnB,IAAU,EAAAsN,GAAGtN,IACb,KAAgB,EAAAsN,GAAGtN,IACnB,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,KAAgB,EAAAsN,GAAGtN,IACnB,IAAU,EAAAsN,GAAGtN,IACb,KAAgB,EAAAsN,GAAGtN,IACnB,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,KAAgB,EAAAsN,GAAGtN,IACnB,IAAU,EAAAsN,GAAGtN,IACb,KAAgB,EAAAsN,GAAGtN,IACnB,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,KAAgB,EAAAsN,GAAGtN,IACnB,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAAsN,GAAGtN,IACb,IAAU,EAAA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","sources":["webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/core/MmlTree/Attributes.ts","webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/core/MmlTree/MmlNode.ts","webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/core/MmlTree/MmlNodes/mo.ts","webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/core/MmlTree/OperatorDictionary.ts","webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/core/Tree/Node.ts","webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/util/Options.ts","webpack://nbdime-webapp/../../node_modules/mathjax-full/ts/util/string.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview Implements Attribute class for MmlNodes\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {PropertyList, Property} from '../Tree/Node.js';\n\n/**\n * A constant for when a property should be inherited from the global defaults lists\n */\nexport const INHERIT = '_inherit_';\n\n/******************************************************************/\n/**\n * Implements the Attributes class for MmlNodes\n *  (These can be set explicitly, inherited from parent nodes,\n *   taken from a default list of values, or taken from global\n *   defaults.)\n */\n\nexport class Attributes {\n  /**\n   * The attributes explicitly set on a node\n   */\n  protected attributes: PropertyList;\n  /**\n   * The attributes inherited from parent nodes\n   */\n  protected inherited: PropertyList;\n  /**\n   * The default attributes for the node type\n   */\n  protected defaults: PropertyList;\n  /**\n   * Global attributes from the math node itself\n   */\n  protected global: PropertyList;\n\n  /**\n   * @param {PropertyList} defaults  The defaults for this node type\n   * @param {PropertyList} global    The global properties (from the math node)\n   *\n   * @constructor\n   */\n  constructor(defaults: PropertyList, global: PropertyList) {\n    this.global = global;\n    this.defaults = Object.create(global);\n    this.inherited = Object.create(this.defaults);\n    this.attributes = Object.create(this.inherited);\n    Object.assign(this.defaults, defaults);\n  }\n\n  /**\n   * @param {string} name     The name of the attribute to set\n   * @param {Property} value  The value to give the named attribute\n   */\n  public set(name: string, value: Property) {\n    this.attributes[name] = value;\n  }\n\n  /**\n   * @param {PropertyList} list  An object containing the properties to set\n   */\n  public setList(list: PropertyList) {\n    Object.assign(this.attributes, list);\n  }\n\n  /**\n   * @param {string} name  The name of the attribute whose value is to be returned\n   * @return {Property}    The value of the named attribute (including inheritance and defaults)\n   */\n  public get(name: string): Property {\n    let value = this.attributes[name];\n    if (value === INHERIT) {\n      value = this.global[name];\n    }\n    return value;\n  }\n\n  /**\n   * @param {string} name  The value of the attribute whose value is to be returned\n   * @return {Property}    The attribute whose name was given if it is explicit on the\n   *                       node (not inherited or defaulted), null otherwise\n   */\n  public getExplicit(name: string): Property {\n    if (!this.attributes.hasOwnProperty(name)) {\n      return undefined;\n    }\n    return this.attributes[name];\n  }\n\n  /**\n   * @param {string[]} names  The names of attributes whose values are to be returned\n   * @return {PropertyList}   An object containing the attributes and their values\n   */\n  public getList(...names: string[]): PropertyList {\n    let values: PropertyList = {};\n    for (const name of names) {\n      values[name] = this.get(name);\n    }\n    return values;\n  }\n\n  /**\n   * @param {string} name  The name of an inherited attribute to be set\n   * @param {Property} value  The value to assign to the named attribute\n   */\n  public setInherited(name: string, value: Property) {\n    this.inherited[name] = value;\n  }\n\n  /**\n   * @param {string} name  The name of an inherited attribute whose value is to be returned\n   * @return {Property}    The value of the named attribute if it is inherited, null otherwise\n   */\n  public getInherited(name: string): Property {\n    return this.inherited[name];\n  }\n\n  /**\n   * @param {string} name  The name of a default attribute whose value is to be returned\n   * @return {Property}    The value of the named attribute if a default exists for it, null otherwise\n   */\n  public getDefault(name: string): Property {\n    return this.defaults[name];\n  }\n\n  /**\n   * @param {string} name  The name of a attribute to check\n   * @return {boolean}     True if attribute is set explicitly or inherited\n   *                         from an explicit mstyle or math attribute\n   */\n  public isSet(name: string): boolean {\n    return this.attributes.hasOwnProperty(name) || this.inherited.hasOwnProperty(name);\n  }\n\n  /**\n   * @param {string} name  The name of an attribute to test for the existence of a default\n   * @return {boolean}     True of there is a default for the named attribute, false otherwise\n   */\n  public hasDefault(name: string): boolean {\n    return (name in this.defaults);\n  }\n\n  /**\n   * @return {string[]}  The names of all the attributes explicitly set on the node\n   */\n  public getExplicitNames(): string[] {\n    return Object.keys(this.attributes);\n  }\n\n  /**\n   * @return {string[]}  The names of all the inherited attributes for the node\n   */\n  public getInheritedNames(): string[] {\n    return Object.keys(this.inherited);\n  }\n\n  /**\n   * @return {string[]}  The names of all the default attributes for the node\n   */\n  public getDefaultNames(): string[] {\n    return Object.keys(this.defaults);\n  }\n\n  /**\n   * @return {string[]}  The names of all the global attributes\n   */\n  public getGlobalNames(): string[] {\n    return Object.keys(this.global);\n  }\n\n  /**\n   * @return {PropertyList}  The attribute object\n   */\n  public getAllAttributes(): PropertyList {\n    return this.attributes;\n  }\n\n  /**\n   * @return {PropertyList}  The inherited object\n   */\n  public getAllInherited(): PropertyList {\n    return this.inherited;\n  }\n\n  /**\n   * @return {PropertyList}  The defaults object\n   */\n  public getAllDefaults(): PropertyList {\n    return this.defaults;\n  }\n\n  /**\n   * @return {PropertyList}  The global object\n   */\n  public getAllGlobals(): PropertyList {\n    return this.global;\n  }\n\n}\n","/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Interfaces and abstract classes for MmlNode objects\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {Attributes, INHERIT} from './Attributes.js';\nimport {Property, PropertyList, Node, AbstractNode, AbstractEmptyNode, NodeClass} from '../Tree/Node.js';\nimport {MmlFactory} from './MmlFactory.js';\nimport {DOMAdaptor} from '../DOMAdaptor.js';\n\n/**\n *  Used in setInheritedAttributes() to pass originating node kind as well as property value\n */\nexport type AttributeList = {[attribute: string]: [string, Property]};\n\n/**\n *  These are the TeX classes for spacing computations\n */\nexport const TEXCLASS = {\n  ORD:   0,\n  OP:    1,\n  BIN:   2,\n  REL:   3,\n  OPEN:  4,\n  CLOSE: 5,\n  PUNCT: 6,\n  INNER: 7,\n  VCENTER: 8,  // Used in TeXAtom, but not for spacing\n  NONE:   -1\n};\n\nexport const TEXCLASSNAMES = ['ORD', 'OP', 'BIN', 'REL', 'OPEN', 'CLOSE', 'PUNCT', 'INNER', 'VCENTER'];\n\n/**\n *  The spacing sizes used by the TeX spacing table below.\n */\nconst TEXSPACELENGTH = ['', 'thinmathspace', 'mediummathspace', 'thickmathspace'];\n\n/**\n * See TeXBook Chapter 18 (p. 170)\n */\nconst TEXSPACE = [\n  [ 0, -1,  2,  3,  0,  0,  0,  1], // ORD\n  [-1, -1,  0,  3,  0,  0,  0,  1], // OP\n  [ 2,  2,  0,  0,  2,  0,  0,  2], // BIN\n  [ 3,  3,  0,  0,  3,  0,  0,  3], // REL\n  [ 0,  0,  0,  0,  0,  0,  0,  0], // OPEN\n  [ 0, -1,  2,  3,  0,  0,  0,  1], // CLOSE\n  [ 1,  1,  0,  1,  1,  1,  1,  1], // PUNCT\n  [ 1, -1,  2,  3,  1,  0,  1,  1]  // INNER\n];\n\n/**\n * Attributes used to determine indentation and shifting\n */\nexport const indentAttributes = [\n  'indentalign', 'indentalignfirst',\n  'indentshift', 'indentshiftfirst'\n];\n\n/**\n * The nodes that can be in the internal MathML tree\n */\nexport type MMLNODE = MmlNode | TextNode | XMLNode;\n\n/*****************************************************************/\n/**\n *  The MmlNode interface (extends Node interface)\n */\n\nexport interface MmlNode extends Node {\n\n  /**\n   * Test various properties of MathML nodes\n   */\n  readonly isToken: boolean;\n  readonly isEmbellished: boolean;\n  readonly isSpacelike: boolean;\n  readonly linebreakContainer: boolean;\n  readonly hasNewLine: boolean;\n\n  /**\n   *  The expected number of children (-1 means use inferred mrow)\n   */\n  readonly arity: number;\n  readonly isInferred: boolean;\n\n  /**\n   *  Get the parent node (skipping inferred mrows and\n   *    other nodes marked as notParent)\n   */\n  readonly Parent: MmlNode;\n  readonly notParent: boolean;\n\n  /**\n   * The actual parent in the tree\n   */\n  parent: MmlNode;\n\n  /**\n   *  values needed for TeX spacing computations\n   */\n  texClass: number;\n  prevClass: number;\n  prevLevel: number;\n\n  /**\n   *  The attributes (explicit and inherited) for this node\n   */\n  attributes: Attributes;\n\n  /**\n   * @return {MmlNode}  For embellished operators, the child node that contains the\n   *                    core <mo> node.  For non-embellished nodes, the original node.\n   */\n  core(): MmlNode;\n\n  /**\n   * @return {MmlNode}  For embellished operators, the core <mo> element (at whatever\n   *                    depth).  For non-embellished nodes, the original node itself.\n   */\n  coreMO(): MmlNode;\n\n  /**\n   * @return {number}   For embellished operators, the index of the child node containing\n   *                    the core <mo>.  For non-embellished nodes, 0.\n   */\n  coreIndex(): number;\n\n  /**\n   * @return {number}  The index of this node in its parent's childNodes array.\n   */\n  childPosition(): number;\n\n  /**\n   * @param {MmlNode} prev  The node that is before this one for TeX spacing purposes\n   *                        (not all nodes count in TeX measurements)\n   * @return {MmlNode}  The node that should be the previous node for the next one\n   *                    in the tree (usually, either the last child, or the node itself)\n   */\n  setTeXclass(prev: MmlNode): MmlNode;\n\n  /**\n   * @return {string}  The spacing to use before this element (one of TEXSPACELENGTH array above)\n   */\n  texSpacing(): string;\n\n  /**\n   * @return {boolean}  The core mo element has an explicit 'form', 'lspace', or 'rspace' attribute\n   */\n  hasSpacingAttributes(): boolean;\n\n  /**\n   * Sets the nodes inherited attributes, and pushes them to the nodes children.\n   *\n   * @param {AttributeList} attributes  The list of inheritable attributes (with the node kinds\n   *                                    from which they came)\n   * @param {boolean} display           The displaystyle to inherit\n   * @param {number} level              The scriptlevel to inherit\n   * @param {boolean} prime             The TeX prime style to inherit (T vs. T', etc).\n   */\n  setInheritedAttributes(attributes: AttributeList, display: boolean, level: number, prime: boolean): void;\n\n  /**\n   * Set the nodes inherited attributes based on the attributes of the given node\n   *   (used for creating extra nodes in the tree after setInheritedAttributes has already run)\n   *\n   * @param {MmlNode} node   The node whose attributes are to be used as a template\n   */\n  inheritAttributesFrom(node: MmlNode): void;\n\n  /**\n   * Replace the current node with an error message (or the name of the node)\n   *\n   * @param {string} message         The error message to use\n   * @param {PropertyList} options   The options telling how much to verify\n   * @param {boolean} short          True means use just the kind if not using full errors\n   * @return {MmlNode}               The construted merror\n   */\n  mError(message: string, options: PropertyList, short?: boolean): MmlNode;\n\n  /**\n   * Check integrity of MathML structure\n   *\n   * @param {PropertyList} options  The options controlling the check\n   */\n  verifyTree(options?: PropertyList): void;\n}\n\n\n/*****************************************************************/\n/**\n *  The MmlNode class interface (extends the NodeClass)\n */\n\nexport interface MmlNodeClass extends NodeClass {\n\n  /**\n   *  The list of default attribute values for nodes of this class\n   */\n  defaults?: PropertyList;\n\n  /**\n   * An MmlNode takes a NodeFactory (so it can create additional nodes as needed), a list\n   *   of attributes, and an array of children and returns the desired MmlNode with\n   *   those attributes and children\n   *\n   * @constructor\n   * @param {MmlFactory} factory       The MathML node factory to use to create additional nodes\n   * @param {PropertyList} attributes  The list of initial attributes for the node\n   * @param {MmlNode[]} children       The initial child nodes (more can be added later)\n   */\n  new (factory: MmlFactory, attributes?: PropertyList, children?: MmlNode[]): MmlNode;\n\n}\n\n\n/*****************************************************************/\n/**\n *  The abstract MmlNode class (extends the AbstractNode class and implements\n *  the IMmlNode interface)\n */\n\nexport abstract class AbstractMmlNode extends AbstractNode implements MmlNode {\n\n  /**\n   * The properties common to all MathML nodes\n   */\n  public static defaults: PropertyList = {\n    mathbackground: INHERIT,\n    mathcolor: INHERIT,\n    mathsize: INHERIT,  // technically only for token elements, but <mstyle mathsize=\"...\"> should\n    //    scale all spaces, fractions, etc.\n    dir: INHERIT\n  };\n\n  /**\n   *  This lists properties that do NOT get inherited between specific kinds\n   *  of nodes.  The outer keys are the node kinds that are being inherited FROM,\n   *  while the second level of keys are the nodes that INHERIT the values.  Any\n   *  property appearing in the innermost list is NOT inherited by the pair.\n   *\n   *  For example, an mpadded element will not inherit a width attribute from an mstyle node.\n   */\n  public static noInherit: {[node1: string]: {[node2: string]: {[attribute: string]: boolean}}} = {\n    mstyle: {\n      mpadded: {width: true, height: true, depth: true, lspace: true, voffset: true},\n      mtable:  {width: true, height: true, depth: true, align: true}\n    },\n    maligngroup: {\n      mrow: {groupalign: true},\n      mtable: {groupalign: true}\n    }\n  };\n\n  /**\n   * This lists the attributes that should always be inherited,\n   *   even when there is no default value for the attribute.\n   */\n  public static alwaysInherit: {[name: string]: boolean} = {\n    scriptminsize: true,\n    scriptsizemultiplier: true\n  };\n\n  /**\n   * This is the list of options for the verifyTree() method\n   */\n  public static verifyDefaults: PropertyList = {\n    checkArity: true,\n    checkAttributes: false,\n    fullErrors: false,\n    fixMmultiscripts: true,\n    fixMtables: true\n  };\n\n  /*\n   * These default to being unset (the node doesn't participate in spacing calculations).\n   * The correct values are produced when the setTeXclass() method is called on the tree.\n   */\n\n  /**\n   * The TeX class for the preceding node\n   */\n  public prevClass: number = null;\n\n  /**\n   * The scriptlevel of the preceding node\n   */\n  public prevLevel: number = null;\n\n  /**\n   * This node's attributes\n   */\n  public attributes: Attributes;\n\n  /**\n   *  Child nodes are MmlNodes (special case of Nodes).\n   */\n  public childNodes: MmlNode[];\n\n  /**\n   * The parent is an MmlNode\n   */\n  public parent: MmlNode;\n\n  /**\n   * The node factory is an MmlFactory\n   */\n  public readonly factory: MmlFactory;\n\n  /**\n   * The TeX class of this node (obtained via texClass below)\n   */\n  protected texclass: number = null;\n\n  /**\n   *  Create an MmlNode:\n   *    If the arity is -1, add the inferred row (created by the factory)\n   *    Add the children, if any\n   *    Create the Attribute object from the class defaults and the global defaults (the math node defaults)\n   *\n   *  @override\n   */\n  constructor(factory: MmlFactory, attributes: PropertyList = {}, children: MmlNode[] = []) {\n    super(factory);\n    if (this.arity < 0) {\n      this.childNodes = [factory.create('inferredMrow')];\n      this.childNodes[0].parent = this;\n    }\n    this.setChildren(children);\n    this.attributes = new Attributes(\n      factory.getNodeClass(this.kind).defaults,\n      factory.getNodeClass('math').defaults\n    );\n    this.attributes.setList(attributes);\n  }\n\n  /**\n   * @override\n   *\n   * @param {boolean} keepIds   True to copy id attributes, false to skip them.\n   *                              (May cause error in the future, since not part of the interface.)\n   * @return {AbstractMmlNode}  The copied node tree.\n   */\n  public copy(keepIds: boolean = false): AbstractMmlNode {\n    const node = this.factory.create(this.kind) as AbstractMmlNode;\n    node.properties = {...this.properties};\n    if (this.attributes) {\n      const attributes = this.attributes.getAllAttributes();\n      for (const name of Object.keys(attributes)) {\n        if (name !== 'id' || keepIds) {\n          node.attributes.set(name, attributes[name]);\n        }\n      }\n    }\n    if (this.childNodes && this.childNodes.length) {\n      let children = this.childNodes as MmlNode[];\n      if (children.length === 1 && children[0].isInferred) {\n        children = children[0].childNodes as MmlNode[];\n      }\n      for (const child of children) {\n        if (child) {\n          node.appendChild(child.copy() as MmlNode);\n        } else {\n          node.childNodes.push(null);\n        }\n      }\n    }\n    return node;\n  }\n\n  /**\n   * The TeX class for this node\n   */\n  public get texClass(): number {\n    return this.texclass;\n  }\n\n  /**\n   * The TeX class for this node\n   */\n  public set texClass(texClass: number) {\n    this.texclass = texClass;\n  }\n\n  /**\n   * @return {boolean}  true if this is a token node\n   */\n  public get isToken(): boolean {\n    return false;\n  }\n\n  /**\n   * @return {boolean}  true if this is an embellished operator\n   */\n  public get isEmbellished(): boolean {\n    return false;\n  }\n\n  /**\n   * @return {boolean}  true if this is a space-like node\n   */\n  public get isSpacelike(): boolean {\n    return false;\n  }\n\n  /**\n   * @return {boolean}  true if this is a node that supports linebreaks in its children\n   */\n  public get linebreakContainer(): boolean {\n    return false;\n  }\n\n  /**\n   * @return {boolean}  true if this node contains a line break\n   */\n  public get hasNewLine(): boolean {\n    return false;\n  }\n\n  /**\n   * @return {number}  The number of children allowed, or Infinity for any number,\n   *                   or -1 for when an inferred row is needed for the children.\n   *                   Special case is 1, meaning at least one (other numbers\n   *                   mean exactly that many).\n   */\n  public get arity(): number {\n    return Infinity;\n  }\n\n  /**\n   * @return {boolean}  true if this is an inferred mrow\n   */\n  public get isInferred(): boolean {\n    return false;\n  }\n\n  /**\n   * @return {MmlNode}  The logical parent of this node (skipping over inferred rows\n   *                      some other node types)\n   */\n  public get Parent(): MmlNode {\n    let parent = this.parent;\n    while (parent && parent.notParent) {\n      parent = parent.Parent;\n    }\n    return parent;\n  }\n\n  /**\n   * @return {boolean}  true if this is a node that doesn't count as a parent node in Parent()\n   */\n  public get notParent(): boolean {\n    return false;\n  }\n\n  /**\n   * If there is an inferred row, the the children of that instead\n   *\n   * @override\n   */\n  public setChildren(children: MmlNode[]) {\n    if (this.arity < 0) {\n      return this.childNodes[0].setChildren(children);\n    }\n    return super.setChildren(children);\n  }\n  /**\n   * If there is an inferred row, append to that instead.\n   * If a child is inferred, append its children instead.\n   *\n   * @override\n   */\n  public appendChild(child: MmlNode) {\n    if (this.arity < 0) {\n      this.childNodes[0].appendChild(child);\n      return child;\n    }\n    if (child.isInferred) {\n      //\n      //  If we can have arbitrary children, remove the inferred mrow\n      //  (just add its children).\n      //\n      if (this.arity === Infinity) {\n        child.childNodes.forEach((node) => super.appendChild(node));\n        return child;\n      }\n      //\n      //  Otherwise, convert the inferred mrow to an explicit mrow\n      //\n      const original = child;\n      child = this.factory.create('mrow');\n      child.setChildren(original.childNodes);\n      child.attributes = original.attributes;\n      for (const name of original.getPropertyNames()) {\n        child.setProperty(name, original.getProperty(name));\n      }\n    }\n    return super.appendChild(child);\n  }\n  /**\n   * If there is an inferred row, remove the child from there\n   *\n   * @override\n   */\n  public replaceChild(newChild: MmlNode, oldChild: MmlNode) {\n    if (this.arity < 0) {\n      this.childNodes[0].replaceChild(newChild, oldChild);\n      return newChild;\n    }\n    return super.replaceChild(newChild, oldChild);\n  }\n\n  /**\n   * @override\n   */\n  public core(): MmlNode {\n    return this;\n  }\n\n  /**\n   * @override\n   */\n  public coreMO(): MmlNode {\n    return this;\n  }\n\n  /**\n   * @override\n   */\n  public coreIndex() {\n    return 0;\n  }\n\n  /**\n   * @override\n   */\n  public childPosition() {\n    let child: MmlNode = this;\n    let parent = child.parent;\n    while (parent && parent.notParent) {\n      child = parent;\n      parent = parent.parent;\n    }\n    if (parent) {\n      let i = 0;\n      for (const node of parent.childNodes) {\n        if (node === child) {\n          return i;\n        }\n        i++;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @override\n   */\n  public setTeXclass(prev: MmlNode): MmlNode {\n    this.getPrevClass(prev);\n    return (this.texClass != null ? this : prev);\n  }\n  /**\n   * For embellished operators, get the data from the core and clear the core\n   *\n   * @param {MmlNode} core  The core <mo> for this node\n   */\n  protected updateTeXclass(core: MmlNode) {\n    if (core) {\n      this.prevClass = core.prevClass;\n      this.prevLevel = core.prevLevel;\n      core.prevClass = core.prevLevel = null;\n      this.texClass = core.texClass;\n    }\n  }\n  /**\n   * Get the previous element's texClass and scriptlevel\n   *\n   * @param {MmlNode} prev  The previous node to this one\n   */\n  protected getPrevClass(prev: MmlNode) {\n    if (prev) {\n      this.prevClass = prev.texClass;\n      this.prevLevel = prev.attributes.get('scriptlevel') as number;\n    }\n  }\n\n  /**\n   * @return {string}  returns the spacing to use before this node\n   */\n  public texSpacing(): string {\n    let prevClass = (this.prevClass != null ? this.prevClass : TEXCLASS.NONE);\n    let texClass = this.texClass || TEXCLASS.ORD;\n    if (prevClass === TEXCLASS.NONE || texClass === TEXCLASS.NONE) {\n      return '';\n    }\n    if (prevClass === TEXCLASS.VCENTER) {\n      prevClass = TEXCLASS.ORD;\n    }\n    if (texClass === TEXCLASS.VCENTER) {\n      texClass = TEXCLASS.ORD;\n    }\n    let space = TEXSPACE[prevClass][texClass];\n    if ((this.prevLevel > 0 || this.attributes.get('scriptlevel') > 0) && space >= 0) {\n      return '';\n    }\n    return TEXSPACELENGTH[Math.abs(space)];\n  }\n\n  /**\n   * @return {boolean}  The core mo element has an explicit 'form' attribute\n   */\n  public hasSpacingAttributes(): boolean {\n    return this.isEmbellished && this.coreMO().hasSpacingAttributes();\n  }\n\n  /**\n   * Sets the inherited propertis for this node, and pushes inherited properties to the children\n   *\n   *   For each inheritable attribute:\n   *     If the node has a default for this attribute, try to inherit it\n   *       but check if the noInherit object prevents that.\n   *   If the node doesn't have an explicit displaystyle, inherit it\n   *   If the node doesn't have an explicit scriptstyle, inherit it\n   *   If the prime style is true, set it as a property (it is not a MathML attribute)\n   *   Check that the number of children is correct\n   *   Finally, push any inherited attributes to teh children.\n   *\n   * @override\n   */\n  public setInheritedAttributes(attributes: AttributeList = {},\n                                display: boolean = false, level: number = 0, prime: boolean = false) {\n    let defaults = this.attributes.getAllDefaults();\n    for (const key of Object.keys(attributes)) {\n      if (defaults.hasOwnProperty(key) || AbstractMmlNode.alwaysInherit.hasOwnProperty(key)) {\n        let [node, value] = attributes[key];\n        let noinherit = (AbstractMmlNode.noInherit[node] || {})[this.kind] || {};\n        if (!noinherit[key]) {\n          this.attributes.setInherited(key, value);\n        }\n      }\n    }\n    let displaystyle = this.attributes.getExplicit('displaystyle');\n    if (displaystyle === undefined) {\n      this.attributes.setInherited('displaystyle', display);\n    }\n    let scriptlevel = this.attributes.getExplicit('scriptlevel');\n    if (scriptlevel === undefined) {\n      this.attributes.setInherited('scriptlevel', level);\n    }\n    if (prime) {\n      this.setProperty('texprimestyle', prime);\n    }\n    let arity = this.arity;\n    if (arity >= 0 && arity !== Infinity && ((arity === 1 && this.childNodes.length === 0) ||\n                                             (arity !== 1 && this.childNodes.length !== arity))) {\n      //\n      //  Make sure there are the right number of child nodes\n      //  (trim them or add empty mrows)\n      //\n      if (arity < this.childNodes.length) {\n        this.childNodes = this.childNodes.slice(0, arity);\n      } else {\n        while (this.childNodes.length < arity) {\n          this.appendChild(this.factory.create('mrow'));\n        }\n      }\n    }\n    this.setChildInheritedAttributes(attributes, display, level, prime);\n  }\n  /**\n   * Apply inherited attributes to all children\n   * (Some classes override this to handle changes in displaystyle and scriptlevel)\n   *\n   * @param {AttributeList} attributes  The list of inheritable attributes (with the node kinds\n   *                                    from which they came)\n   * @param {boolean} display           The displaystyle to inherit\n   * @param {number} level              The scriptlevel to inherit\n   * @param {boolean} prime             The TeX prime style to inherit (T vs. T', etc).\n   */\n  protected setChildInheritedAttributes(attributes: AttributeList, display: boolean, level: number, prime: boolean) {\n    for (const child of this.childNodes) {\n      child.setInheritedAttributes(attributes, display, level, prime);\n    }\n  }\n  /**\n   * Used by subclasses to add their own attributes to the inherited list\n   * (e.g., mstyle uses this to augment the inherited attibutes)\n   *\n   * @param {AttributeList} current    The current list of inherited attributes\n   * @param {PropertyList} attributes  The new attributes to add into the list\n   */\n  protected addInheritedAttributes(current: AttributeList, attributes: PropertyList) {\n    let updated: AttributeList = {...current};\n    for (const name of Object.keys(attributes)) {\n      if (name !== 'displaystyle' && name !== 'scriptlevel' && name !== 'style') {\n        updated[name] = [this.kind, attributes[name]];\n      }\n    }\n    return updated;\n  }\n\n  /**\n   * Set the nodes inherited attributes based on the attributes of the given node\n   *   (used for creating extra nodes in the tree after setInheritedAttributes has already run)\n   *\n   * @param {MmlNode} node   The node whose attributes are to be used as a template\n   */\n  public inheritAttributesFrom(node: MmlNode) {\n    const attributes = node.attributes;\n    const display = attributes.get('displaystyle') as boolean;\n    const scriptlevel = attributes.get('scriptlevel') as number;\n    const defaults: AttributeList = (!attributes.isSet('mathsize') ? {} : {\n      mathsize: ['math', attributes.get('mathsize')]\n    });\n    const prime = node.getProperty('texprimestyle') as boolean || false;\n    this.setInheritedAttributes(defaults, display, scriptlevel, prime);\n  }\n\n  /**\n   * Verify the attributes, and that there are the right number of children.\n   * Then verify the children.\n   *\n   * @param {PropertyList} options   The options telling how much to verify\n   */\n  public verifyTree(options: PropertyList = null) {\n    if (options === null) {\n      return;\n    }\n    this.verifyAttributes(options);\n    let arity = this.arity;\n    if (options['checkArity']) {\n      if (arity >= 0 && arity !== Infinity &&\n          ((arity === 1 && this.childNodes.length === 0) ||\n           (arity !== 1 && this.childNodes.length !== arity))) {\n        this.mError('Wrong number of children for \"' + this.kind + '\" node', options, true);\n      }\n    }\n    this.verifyChildren(options);\n  }\n\n  /**\n   * Verify that all the attributes are valid (i.e., have defaults)\n   *\n   * @param {PropertyList} options   The options telling how much to verify\n   */\n  protected verifyAttributes(options: PropertyList) {\n    if (options['checkAttributes']) {\n      const attributes = this.attributes;\n      const bad = [];\n      for (const name of attributes.getExplicitNames()) {\n        if (name.substr(0, 5) !== 'data-' && attributes.getDefault(name) === undefined &&\n            !name.match(/^(?:class|style|id|(?:xlink:)?href)$/)) {\n          // FIXME: provide a configurable checker for names that are OK\n          bad.push(name);\n        }\n        // FIXME: add ability to check attribute values?\n      }\n      if (bad.length) {\n        this.mError('Unknown attributes for ' + this.kind + ' node: ' + bad.join(', '), options);\n      }\n    }\n  }\n\n  /**\n   * Verify the children.\n   *\n   * @param {PropertyList} options   The options telling how much to verify\n   */\n  protected verifyChildren(options: PropertyList) {\n    for (const child of this.childNodes) {\n      child.verifyTree(options);\n    }\n  }\n\n  /**\n   * Replace the current node with an error message (or the name of the node)\n   *\n   * @param {string} message         The error message to use\n   * @param {PropertyList} options   The options telling how much to verify\n   * @param {boolean} short          True means use just the kind if not using full errors\n   * @return {MmlNode}               The constructed merror\n   */\n  public mError(message: string, options: PropertyList, short: boolean = false): MmlNode {\n    if (this.parent && this.parent.isKind('merror')) {\n      return null;\n    }\n    let merror = this.factory.create('merror');\n    merror.attributes.set('data-mjx-message', message);\n    if (options['fullErrors'] || short) {\n      let mtext = this.factory.create('mtext');\n      let text = this.factory.create('text') as TextNode;\n      text.setText(options['fullErrors'] ? message : this.kind);\n      mtext.appendChild(text);\n      merror.appendChild(mtext);\n      this.parent.replaceChild(merror, this);\n    } else {\n      this.parent.replaceChild(merror, this);\n      merror.appendChild(this);\n    }\n    return merror;\n  }\n\n}\n\n/*****************************************************************/\n/**\n *  The abstract MmlNode Token node class (extends the AbstractMmlNode)\n */\n\nexport abstract class AbstractMmlTokenNode extends AbstractMmlNode {\n\n  /**\n   * Add the attributes common to all token nodes\n   */\n  public static defaults: PropertyList = {\n      ...AbstractMmlNode.defaults,\n    mathvariant: 'normal',\n    mathsize: INHERIT\n  };\n\n  /**\n   * @override\n   */\n  public get isToken() {\n    return true;\n  }\n\n  /**\n   * Get the text of the token node (skipping mglyphs, and combining\n   *   multiple text nodes)\n   */\n  public getText() {\n    let text = '';\n    for (const child of this.childNodes) {\n      if (child instanceof TextNode) {\n        text += child.getText();\n      }\n    }\n    return text;\n  }\n\n  /**\n   * Only inherit to child nodes that are AbstractMmlNodes (not TextNodes)\n   *\n   * @override\n   */\n  protected setChildInheritedAttributes(attributes: AttributeList, display: boolean, level: number, prime: boolean) {\n    for (const child of this.childNodes) {\n      if (child instanceof AbstractMmlNode) {\n        child.setInheritedAttributes(attributes, display, level, prime);\n      }\n    }\n  }\n\n  /**\n   * Only step into children that are AbstractMmlNodes (not TextNodes)\n   * @override\n   */\n  public walkTree(func: (node: Node, data?: any) => void, data?: any) {\n    func(this, data);\n    for (const child of this.childNodes) {\n      if (child instanceof AbstractMmlNode) {\n        child.walkTree(func, data);\n      }\n    }\n    return data;\n  }\n\n}\n\n\n/*****************************************************************/\n/**\n *  The abstract MmlNode Layout class (extends the AbstractMmlNode)\n *\n *  These have inferred mrows (so only one child) and can be\n *  spacelike or embellished based on their contents.\n */\n\nexport abstract class AbstractMmlLayoutNode extends AbstractMmlNode {\n\n  /**\n   * Use the same defaults as AbstractMmlNodes\n   */\n  public static defaults: PropertyList = AbstractMmlNode.defaults;\n\n  /**\n   * @override\n   */\n  public get isSpacelike() {\n    return this.childNodes[0].isSpacelike;\n  }\n\n  /**\n   * @override\n   */\n  public get isEmbellished() {\n    return this.childNodes[0].isEmbellished;\n  }\n\n  /**\n   * @override\n   */\n  public get arity() {\n    return -1;\n  }\n\n  /**\n   * @override\n   */\n  public core() {\n    return this.childNodes[0];\n  }\n\n  /**\n   * @override\n   */\n  public coreMO() {\n    return this.childNodes[0].coreMO();\n  }\n\n  /**\n   * @override\n   */\n  public setTeXclass(prev: MmlNode) {\n    prev = this.childNodes[0].setTeXclass(prev);\n    this.updateTeXclass(this.childNodes[0]);\n    return prev;\n  }\n}\n\n/*****************************************************************/\n/**\n *  The abstract MmlNode-with-base-node Class (extends the AbstractMmlNode)\n *\n *  These have a base element and other elemetns, (e.g., script elements for msubsup).\n *  They can be embellished (if their base is), and get their TeX classes\n *    from their base with their scripts being handled as separate math lists.\n */\n\nexport abstract class AbstractMmlBaseNode extends AbstractMmlNode {\n\n  /**\n   * Use the same defaults as AbstractMmlNodes\n   */\n  public static defaults: PropertyList = AbstractMmlNode.defaults;\n\n  /**\n   * @override\n   */\n  public get isEmbellished() {\n    return this.childNodes[0].isEmbellished;\n  }\n\n  /**\n   * @override\n   */\n  public core() {\n    return this.childNodes[0];\n  }\n\n  /**\n   * @override\n   */\n  public coreMO() {\n    return this.childNodes[0].coreMO();\n  }\n\n  /**\n   * @override\n   */\n  public setTeXclass(prev: MmlNode) {\n    this.getPrevClass(prev);\n    this.texClass = TEXCLASS.ORD;\n    let base = this.childNodes[0];\n    if (base) {\n      if (this.isEmbellished || base.isKind('mi')) {\n        prev = base.setTeXclass(prev);\n        this.updateTeXclass(this.core());\n      } else {\n        base.setTeXclass(null);\n        prev = this;\n      }\n    } else {\n      prev = this;\n    }\n    for (const child of this.childNodes.slice(1)) {\n      if (child) {\n        child.setTeXclass(null);\n      }\n    }\n    return prev;\n  }\n}\n\n/*****************************************************************/\n/**\n *  The abstract MmlNode Empty Class (extends AbstractEmptyNode, implements MmlNode)\n *\n *  These have no children and no attributes (TextNode and XMLNode), so we\n *  override all the methods dealing with them, and with the data that usually\n *  goes with an MmlNode.\n */\n\nexport abstract class AbstractMmlEmptyNode extends AbstractEmptyNode implements MmlNode {\n\n  /**\n   *  Parent is an MmlNode\n   */\n  public parent: MmlNode;\n\n  /**\n   * @return {boolean}  Not a token element\n   */\n  public get isToken(): boolean {\n    return false;\n  }\n\n  /**\n   * @return {boolean}  Not embellished\n   */\n  public get isEmbellished(): boolean {\n    return false;\n  }\n\n  /**\n   * @return {boolean}  Not space-like\n   */\n  public get isSpacelike(): boolean {\n    return false;\n  }\n\n  /**\n   * @return {boolean}  Not a container of any kind\n   */\n  public get linebreakContainer(): boolean {\n    return false;\n  }\n\n  /**\n   * @return {boolean}  Does not contain new lines\n   */\n  public get hasNewLine(): boolean {\n    return false;\n  }\n\n  /**\n   * @return {number}  No children\n   */\n  public get arity(): number {\n    return 0;\n  }\n\n  /**\n   * @return {boolean}  Is not an inferred row\n   */\n  public get isInferred(): boolean {\n    return false;\n  }\n\n  /**\n   * @return {boolean}  Is not a container element\n   */\n  public get notParent(): boolean {\n    return false;\n  }\n\n  /**\n   * @return {MmlNode}  Parent is the actual parent\n   */\n  public get Parent(): MmlNode {\n    return this.parent;\n  }\n\n  /**\n   * @return {number}  No TeX class\n   */\n  public get texClass(): number {\n    return TEXCLASS.NONE;\n  }\n\n  /**\n   * @return {number}  No previous element\n   */\n  public get prevClass(): number {\n    return TEXCLASS.NONE;\n  }\n\n  /**\n   * @return {number}  No previous element\n   */\n  public get prevLevel(): number {\n    return 0;\n  }\n\n  /**\n   * @return {boolean}  The core mo element has an explicit 'form' attribute\n   */\n  public hasSpacingAttributes(): boolean {\n    return false;\n  }\n\n  /**\n   * return {Attributes}  No attributes, so don't store one\n   */\n  public get attributes(): Attributes {\n    return null;\n  }\n\n  /**\n   * @override\n   */\n  public core(): MmlNode {\n    return this;\n  }\n\n  /**\n   * @override\n   */\n  public coreMO(): MmlNode {\n    return this;\n  }\n\n  /**\n   * @override\n   */\n  public coreIndex() {\n    return 0;\n  }\n\n  /**\n   * @override\n   */\n  public childPosition() {\n    return 0;\n  }\n\n  /**\n   * @override\n   */\n  public setTeXclass(prev: MmlNode) {\n    return prev;\n  }\n  /**\n   * @override\n   */\n  public texSpacing() {\n    return '';\n  }\n\n  /**\n   * No children or attributes, so ignore this call.\n   *\n   * @override\n   */\n  public setInheritedAttributes(_attributes: AttributeList, _display: boolean, _level: number, _prime: boolean) {}\n\n  /**\n   * No children or attributes, so ignore this call.\n   *\n   * @override\n   */\n  public inheritAttributesFrom(_node: MmlNode) {}\n\n  /**\n   * No children or attributes, so ignore this call.\n   *\n   * @param {PropertyList} options  The options for the check\n   */\n  public verifyTree(_options: PropertyList) {}\n\n  /**\n   *  @override\n   */\n  public mError(_message: string, _options: PropertyList, _short: boolean = false) {\n    return null as MmlNode;\n  }\n\n}\n\n/*****************************************************************/\n/**\n *  The TextNode Class (extends AbstractMmlEmptyNode)\n */\n\nexport class TextNode extends AbstractMmlEmptyNode {\n  /**\n   * The text for this node\n   */\n  protected text: string = '';\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'text';\n  }\n\n  /**\n   * @return {string}  Return the node's text\n   */\n  public getText(): string {\n    return this.text;\n  }\n\n  /**\n   * @param {string} text  The text to use for the node\n   * @return {TextNode}  The text node (for chaining of method calls)\n   */\n  public setText(text: string): TextNode {\n    this.text = text;\n    return this;\n  }\n\n  /**\n   * @override\n   */\n  public copy() {\n    return (this.factory.create(this.kind) as TextNode).setText(this.getText());\n  }\n\n  /**\n   * Just use the text\n   */\n  public toString() {\n    return this.text;\n  }\n\n}\n\n\n/*****************************************************************/\n/**\n *  The XMLNode Class (extends AbstractMmlEmptyNode)\n */\n\nexport class XMLNode extends AbstractMmlEmptyNode {\n  /**\n   * The XML content for this node\n   */\n  protected xml: Object = null;\n\n  /**\n   * DOM adaptor for the content\n   */\n  protected adaptor: DOMAdaptor<any, any, any> = null;\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'XML';\n  }\n\n  /**\n   * @return {Object}  Return the node's XML content\n   */\n  public getXML(): Object {\n    return this.xml;\n  }\n\n  /**\n   * @param {object} xml  The XML content to be saved\n   * @param {DOMAdaptor} adaptor DOM adaptor for the content\n   * @return {XMLNode}  The XML node (for chaining of method calls)\n   */\n  public setXML(xml: Object, adaptor: DOMAdaptor<any, any, any> = null): XMLNode {\n    this.xml = xml;\n    this.adaptor = adaptor;\n    return this;\n  }\n\n  /**\n   * @return {string}  The serialized XML content\n   */\n  public getSerializedXML(): string {\n    return this.adaptor.serializeXML(this.xml);\n  }\n\n  /**\n   * @override\n   */\n  public copy(): XMLNode {\n    return (this.factory.create(this.kind) as XMLNode).setXML(this.adaptor.clone(this.xml));\n  }\n\n  /**\n   * Just indicate that this is XML data\n   */\n  public toString() {\n    return 'XML data';\n  }\n\n}\n","/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the MmlMo node\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {PropertyList} from '../../Tree/Node.js';\nimport {AbstractMmlTokenNode, MmlNode, AttributeList, TEXCLASS} from '../MmlNode.js';\nimport {MmlMrow} from './mrow.js';\nimport {MmlMover, MmlMunder, MmlMunderover} from './munderover.js';\nimport {OperatorList, OPTABLE, getRange, MMLSPACING} from '../OperatorDictionary.js';\nimport {unicodeChars, unicodeString} from '../../../util/string.js';\n\n/*****************************************************************/\n/**\n *  Implements the MmlMo node class (subclass of AbstractMmlTokenNode)\n */\n\nexport class MmlMo extends AbstractMmlTokenNode {\n\n  /**\n   * @override\n   */\n  public static defaults: PropertyList = {\n    ...AbstractMmlTokenNode.defaults,\n    form: 'infix',\n    fence: false,\n    separator: false,\n    lspace: 'thickmathspace',\n    rspace: 'thickmathspace',\n    stretchy: false,\n    symmetric: false,\n    maxsize: 'infinity',\n    minsize: '0em', // MathML says '1em', but that is larger than some natural sizes\n    largeop: false,\n    movablelimits: false,\n    accent: false,\n    linebreak: 'auto',\n    lineleading: '1ex',\n    linebreakstyle: 'before',\n    indentalign: 'auto',\n    indentshift: '0',\n    indenttarget: '',\n    indentalignfirst: 'indentalign',\n    indentshiftfirst: 'indentshift',\n    indentalignlast: 'indentalign',\n    indentshiftlast: 'indentshift'\n  };\n\n  /**\n   * The MathML spacing values for the TeX classes\n   */\n  public static MMLSPACING = MMLSPACING;\n\n  /**\n   * The Operator Dictionary\n   */\n  public static OPTABLE: {[form: string]: OperatorList} = OPTABLE;\n\n  /**\n   * Pattern for matching when the contents is one ore more pseudoscripts\n   */\n  public static pseudoScripts = new RegExp([\n    '^[\"\\'*`',\n    '\\u00AA',               // FEMININE ORDINAL INDICATOR\n    '\\u00B0',               // DEGREE SIGN\n    '\\u00B2-\\u00B4',        // SUPERSCRIPT 2 and 3, ACUTE ACCENT\n    '\\u00B9',               // SUPERSCRIPT ONE\n    '\\u00BA',               // MASCULINE ORDINAL INDICATOR\n    '\\u2018-\\u201F',        // Various double and single quotation marks (up and down)\n    '\\u2032-\\u2037\\u2057',  // Primes and reversed primes (forward and reversed)\n    '\\u2070\\u2071',         // SUPERSCRIPT 0 and i\n    '\\u2074-\\u207F',        // SUPERCRIPT 4 through 9, -, =, (, ), and n\n    '\\u2080-\\u208E',        // SUBSCRIPT 0 through 9, -, =, (, ).\n    ']+$'\n  ].join(''));\n\n  /**\n   * Pattern for when contents is a collection of primes\n   */\n   protected static primes = new RegExp([\n     '^[\"\\'`',\n     '\\u2018-\\u201F',        // Various double and single quotation marks (up and down)\n     ']+$'\n   ].join(''));\n\n   /**\n    * Default map for remapping prime characters\n    */\n  protected static remapPrimes: {[n: number]: number} = {\n     0x0022: 0x2033,   // double quotes\n     0x0027: 0x2032,   // single quote\n     0x0060: 0x2035,   // back quote\n     0x2018: 0x2035,   // open single quote\n     0x2019: 0x2032,   // close single quote\n     0x201A: 0x2032,   // low open single quote\n     0x201B: 0x2035,   // reversed open single quote\n     0x201C: 0x2036,   // open double quote\n     0x201D: 0x2033,   // close double quote\n     0x201E: 0x2033,   // low open double quote\n     0x201F: 0x2036,   // reversed open double quote\n  };\n\n  /**\n   * Regular expression matching characters that are marked as math accents\n   */\n  protected static mathaccents = new RegExp([\n    '^[',\n    '\\u00B4\\u0301\\u02CA',  // acute\n    '\\u0060\\u0300\\u02CB',  // grave\n    '\\u00A8\\u0308',        // ddot\n    '\\u007E\\u0303\\u02DC',  // tilde\n    '\\u00AF\\u0304\\u02C9',  // bar\n    '\\u02D8\\u0306',        // breve\n    '\\u02C7\\u030C',        // check\n    '\\u005E\\u0302\\u02C6',  // hat\n    '\\u2192\\u20D7',        // vec\n    '\\u02D9\\u0307',        // dot\n    '\\u02DA\\u030A',        // mathring\n    '\\u20DB',              // dddot\n    '\\u20DC',              // ddddot\n    ']$'\n  ].join(''));\n\n  /**\n   * The internal TeX class of the node (for use with getter/setter below)\n   */\n  public _texClass: number = null;\n\n  /**\n   * Use a getter to look up the TeX class from the operator table if it hasn't\n   * been set yet (but don't save it in case the form changes when it is in its\n   * location).\n   */\n  public get texClass() {\n    if (this._texClass === null) {\n      let mo = this.getText();\n      let [form1, form2, form3] = this.handleExplicitForm(this.getForms());\n      let OPTABLE = (this.constructor as typeof MmlMo).OPTABLE;\n      let def = OPTABLE[form1][mo] || OPTABLE[form2][mo] || OPTABLE[form3][mo];\n      return def ? def[2] : TEXCLASS.REL;\n    }\n    return this._texClass;\n  }\n\n  /**\n   * Use a setter to store the actual value in _texClass;\n   */\n  public set texClass(value: number) {\n    this._texClass = value;\n  }\n\n  /**\n   * The default MathML spacing on the left\n   */\n  /* tslint:disable-next-line:whitespace */\n  public lspace = 5/18;\n\n  /**\n   * The default MathML spacing on the right\n   */\n  /* tslint:disable-next-line:whitespace */\n  public rspace = 5/18;\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'mo';\n  }\n\n  /**\n   * All <mo> are considered embellished\n   * @override\n   */\n  public get isEmbellished() {\n    return true;\n  }\n\n  /**\n   * @return {boolean}  Is <mo> marked as an explicit linebreak?\n   */\n  public get hasNewLine(): boolean {\n    return this.attributes.get('linebreak') === 'newline';\n  }\n\n  /**\n   * @return {MmlNode}  The node that is the outermost embellished operator\n   *                    with this node as its core\n   */\n  public coreParent(): MmlNode {\n    let embellished = this as MmlNode;\n    let parent = this as MmlNode;\n    let math = this.factory.getNodeClass('math');\n    while (parent && parent.isEmbellished && parent.coreMO() === this && !(parent instanceof math)) {\n      embellished = parent;\n      parent = (parent as MmlNode).parent;\n    }\n    return embellished;\n  }\n\n  /**\n   * @param {MmlNode} parent  The node whose core text is to be obtained\n   * @return {string}         The text of the core MO of the given parent element\n   */\n  public coreText(parent: MmlNode): string {\n    if (!parent) {\n      return '';\n    }\n    if (parent.isEmbellished) {\n      return (parent.coreMO() as MmlMo).getText();\n    }\n    while ((((parent.isKind('mrow') ||\n              (parent.isKind('TeXAtom') && parent.texClass !== TEXCLASS.VCENTER) ||\n              parent.isKind('mstyle') ||\n              parent.isKind('mphantom')) && parent.childNodes.length === 1) ||\n            parent.isKind('munderover')) && parent.childNodes[0]) {\n      parent = parent.childNodes[0] as MmlNode;\n    }\n    return (parent.isToken ? (parent as AbstractMmlTokenNode).getText() : '');\n  }\n\n  /**\n   * @override\n   */\n  public hasSpacingAttributes() {\n    return this.attributes.isSet('lspace') ||\n      this.attributes.isSet('rspace');\n  }\n\n  /**\n   * @return {boolean}  True is this mo is an accent in an munderover construction\n   */\n  get isAccent(): boolean {\n    let accent = false;\n    const node = this.coreParent().parent;\n    if (node) {\n      const key = (node.isKind('mover') ?\n                   ((node.childNodes[(node as MmlMover).over] as MmlNode).coreMO() ?\n                    'accent' : '') :\n                   node.isKind('munder') ?\n                   ((node.childNodes[(node as MmlMunder).under] as MmlNode).coreMO() ?\n                    'accentunder' : '') :\n                   node.isKind('munderover') ?\n                   (this === (node.childNodes[(node as MmlMunderover).over] as MmlNode).coreMO() ?\n                    'accent' :\n                    this === (node.childNodes[(node as MmlMunderover).under] as MmlNode).coreMO() ?\n                    'accentunder' : '') :\n                   '');\n      if (key) {\n        const value = node.attributes.getExplicit(key);\n        accent = (value !== undefined ? accent : this.attributes.get('accent')) as boolean;\n      }\n    }\n    return accent;\n  }\n\n  /**\n   * Produce the texClass based on the operator dictionary values\n   *\n   * @override\n   */\n  public setTeXclass(prev: MmlNode): MmlNode {\n    let {form, fence} = this.attributes.getList('form', 'fence') as {form: string, fence: string};\n    if (this.getProperty('texClass') === undefined &&\n        (this.attributes.isSet('lspace') || this.attributes.isSet('rspace'))) {\n      return null;\n    }\n    if (fence && this.texClass === TEXCLASS.REL) {\n      if (form === 'prefix') {\n        this.texClass = TEXCLASS.OPEN;\n      }\n      if (form === 'postfix') {\n        this.texClass = TEXCLASS.CLOSE;\n      }\n    }\n    return this.adjustTeXclass(prev);\n  }\n  /**\n   * Follow the TeXBook rules for adjusting the TeX class once its neighbors are known\n   *\n   * @param {MmlNode} prev  The node appearing before this one in the output\n   * @return {MmlNode}      The last node displayed (this node)\n   */\n  public adjustTeXclass(prev: MmlNode): MmlNode {\n    let texClass = this.texClass;\n    let prevClass = this.prevClass;\n    if (texClass === TEXCLASS.NONE) {\n      return prev;\n    }\n    if (prev) {\n      if (prev.getProperty('autoOP') && (texClass === TEXCLASS.BIN || texClass === TEXCLASS.REL)) {\n        prevClass = prev.texClass = TEXCLASS.ORD;\n      }\n      prevClass = this.prevClass = (prev.texClass || TEXCLASS.ORD);\n      this.prevLevel = this.attributes.getInherited('scriptlevel') as number;\n    } else {\n      prevClass = this.prevClass = TEXCLASS.NONE;\n    }\n    if (texClass === TEXCLASS.BIN &&\n        (prevClass === TEXCLASS.NONE || prevClass === TEXCLASS.BIN || prevClass === TEXCLASS.OP ||\n         prevClass === TEXCLASS.REL || prevClass === TEXCLASS.OPEN || prevClass === TEXCLASS.PUNCT)) {\n      this.texClass = TEXCLASS.ORD;\n    } else if (prevClass === TEXCLASS.BIN &&\n               (texClass === TEXCLASS.REL || texClass === TEXCLASS.CLOSE || texClass === TEXCLASS.PUNCT)) {\n      prev.texClass = this.prevClass = TEXCLASS.ORD;\n    } else if (texClass === TEXCLASS.BIN) {\n      //\n      // Check if node is the last one in its container since the rule\n      // above only takes effect if there is a node that follows.\n      //\n      let child: MmlNode = this;\n      let parent = this.parent;\n      while (parent && parent.parent && parent.isEmbellished &&\n             (parent.childNodes.length === 1 ||\n              (!parent.isKind('mrow') && parent.core() === child))) {\n        child = parent;\n        parent = parent.parent;\n      }\n      if (parent.childNodes[parent.childNodes.length - 1] === child) {\n        this.texClass = TEXCLASS.ORD;\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Do the normal inheritance, then look up the attributes from the operator dictionary.\n   * If there is no dictionary entry, get the TeX class from the Unicode range list.\n   *\n   * @override\n   */\n  public setInheritedAttributes(attributes: AttributeList = {},\n                                display: boolean = false, level: number = 0, prime: boolean = false) {\n    super.setInheritedAttributes(attributes, display, level, prime);\n    let mo = this.getText();\n    this.checkOperatorTable(mo);\n    this.checkPseudoScripts(mo);\n    this.checkPrimes(mo);\n    this.checkMathAccent(mo);\n  }\n\n  /**\n   * Set the attributes from the operator table\n   *\n   * @param {string} mo   The test of the mo element\n   */\n  protected checkOperatorTable(mo: string) {\n    let [form1, form2, form3] = this.handleExplicitForm(this.getForms());\n    this.attributes.setInherited('form', form1);\n    let OPTABLE = (this.constructor as typeof MmlMo).OPTABLE;\n    let def = OPTABLE[form1][mo] || OPTABLE[form2][mo] || OPTABLE[form3][mo];\n    if (def) {\n      if (this.getProperty('texClass') === undefined) {\n        this.texClass = def[2];\n      }\n      for (const name of Object.keys(def[3] || {})) {\n        this.attributes.setInherited(name, def[3][name]);\n      }\n      this.lspace = (def[0] + 1) / 18;\n      this.rspace = (def[1] + 1) / 18;\n    } else {\n      let range = getRange(mo);\n      if (range) {\n        if (this.getProperty('texClass') === undefined) {\n          this.texClass = range[2];\n        }\n        const spacing = (this.constructor as typeof MmlMo).MMLSPACING[range[2]];\n        this.lspace = (spacing[0] + 1) / 18;\n        this.rspace = (spacing[1] + 1) / 18;\n      }\n    }\n  }\n\n  /**\n   * @return {[string, string, string]}  The list of form attribute values in the\n   *                                     order they should be tested, based on the\n   *                                     position of the element in its parent.\n   */\n  public getForms(): [string, string, string] {\n    let core: MmlNode = this;\n    let parent = this.parent;\n    let Parent = this.Parent;\n    while (Parent && Parent.isEmbellished) {\n      core = parent;\n      parent = Parent.parent;\n      Parent = Parent.Parent;\n    }\n    if (parent && parent.isKind('mrow') && (parent as MmlMrow).nonSpaceLength() !== 1) {\n      if ((parent as MmlMrow).firstNonSpace() === core) {\n        return ['prefix', 'infix', 'postfix'];\n      }\n      if ((parent as MmlMrow).lastNonSpace() === core) {\n        return ['postfix', 'infix', 'prefix'];\n      }\n    }\n    return ['infix', 'prefix', 'postfix'];\n  }\n\n  /**\n   * @param {string[]} forms     The three forms in the default order they are to be tested\n   * @return {string[]}          The forms in the new order, if there is an explicit form attribute\n   */\n  protected handleExplicitForm(forms: string[]): string[] {\n    if (this.attributes.isSet('form')) {\n      const form = this.attributes.get('form') as string;\n      forms = [form].concat(forms.filter(name => (name !== form)));\n    }\n    return forms;\n  }\n\n  /**\n   * Mark the mo as a pseudoscript if it is one.  True means it is,\n   *   false means it is a pseudo-script character, but in an msup (so needs a variant form)\n   *\n   * @param {string} mo   The test of the mo element\n   */\n  protected checkPseudoScripts(mo: string) {\n    const PSEUDOSCRIPTS = (this.constructor as typeof MmlMo).pseudoScripts;\n    if (!mo.match(PSEUDOSCRIPTS)) return;\n    const parent = this.coreParent().Parent;\n    const isPseudo = !parent || !(parent.isKind('msubsup') && !parent.isKind('msub'));\n    this.setProperty('pseudoscript', isPseudo);\n    if (isPseudo) {\n      this.attributes.setInherited('lspace', 0);\n      this.attributes.setInherited('rspace', 0);\n    }\n  }\n\n  /**\n   * Determine whether the mo consists of primes, and remap them if so.\n   *\n   * @param {string} mo   The test of the mo element\n   */\n  protected checkPrimes(mo: string) {\n    const PRIMES = (this.constructor as typeof MmlMo).primes;\n    if (!mo.match(PRIMES)) return;\n    const REMAP = (this.constructor as typeof MmlMo).remapPrimes;\n    const primes = unicodeString(unicodeChars(mo).map(c => REMAP[c]));\n    this.setProperty('primes', primes);\n  }\n\n  /**\n   * Determine whether the mo is a mathaccent character\n   *\n   * @param {string} mo   The test of the mo element\n   */\n  protected checkMathAccent(mo: string) {\n    const parent = this.Parent;\n    if (this.getProperty('mathaccent') !== undefined || !parent || !parent.isKind('munderover')) return;\n    const base = parent.childNodes[0] as MmlNode;\n    if (base.isEmbellished && base.coreMO() === this) return;\n    const MATHACCENT = (this.constructor as typeof MmlMo).mathaccents;\n    if (mo.match(MATHACCENT)) {\n      this.setProperty('mathaccent', true);\n    }\n  }\n\n}\n","/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Defines the operator dictionary structure\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {PropertyList} from '../Tree/Node.js';\nimport {TEXCLASS} from './MmlNode.js';\n\n/**\n * Types needed for the operator dictionary\n */\nexport type OperatorDef = [number, number, number, PropertyList];\nexport type OperatorList = {[name: string]: OperatorDef};\nexport type RangeDef = [number, number, number, string, string?];\n\n/**\n * @param {number} lspace            The operator's MathML left-hand spacing\n * @param {number} rspace            The operator's MathML right-hand spacing\n * @param {number} texClass          The default TeX class for the operator\n * @param {PropertyList} properties  Any default properties from the operator dictionary\n * @return {OperatorDef}             The operator definition array\n */\nexport function OPDEF(lspace: number, rspace: number, texClass: number = TEXCLASS.BIN,\n                      properties: PropertyList = null): OperatorDef {\n                        return [lspace, rspace, texClass, properties] as OperatorDef;\n                      }\n\n/**\n *  The various kinds of operators in the dictionary\n */\nexport const MO = {\n  ORD:        OPDEF(0, 0, TEXCLASS.ORD),\n  ORD11:      OPDEF(1, 1, TEXCLASS.ORD),\n  ORD21:      OPDEF(2, 1, TEXCLASS.ORD),\n  ORD02:      OPDEF(0, 2, TEXCLASS.ORD),\n  ORD55:      OPDEF(5, 5, TEXCLASS.ORD),\n  NONE:       OPDEF(0, 0, TEXCLASS.NONE),\n  OP:         OPDEF(1, 2, TEXCLASS.OP, {largeop: true, movablelimits: true, symmetric: true}),\n  OPFIXED:    OPDEF(1, 2, TEXCLASS.OP, {largeop: true, movablelimits: true}),\n  INTEGRAL:   OPDEF(0, 1, TEXCLASS.OP, {largeop: true, symmetric: true}),\n  INTEGRAL2:  OPDEF(1, 2, TEXCLASS.OP, {largeop: true, symmetric: true}),\n  BIN3:       OPDEF(3, 3, TEXCLASS.BIN),\n  BIN4:       OPDEF(4, 4, TEXCLASS.BIN),\n  BIN01:      OPDEF(0, 1, TEXCLASS.BIN),\n  BIN5:       OPDEF(5, 5, TEXCLASS.BIN),\n  TALLBIN:    OPDEF(4, 4, TEXCLASS.BIN, {stretchy: true}),\n  BINOP:      OPDEF(4, 4, TEXCLASS.BIN, {largeop: true, movablelimits: true}),\n  REL:        OPDEF(5, 5, TEXCLASS.REL),\n  REL1:       OPDEF(1, 1, TEXCLASS.REL, {stretchy: true}),\n  REL4:       OPDEF(4, 4, TEXCLASS.REL),\n  RELSTRETCH: OPDEF(5, 5, TEXCLASS.REL, {stretchy: true}),\n  RELACCENT:  OPDEF(5, 5, TEXCLASS.REL, {accent: true}),\n  WIDEREL:    OPDEF(5, 5, TEXCLASS.REL, {accent: true, stretchy: true}),\n  OPEN:       OPDEF(0, 0, TEXCLASS.OPEN, {fence: true, stretchy: true, symmetric: true}),\n  CLOSE:      OPDEF(0, 0, TEXCLASS.CLOSE, {fence: true, stretchy: true, symmetric: true}),\n  INNER:      OPDEF(0, 0, TEXCLASS.INNER),\n  PUNCT:      OPDEF(0, 3, TEXCLASS.PUNCT),\n  ACCENT:     OPDEF(0, 0, TEXCLASS.ORD, {accent: true}),\n  WIDEACCENT: OPDEF(0, 0, TEXCLASS.ORD, {accent: true, stretchy: true})\n};\n\n/**\n *  The default TeX classes for the various unicode blocks, and their names\n */\nexport const RANGES: RangeDef[] = [\n  [0x0020, 0x007F, TEXCLASS.REL, 'mo'], // Basic Latin\n  [0x00A0, 0x00BF, TEXCLASS.ORD, 'mo'], // Latin-1 Supplement symbols\n  [0x00C0, 0x024F, TEXCLASS.ORD, 'mi'], // Latin-1 Supplement, Latin Extended-A, Latin Extended-B\n  [0x02B0, 0x036F, TEXCLASS.ORD, 'mo'], // Spacing modifier letters, Combining Diacritical Marks\n  [0x0370, 0x1A20, TEXCLASS.ORD, 'mi'], // Greek and Coptic (through) Tai Tham\n  [0x1AB0, 0x1AFF, TEXCLASS.ORD, 'mo'], // Combining Diacritical Marks Extended\n  [0x1B00, 0x1DBF, TEXCLASS.ORD, 'mi'], // Balinese (through) Phonetic Extensions Supplement\n  [0x1DC0, 0x1DFF, TEXCLASS.ORD, 'mo'], // Combining Diacritical Marks Supplement\n  [0x1E00, 0x1FFF, TEXCLASS.ORD, 'mi'], // Latin Extended Additional, Greek Extended\n  [0x2000, 0x206F, TEXCLASS.ORD, 'mo'], // General Punctuation\n  [0x2070, 0x209F, TEXCLASS.ORD, 'mo'], // Superscript and Subscripts (through) Combining Diacritical Marks for Symbols\n  [0x2100, 0x214F, TEXCLASS.ORD, 'mi'], // Letterlike Symbols\n  [0x2150, 0x218F, TEXCLASS.ORD, 'mn'], // Number Forms\n  [0x2190, 0x21FF, TEXCLASS.REL, 'mo'], // Arrows\n  [0x2200, 0x22FF, TEXCLASS.BIN, 'mo'], // Mathematical Operators\n  [0x2300, 0x23FF, TEXCLASS.ORD, 'mo'], // Miscellaneous Technical\n  [0x2460, 0x24FF, TEXCLASS.ORD, 'mn'], // Enclosed Alphanumerics\n  [0x2500, 0x27EF, TEXCLASS.ORD, 'mo'], // Box Drawing (though) Miscellaneous Math Symbols-A\n  [0x27F0, 0x27FF, TEXCLASS.REL, 'mo'], // Supplemental Arrows-A\n  [0x2800, 0x28FF, TEXCLASS.ORD, 'mtext'], // Braille Patterns\n  [0x2900, 0x297F, TEXCLASS.REL, 'mo'], // Supplemental Arrows-B\n  [0x2980, 0x29FF, TEXCLASS.ORD, 'mo'], // Miscellaneous Math Symbols-B\n  [0x2A00, 0x2AFF, TEXCLASS.BIN, 'mo'], // Supplemental Math Operators\n  [0x2B00, 0x2B2F, TEXCLASS.ORD, 'mo'], // Miscellaneous Symbols and Arrows\n  [0x2B30, 0x2B4F, TEXCLASS.REL, 'mo'], //   Arrows from above\n  [0x2B50, 0x2BFF, TEXCLASS.ORD, 'mo'], //   Rest of above\n  [0x2C00, 0x2DE0, TEXCLASS.ORD, 'mi'], // Glagolitic (through) Ethipoc Extended\n  [0x2E00, 0x2E7F, TEXCLASS.ORD, 'mo'], // Supplemental Punctuation\n  [0x2E80, 0x2FDF, TEXCLASS.ORD, 'mi', 'normal'], // CJK Radicals Supplement (through) Kangxi Radicals\n  [0x2FF0, 0x303F, TEXCLASS.ORD, 'mo'], // Ideographic Desc. Characters, CJK Symbols and Punctuation\n  [0x3040, 0xA49F, TEXCLASS.ORD, 'mi', 'normal'], // Hiragana (through) Yi Radicals\n  [0xA4D0, 0xA82F, TEXCLASS.ORD, 'mi'], // Lisu (through) Syloti Nagri\n  [0xA830, 0xA83F, TEXCLASS.ORD, 'mn'], // Common Indic Number FormsArabic Presentation Forms-A\n  [0xA840, 0xD7FF, TEXCLASS.ORD, 'mi'], // Phags-pa (though) Hangul Jamo Extended-B\n  [0xF900, 0xFAFF, TEXCLASS.ORD, 'mi', 'normal'], // CJK Compatibility Ideographs\n  [0xFB00, 0xFDFF, TEXCLASS.ORD, 'mi'], // Alphabetic Presentation Forms (though) Arabic Presentation Forms-A\n  [0xFE00, 0xFE6F, TEXCLASS.ORD, 'mo'], // Variation Selector (through) Small Form Variants\n  [0xFE70, 0x100FF, TEXCLASS.ORD, 'mi'], // Arabic Presentation Forms-B (through) Linear B Ideograms\n  [0x10100, 0x1018F, TEXCLASS.ORD, 'mn'], // Aegean Numbers, Ancient Greek Numbers\n  [0x10190, 0x123FF, TEXCLASS.ORD, 'mi', 'normal'], // Ancient Symbols (through) Cuneiform\n  [0x12400, 0x1247F, TEXCLASS.ORD, 'mn'], // Cuneiform Numbers and Punctuation\n  [0x12480, 0x1BC9F, TEXCLASS.ORD, 'mi', 'normal'], // Early Dynastic Cuneiform (through) Duployan\n  [0x1BCA0, 0x1D25F, TEXCLASS.ORD, 'mo'], // Shorthand Format Controls (through) TaiXuan Jing Symbols\n  [0x1D360, 0x1D37F, TEXCLASS.ORD, 'mn'], // Counting Rod Numerals\n  [0x1D400, 0x1D7CD, TEXCLASS.ORD, 'mi'], // Math Alphanumeric Symbols\n  [0x1D7CE, 0x1D7FF, TEXCLASS.ORD, 'mn'], //   Numerals from above\n  [0x1DF00, 0x1F7FF, TEXCLASS.ORD, 'mo'], // Mahjong Tiles (through) Geometric Shapes Extended\n  [0x1F800, 0x1F8FF, TEXCLASS.REL, 'mo'], // Supplemental Arrows-C\n  [0x1F900, 0x1F9FF, TEXCLASS.ORD, 'mo'], // Supplemental Symbols and Pictographs\n  [0x20000, 0x2FA1F, TEXCLASS.ORD, 'mi', 'normnal'], // CJK Unified Ideographs Ext. B (through) CJK Sompatibility Ideographs Supp.\n];\n\n/**\n * Get the Unicode range for the first character of a string\n *\n * @param {string} text      The character to check\n * @return {RangeDef|null}   The range containing that character, or null\n */\nexport function getRange(text: string): RangeDef | null {\n  const n = text.codePointAt(0);\n  for (const range of RANGES) {\n    if (n <= range[1]) {\n      if (n >= range[0]) {\n        return range;\n      }\n      break;\n    }\n  }\n  return null;\n}\n\n/**\n * The default MathML spacing for the various TeX classes.\n */\nexport const MMLSPACING = [\n  [0, 0],  // ORD\n  [1, 2],  // OP\n  [3, 3],  // BIN\n  [4, 4],  // REL\n  [0, 0],  // OPEN\n  [0, 0],  // CLOSE\n  [0, 3]   // PUNCT\n];\n\n/**\n *  The operator dictionary, with sections for the three forms:  prefix, postfix, and infix\n */\nexport const OPTABLE: {[form: string]: OperatorList} = {\n  prefix: {\n    '(': MO.OPEN,            // left parenthesis\n    '+': MO.BIN01,           // plus sign\n    '-': MO.BIN01,           // hyphen-minus\n    '[': MO.OPEN,            // left square bracket\n    '{': MO.OPEN,            // left curly bracket\n    '|': MO.OPEN,            // vertical line\n    '||': [0, 0, TEXCLASS.BIN, {fence: true, stretchy: true, symmetric: true}], // multiple character operator: ||\n    '|||': [0, 0, TEXCLASS.ORD, {fence: true, stretchy: true, symmetric: true}], // multiple character operator: |||\n    '\\u00AC': MO.ORD21,      // not sign\n    '\\u00B1': MO.BIN01,      // plus-minus sign\n    '\\u2016': [0, 0, TEXCLASS.ORD, {fence: true, stretchy: true}], // double vertical line\n    '\\u2018': [0, 0, TEXCLASS.OPEN, {fence: true}], // left single quotation mark\n    '\\u201C': [0, 0, TEXCLASS.OPEN, {fence: true}], // left double quotation mark\n    '\\u2145': MO.ORD21,      // double-struck italic capital d\n    '\\u2146': OPDEF(2, 0, TEXCLASS.ORD),  // double-struck italic small d\n    '\\u2200': MO.ORD21,      // for all\n    '\\u2202': MO.ORD21,      // partial differential\n    '\\u2203': MO.ORD21,      // there exists\n    '\\u2204': MO.ORD21,      // there does not exist\n    '\\u2207': MO.ORD21,      // nabla\n    '\\u220F': MO.OP,         // n-ary product\n    '\\u2210': MO.OP,         // n-ary coproduct\n    '\\u2211': MO.OP,         // n-ary summation\n    '\\u2212': MO.BIN01,      // minus sign\n    '\\u2213': MO.BIN01,      // minus-or-plus sign\n    '\\u221A': [1, 1, TEXCLASS.ORD, {stretchy: true}], // square root\n    '\\u221B': MO.ORD11,      // cube root\n    '\\u221C': MO.ORD11,      // fourth root\n    '\\u2220': MO.ORD,        // angle\n    '\\u2221': MO.ORD,        // measured angle\n    '\\u2222': MO.ORD,        // spherical angle\n    '\\u222B': MO.INTEGRAL,   // integral\n    '\\u222C': MO.INTEGRAL,   // double integral\n    '\\u222D': MO.INTEGRAL,   // triple integral\n    '\\u222E': MO.INTEGRAL,   // contour integral\n    '\\u222F': MO.INTEGRAL,   // surface integral\n    '\\u2230': MO.INTEGRAL,   // volume integral\n    '\\u2231': MO.INTEGRAL,   // clockwise integral\n    '\\u2232': MO.INTEGRAL,   // clockwise contour integral\n    '\\u2233': MO.INTEGRAL,   // anticlockwise contour integral\n    '\\u22C0': MO.OP,         // n-ary logical and\n    '\\u22C1': MO.OP,         // n-ary logical or\n    '\\u22C2': MO.OP,         // n-ary intersection\n    '\\u22C3': MO.OP,         // n-ary union\n    '\\u2308': MO.OPEN,       // left ceiling\n    '\\u230A': MO.OPEN,       // left floor\n    '\\u2329': MO.OPEN,       // left-pointing angle bracket\n    '\\u2772': MO.OPEN,       // light left tortoise shell bracket ornament\n    '\\u27E6': MO.OPEN,       // mathematical left white square bracket\n    '\\u27E8': MO.OPEN,       // mathematical left angle bracket\n    '\\u27EA': MO.OPEN,       // mathematical left double angle bracket\n    '\\u27EC': MO.OPEN,       // mathematical left white tortoise shell bracket\n    '\\u27EE': MO.OPEN,       // mathematical left flattened parenthesis\n    '\\u2980': [0, 0, TEXCLASS.ORD, {fence: true, stretchy: true}], // triple vertical bar delimiter\n    '\\u2983': MO.OPEN,       // left white curly bracket\n    '\\u2985': MO.OPEN,       // left white parenthesis\n    '\\u2987': MO.OPEN,       // z notation left image bracket\n    '\\u2989': MO.OPEN,       // z notation left binding bracket\n    '\\u298B': MO.OPEN,       // left square bracket with underbar\n    '\\u298D': MO.OPEN,       // left square bracket with tick in top corner\n    '\\u298F': MO.OPEN,       // left square bracket with tick in bottom corner\n    '\\u2991': MO.OPEN,       // left angle bracket with dot\n    '\\u2993': MO.OPEN,       // left arc less-than bracket\n    '\\u2995': MO.OPEN,       // double left arc greater-than bracket\n    '\\u2997': MO.OPEN,       // left black tortoise shell bracket\n    '\\u29FC': MO.OPEN,       // left-pointing curved angle bracket\n    '\\u2A00': MO.OP,         // n-ary circled dot operator\n    '\\u2A01': MO.OP,         // n-ary circled plus operator\n    '\\u2A02': MO.OP,         // n-ary circled times operator\n    '\\u2A03': MO.OP,         // n-ary union operator with dot\n    '\\u2A04': MO.OP,         // n-ary union operator with plus\n    '\\u2A05': MO.OP,         // n-ary square intersection operator\n    '\\u2A06': MO.OP,         // n-ary square union operator\n    '\\u2A07': MO.OP,         // two logical and operator\n    '\\u2A08': MO.OP,         // two logical or operator\n    '\\u2A09': MO.OP,         // n-ary times operator\n    '\\u2A0A': MO.OP,         // modulo two sum\n    '\\u2A0B': MO.INTEGRAL2,  // summation with integral\n    '\\u2A0C': MO.INTEGRAL,   // quadruple integral operator\n    '\\u2A0D': MO.INTEGRAL2,  // finite part integral\n    '\\u2A0E': MO.INTEGRAL2,  // integral with double stroke\n    '\\u2A0F': MO.INTEGRAL2,  // integral average with slash\n    '\\u2A10': MO.OP,         // circulation function\n    '\\u2A11': MO.OP,         // anticlockwise integration\n    '\\u2A12': MO.OP,         // line integration with rectangular path around pole\n    '\\u2A13': MO.OP,         // line integration with semicircular path around pole\n    '\\u2A14': MO.OP,         // line integration not including the pole\n    '\\u2A15': MO.INTEGRAL2,  // integral around a point operator\n    '\\u2A16': MO.INTEGRAL2,  // quaternion integral operator\n    '\\u2A17': MO.INTEGRAL2,  // integral with leftwards arrow with hook\n    '\\u2A18': MO.INTEGRAL2,  // integral with times sign\n    '\\u2A19': MO.INTEGRAL2,  // integral with intersection\n    '\\u2A1A': MO.INTEGRAL2,  // integral with union\n    '\\u2A1B': MO.INTEGRAL2,  // integral with overbar\n    '\\u2A1C': MO.INTEGRAL2,  // integral with underbar\n    '\\u2AFC': MO.OP,         // large triple vertical bar operator\n    '\\u2AFF': MO.OP,         // n-ary white vertical bar\n  },\n  postfix: {\n    '!!': OPDEF(1, 0),       // multiple character operator: !!\n    '!': [1, 0, TEXCLASS.CLOSE, null], // exclamation mark\n    '\"': MO.ACCENT,          // quotation mark\n    '&': MO.ORD,             // ampersand\n    ')': MO.CLOSE,           // right parenthesis\n    '++': OPDEF(0, 0),       // multiple character operator: ++\n    '--': OPDEF(0, 0),       // multiple character operator: --\n    '..': OPDEF(0, 0),       // multiple character operator: ..\n    '...': MO.ORD,           // multiple character operator: ...\n    '\\'': MO.ACCENT,         // apostrophe\n    ']': MO.CLOSE,           // right square bracket\n    '^': MO.WIDEACCENT,      // circumflex accent\n    '_': MO.WIDEACCENT,      // low line\n    '`': MO.ACCENT,          // grave accent\n    '|': MO.CLOSE,           // vertical line\n    '}': MO.CLOSE,           // right curly bracket\n    '~': MO.WIDEACCENT,      // tilde\n    '||': [0, 0, TEXCLASS.BIN, {fence: true, stretchy: true, symmetric: true}], // multiple character operator: ||\n    '|||': [0, 0, TEXCLASS.ORD, {fence: true, stretchy: true, symmetric: true}], // multiple character operator: |||\n    '\\u00A8': MO.ACCENT,     // diaeresis\n    '\\u00AA': MO.ACCENT,     // feminie ordinal indicator\n    '\\u00AF': MO.WIDEACCENT, // macron\n    '\\u00B0': MO.ORD,        // degree sign\n    '\\u00B2': MO.ACCENT,     // superscript 2\n    '\\u00B3': MO.ACCENT,     // superscript 3\n    '\\u00B4': MO.ACCENT,     // acute accent\n    '\\u00B8': MO.ACCENT,     // cedilla\n    '\\u00B9': MO.ACCENT,     // superscript 1\n    '\\u00BA': MO.ACCENT,     // masculine ordinal indicator\n    '\\u02C6': MO.WIDEACCENT, // modifier letter circumflex accent\n    '\\u02C7': MO.WIDEACCENT, // caron\n    '\\u02C9': MO.WIDEACCENT, // modifier letter macron\n    '\\u02CA': MO.ACCENT,     // modifier letter acute accent\n    '\\u02CB': MO.ACCENT,     // modifier letter grave accent\n    '\\u02CD': MO.WIDEACCENT, // modifier letter low macron\n    '\\u02D8': MO.ACCENT,     // breve\n    '\\u02D9': MO.ACCENT,     // dot above\n    '\\u02DA': MO.ACCENT,     // ring above\n    '\\u02DC': MO.WIDEACCENT, // small tilde\n    '\\u02DD': MO.ACCENT,     // double acute accent\n    '\\u02F7': MO.WIDEACCENT, // modifier letter low tilde\n    '\\u0302': MO.WIDEACCENT, // combining circumflex accent\n    '\\u0311': MO.ACCENT,     // combining inverted breve\n    '\\u03F6': MO.REL,        // greek reversed lunate epsilon symbol\n    '\\u2016': [0, 0, TEXCLASS.ORD, {fence: true, stretchy: true}], // double vertical line\n    '\\u2019': [0, 0, TEXCLASS.CLOSE, {fence: true}], // right single quotation mark\n    '\\u201A': MO.ACCENT,     // single low-9 quotation mark\n    '\\u201B': MO.ACCENT,     // single high-reversed-9 quotation mark\n    '\\u201D': [0, 0, TEXCLASS.CLOSE, {fence: true}],  // right double quotation mark\n    '\\u201E': MO.ACCENT,     // double low-9 quotation mark\n    '\\u201F': MO.ACCENT,     // double high-reversed-9 quotation mark\n    '\\u2032': MO.ORD,        // prime\n    '\\u2033': MO.ACCENT,     // double prime\n    '\\u2034': MO.ACCENT,     // triple prime\n    '\\u2035': MO.ACCENT,     // reversed prime\n    '\\u2036': MO.ACCENT,     // reversed double prime\n    '\\u2037': MO.ACCENT,     // reversed triple prime\n    '\\u203E': MO.WIDEACCENT, // overline\n    '\\u2057': MO.ACCENT,     // quadruple prime\n    '\\u20DB': MO.ACCENT,     // combining three dots above\n    '\\u20DC': MO.ACCENT,     // combining four dots above\n    '\\u2309': MO.CLOSE,      // right ceiling\n    '\\u230B': MO.CLOSE,      // right floor\n    '\\u232A': MO.CLOSE,      // right-pointing angle bracket\n    '\\u23B4': MO.WIDEACCENT, // top square bracket\n    '\\u23B5': MO.WIDEACCENT, // bottom square bracket\n    '\\u23DC': MO.WIDEACCENT, // top parenthesis\n    '\\u23DD': MO.WIDEACCENT, // bottom parenthesis\n    '\\u23DE': MO.WIDEACCENT, // top curly bracket\n    '\\u23DF': MO.WIDEACCENT, // bottom curly bracket\n    '\\u23E0': MO.WIDEACCENT, // top tortoise shell bracket\n    '\\u23E1': MO.WIDEACCENT, // bottom tortoise shell bracket\n    '\\u25A0': MO.BIN3,       // black square\n    '\\u25A1': MO.BIN3,       // white square\n    '\\u25AA': MO.BIN3,       // black small square\n    '\\u25AB': MO.BIN3,       // white small square\n    '\\u25AD': MO.BIN3,       // white rectangle\n    '\\u25AE': MO.BIN3,       // black vertical rectangle\n    '\\u25AF': MO.BIN3,       // white vertical rectangle\n    '\\u25B0': MO.BIN3,       // black parallelogram\n    '\\u25B1': MO.BIN3,       // white parallelogram\n    '\\u25B2': MO.BIN4,       // black up-pointing triangle\n    '\\u25B4': MO.BIN4,       // black up-pointing small triangle\n    '\\u25B6': MO.BIN4,       // black right-pointing triangle\n    '\\u25B7': MO.BIN4,       // white right-pointing triangle\n    '\\u25B8': MO.BIN4,       // black right-pointing small triangle\n    '\\u25BC': MO.BIN4,       // black down-pointing triangle\n    '\\u25BE': MO.BIN4,       // black down-pointing small triangle\n    '\\u25C0': MO.BIN4,       // black left-pointing triangle\n    '\\u25C1': MO.BIN4,       // white left-pointing triangle\n    '\\u25C2': MO.BIN4,       // black left-pointing small triangle\n    '\\u25C4': MO.BIN4,       // black left-pointing pointer\n    '\\u25C5': MO.BIN4,       // white left-pointing pointer\n    '\\u25C6': MO.BIN4,       // black diamond\n    '\\u25C7': MO.BIN4,       // white diamond\n    '\\u25C8': MO.BIN4,       // white diamond containing black small diamond\n    '\\u25C9': MO.BIN4,       // fisheye\n    '\\u25CC': MO.BIN4,       // dotted circle\n    '\\u25CD': MO.BIN4,       // circle with vertical fill\n    '\\u25CE': MO.BIN4,       // bullseye\n    '\\u25CF': MO.BIN4,       // black circle\n    '\\u25D6': MO.BIN4,       // left half black circle\n    '\\u25D7': MO.BIN4,       // right half black circle\n    '\\u25E6': MO.BIN4,       // white bullet\n    '\\u266D': MO.ORD02,      // music flat sign\n    '\\u266E': MO.ORD02,      // music natural sign\n    '\\u266F': MO.ORD02,      // music sharp sign\n    '\\u2773': MO.CLOSE,      // light right tortoise shell bracket ornament\n    '\\u27E7': MO.CLOSE,      // mathematical right white square bracket\n    '\\u27E9': MO.CLOSE,      // mathematical right angle bracket\n    '\\u27EB': MO.CLOSE,      // mathematical right double angle bracket\n    '\\u27ED': MO.CLOSE,      // mathematical right white tortoise shell bracket\n    '\\u27EF': MO.CLOSE,      // mathematical right flattened parenthesis\n    '\\u2980': [0, 0, TEXCLASS.ORD, {fence: true, stretchy: true}], // triple vertical bar delimiter\n    '\\u2984': MO.CLOSE,      // right white curly bracket\n    '\\u2986': MO.CLOSE,      // right white parenthesis\n    '\\u2988': MO.CLOSE,      // z notation right image bracket\n    '\\u298A': MO.CLOSE,      // z notation right binding bracket\n    '\\u298C': MO.CLOSE,      // right square bracket with underbar\n    '\\u298E': MO.CLOSE,      // right square bracket with tick in bottom corner\n    '\\u2990': MO.CLOSE,      // right square bracket with tick in top corner\n    '\\u2992': MO.CLOSE,      // right angle bracket with dot\n    '\\u2994': MO.CLOSE,      // right arc greater-than bracket\n    '\\u2996': MO.CLOSE,      // double right arc less-than bracket\n    '\\u2998': MO.CLOSE,      // right black tortoise shell bracket\n    '\\u29FD': MO.CLOSE,      // right-pointing curved angle bracket\n  },\n  infix: {\n    '!=': MO.BIN4,           // multiple character operator: !=\n    '#': MO.ORD,             // #\n    '$': MO.ORD,             // $\n    '%': [3, 3, TEXCLASS.ORD, null], // percent sign\n    '&&': MO.BIN4,           // multiple character operator: &&\n    '': MO.ORD,              // empty <mo>\n    '*': MO.BIN3,            // asterisk\n    '**': OPDEF(1, 1),       // multiple character operator: **\n    '*=': MO.BIN4,           // multiple character operator: *=\n    '+': MO.BIN4,            // plus sign\n    '+=': MO.BIN4,           // multiple character operator: +=\n    ',': [0, 3, TEXCLASS.PUNCT, {linebreakstyle: 'after', separator: true}], // comma\n    '-': MO.BIN4,            // hyphen-minus\n    '-=': MO.BIN4,           // multiple character operator: -=\n    '->': MO.BIN5,           // multiple character operator: ->\n    '.': [0, 3, TEXCLASS.PUNCT, {separator: true}], // \\ldotp\n    '/': MO.ORD11,           // solidus\n    '//': OPDEF(1, 1),       // multiple character operator: //\n    '/=': MO.BIN4,           // multiple character operator: /=\n    ':': [1, 2, TEXCLASS.REL, null], // colon\n    ':=': MO.BIN4,           // multiple character operator: :=\n    ';': [0, 3, TEXCLASS.PUNCT, {linebreakstyle: 'after', separator: true}], // semicolon\n    '<': MO.REL,             // less-than sign\n    '<=': MO.BIN5,           // multiple character operator: <=\n    '<>': OPDEF(1, 1),       // multiple character operator: <>\n    '=': MO.REL,             // equals sign\n    '==': MO.BIN4,           // multiple character operator: ==\n    '>': MO.REL,             // greater-than sign\n    '>=': MO.BIN5,           // multiple character operator: >=\n    '?': [1, 1, TEXCLASS.CLOSE, null], // question mark\n    '@': MO.ORD11,           // commercial at\n    '\\\\': MO.ORD,            // reverse solidus\n    '^': MO.ORD11,           // circumflex accent\n    '_': MO.ORD11,           // low line\n    '|': [2, 2, TEXCLASS.ORD, {fence: true, stretchy: true, symmetric: true}], // vertical line\n    '||': [2, 2, TEXCLASS.BIN, {fence: true, stretchy: true, symmetric: true}], // multiple character operator: ||\n    '|||': [2, 2, TEXCLASS.ORD, {fence: true, stretchy: true, symmetric: true}], // multiple character operator: |||\n    '\\u00B1': MO.BIN4,       // plus-minus sign\n    '\\u00B7': MO.BIN4,       // middle dot\n    '\\u00D7': MO.BIN4,       // multiplication sign\n    '\\u00F7': MO.BIN4,       // division sign\n    '\\u02B9': MO.ORD,        // prime\n    '\\u0300': MO.ACCENT,     // \\grave\n    '\\u0301': MO.ACCENT,     // \\acute\n    '\\u0303': MO.WIDEACCENT, // \\tilde\n    '\\u0304': MO.ACCENT,     // \\bar\n    '\\u0306': MO.ACCENT,     // \\breve\n    '\\u0307': MO.ACCENT,     // \\dot\n    '\\u0308': MO.ACCENT,     // \\ddot\n    '\\u030C': MO.ACCENT,     // \\check\n    '\\u0332': MO.WIDEACCENT, // horizontal line\n    '\\u0338': MO.REL4,       // \\not\n    '\\u2015': [0, 0, TEXCLASS.ORD, {stretchy: true}], // horizontal line\n    '\\u2017': [0, 0, TEXCLASS.ORD, {stretchy: true}], // horizontal line\n    '\\u2020': MO.BIN3,       // \\dagger\n    '\\u2021': MO.BIN3,       // \\ddagger\n    '\\u2022': MO.BIN4,       // bullet\n    '\\u2026': MO.INNER,      // horizontal ellipsis\n    '\\u2043': MO.BIN4,       // hyphen bullet\n    '\\u2044': MO.TALLBIN,    // fraction slash\n    '\\u2061': MO.NONE,       // function application\n    '\\u2062': MO.NONE,       // invisible times\n    '\\u2063': [0, 0, TEXCLASS.NONE, {linebreakstyle: 'after', separator: true}], // invisible separator\n    '\\u2064': MO.NONE,       // invisible plus\n    '\\u20D7': MO.ACCENT,     // \\vec\n    '\\u2111': MO.ORD,        // \\Im\n    '\\u2113': MO.ORD,        // \\ell\n    '\\u2118': MO.ORD,        // \\wp\n    '\\u211C': MO.ORD,        // \\Re\n    '\\u2190': MO.WIDEREL,    // leftwards arrow\n    '\\u2191': MO.RELSTRETCH, // upwards arrow\n    '\\u2192': MO.WIDEREL,    // rightwards arrow\n    '\\u2193': MO.RELSTRETCH, // downwards arrow\n    '\\u2194': MO.WIDEREL,    // left right arrow\n    '\\u2195': MO.RELSTRETCH, // up down arrow\n    '\\u2196': MO.RELSTRETCH, // north west arrow\n    '\\u2197': MO.RELSTRETCH, // north east arrow\n    '\\u2198': MO.RELSTRETCH, // south east arrow\n    '\\u2199': MO.RELSTRETCH, // south west arrow\n    '\\u219A': MO.RELACCENT,  // leftwards arrow with stroke\n    '\\u219B': MO.RELACCENT,  // rightwards arrow with stroke\n    '\\u219C': MO.WIDEREL,    // leftwards wave arrow\n    '\\u219D': MO.WIDEREL,    // rightwards wave arrow\n    '\\u219E': MO.WIDEREL,    // leftwards two headed arrow\n    '\\u219F': MO.WIDEREL,    // upwards two headed arrow\n    '\\u21A0': MO.WIDEREL,    // rightwards two headed arrow\n    '\\u21A1': MO.RELSTRETCH, // downwards two headed arrow\n    '\\u21A2': MO.WIDEREL,    // leftwards arrow with tail\n    '\\u21A3': MO.WIDEREL,    // rightwards arrow with tail\n    '\\u21A4': MO.WIDEREL,    // leftwards arrow from bar\n    '\\u21A5': MO.RELSTRETCH, // upwards arrow from bar\n    '\\u21A6': MO.WIDEREL,    // rightwards arrow from bar\n    '\\u21A7': MO.RELSTRETCH, // downwards arrow from bar\n    '\\u21A8': MO.RELSTRETCH, // up down arrow with base\n    '\\u21A9': MO.WIDEREL,    // leftwards arrow with hook\n    '\\u21AA': MO.WIDEREL,    // rightwards arrow with hook\n    '\\u21AB': MO.WIDEREL,    // leftwards arrow with loop\n    '\\u21AC': MO.WIDEREL,    // rightwards arrow with loop\n    '\\u21AD': MO.WIDEREL,    // left right wave arrow\n    '\\u21AE': MO.RELACCENT,  // left right arrow with stroke\n    '\\u21AF': MO.RELSTRETCH, // downwards zigzag arrow\n    '\\u21B0': MO.RELSTRETCH, // upwards arrow with tip leftwards\n    '\\u21B1': MO.RELSTRETCH, // upwards arrow with tip rightwards\n    '\\u21B2': MO.RELSTRETCH, // downwards arrow with tip leftwards\n    '\\u21B3': MO.RELSTRETCH, // downwards arrow with tip rightwards\n    '\\u21B4': MO.RELSTRETCH, // rightwards arrow with corner downwards\n    '\\u21B5': MO.RELSTRETCH, // downwards arrow with corner leftwards\n    '\\u21B6': MO.RELACCENT,  // anticlockwise top semicircle arrow\n    '\\u21B7': MO.RELACCENT,  // clockwise top semicircle arrow\n    '\\u21B8': MO.REL,        // north west arrow to long bar\n    '\\u21B9': MO.WIDEREL,    // leftwards arrow to bar over rightwards arrow to bar\n    '\\u21BA': MO.REL,        // anticlockwise open circle arrow\n    '\\u21BB': MO.REL,        // clockwise open circle arrow\n    '\\u21BC': MO.WIDEREL,    // leftwards harpoon with barb upwards\n    '\\u21BD': MO.WIDEREL,    // leftwards harpoon with barb downwards\n    '\\u21BE': MO.RELSTRETCH, // upwards harpoon with barb rightwards\n    '\\u21BF': MO.RELSTRETCH, // upwards harpoon with barb leftwards\n    '\\u21C0': MO.WIDEREL,    // rightwards harpoon with barb upwards\n    '\\u21C1': MO.WIDEREL,    // rightwards harpoon with barb downwards\n    '\\u21C2': MO.RELSTRETCH, // downwards harpoon with barb rightwards\n    '\\u21C3': MO.RELSTRETCH, // downwards harpoon with barb leftwards\n    '\\u21C4': MO.WIDEREL,    // rightwards arrow over leftwards arrow\n    '\\u21C5': MO.RELSTRETCH, // upwards arrow leftwards of downwards arrow\n    '\\u21C6': MO.WIDEREL,    // leftwards arrow over rightwards arrow\n    '\\u21C7': MO.WIDEREL,    // leftwards paired arrows\n    '\\u21C8': MO.RELSTRETCH, // upwards paired arrows\n    '\\u21C9': MO.WIDEREL,    // rightwards paired arrows\n    '\\u21CA': MO.RELSTRETCH, // downwards paired arrows\n    '\\u21CB': MO.WIDEREL,    // leftwards harpoon over rightwards harpoon\n    '\\u21CC': MO.WIDEREL,    // rightwards harpoon over leftwards harpoon\n    '\\u21CD': MO.RELACCENT,  // leftwards double arrow with stroke\n    '\\u21CE': MO.RELACCENT,  // left right double arrow with stroke\n    '\\u21CF': MO.RELACCENT,  // rightwards double arrow with stroke\n    '\\u21D0': MO.WIDEREL,    // leftwards double arrow\n    '\\u21D1': MO.RELSTRETCH, // upwards double arrow\n    '\\u21D2': MO.WIDEREL,    // rightwards double arrow\n    '\\u21D3': MO.RELSTRETCH, // downwards double arrow\n    '\\u21D4': MO.WIDEREL,    // left right double arrow\n    '\\u21D5': MO.RELSTRETCH, // up down double arrow\n    '\\u21D6': MO.RELSTRETCH, // north west double arrow\n    '\\u21D7': MO.RELSTRETCH, // north east double arrow\n    '\\u21D8': MO.RELSTRETCH, // south east double arrow\n    '\\u21D9': MO.RELSTRETCH, // south west double arrow\n    '\\u21DA': MO.WIDEREL,    // leftwards triple arrow\n    '\\u21DB': MO.WIDEREL,    // rightwards triple arrow\n    '\\u21DC': MO.WIDEREL,    // leftwards squiggle arrow\n    '\\u21DD': MO.WIDEREL,    // rightwards squiggle arrow\n    '\\u21DE': MO.REL,        // upwards arrow with double stroke\n    '\\u21DF': MO.REL,        // downwards arrow with double stroke\n    '\\u21E0': MO.WIDEREL,    // leftwards dashed arrow\n    '\\u21E1': MO.RELSTRETCH, // upwards dashed arrow\n    '\\u21E2': MO.WIDEREL,    // rightwards dashed arrow\n    '\\u21E3': MO.RELSTRETCH, // downwards dashed arrow\n    '\\u21E4': MO.WIDEREL,    // leftwards arrow to bar\n    '\\u21E5': MO.WIDEREL,    // rightwards arrow to bar\n    '\\u21E6': MO.WIDEREL,    // leftwards white arrow\n    '\\u21E7': MO.RELSTRETCH, // upwards white arrow\n    '\\u21E8': MO.WIDEREL,    // rightwards white arrow\n    '\\u21E9': MO.RELSTRETCH, // downwards white arrow\n    '\\u21EA': MO.RELSTRETCH, // upwards white arrow from bar\n    '\\u21EB': MO.RELSTRETCH, // upwards white arrow on pedestal\n    '\\u21EC': MO.RELSTRETCH, // upwards white arrow on pedestal with horizontal bar\n    '\\u21ED': MO.RELSTRETCH, // upwards white arrow on pedestal with vertical bar\n    '\\u21EE': MO.RELSTRETCH, // upwards white double arrow\n    '\\u21EF': MO.RELSTRETCH, // upwards white double arrow on pedestal\n    '\\u21F0': MO.WIDEREL,    // rightwards white arrow from wall\n    '\\u21F1': MO.REL,        // north west arrow to corner\n    '\\u21F2': MO.REL,        // south east arrow to corner\n    '\\u21F3': MO.RELSTRETCH, // up down white arrow\n    '\\u21F4': MO.RELACCENT,  // right arrow with small circle\n    '\\u21F5': MO.RELSTRETCH, // downwards arrow leftwards of upwards arrow\n    '\\u21F6': MO.WIDEREL,    // three rightwards arrows\n    '\\u21F7': MO.RELACCENT,  // leftwards arrow with vertical stroke\n    '\\u21F8': MO.RELACCENT,  // rightwards arrow with vertical stroke\n    '\\u21F9': MO.RELACCENT,  // left right arrow with vertical stroke\n    '\\u21FA': MO.RELACCENT,  // leftwards arrow with double vertical stroke\n    '\\u21FB': MO.RELACCENT,  // rightwards arrow with double vertical stroke\n    '\\u21FC': MO.RELACCENT,  // left right arrow with double vertical stroke\n    '\\u21FD': MO.WIDEREL,    // leftwards open-headed arrow\n    '\\u21FE': MO.WIDEREL,    // rightwards open-headed arrow\n    '\\u21FF': MO.WIDEREL,    // left right open-headed arrow\n    '\\u2201': OPDEF(1, 2, TEXCLASS.ORD), // complement\n    '\\u2205': MO.ORD,        // \\emptyset\n    '\\u2206': MO.BIN3,       // increment\n    '\\u2208': MO.REL,        // element of\n    '\\u2209': MO.REL,        // not an element of\n    '\\u220A': MO.REL,        // small element of\n    '\\u220B': MO.REL,        // contains as member\n    '\\u220C': MO.REL,        // does not contain as member\n    '\\u220D': MO.REL,        // small contains as member\n    '\\u220E': MO.BIN3,       // end of proof\n    '\\u2212': MO.BIN4,       // minus sign\n    '\\u2213': MO.BIN4,       // minus-or-plus sign\n    '\\u2214': MO.BIN4,       // dot plus\n    '\\u2215': MO.TALLBIN,    // division slash\n    '\\u2216': MO.BIN4,       // set minus\n    '\\u2217': MO.BIN4,       // asterisk operator\n    '\\u2218': MO.BIN4,       // ring operator\n    '\\u2219': MO.BIN4,       // bullet operator\n    '\\u221D': MO.REL,        // proportional to\n    '\\u221E': MO.ORD,        // \\infty\n    '\\u221F': MO.REL,        // right angle\n    '\\u2223': MO.REL,        // divides\n    '\\u2224': MO.REL,        // does not divide\n    '\\u2225': MO.REL,        // parallel to\n    '\\u2226': MO.REL,        // not parallel to\n    '\\u2227': MO.BIN4,       // logical and\n    '\\u2228': MO.BIN4,       // logical or\n    '\\u2229': MO.BIN4,       // intersection\n    '\\u222A': MO.BIN4,       // union\n    '\\u2234': MO.REL,        // therefore\n    '\\u2235': MO.REL,        // because\n    '\\u2236': MO.REL,        // ratio\n    '\\u2237': MO.REL,        // proportion\n    '\\u2238': MO.BIN4,       // dot minus\n    '\\u2239': MO.REL,        // excess\n    '\\u223A': MO.BIN4,       // geometric proportion\n    '\\u223B': MO.REL,        // homothetic\n    '\\u223C': MO.REL,        // tilde operator\n    '\\u223D': MO.REL,        // reversed tilde\n    '\\u223D\\u0331': MO.BIN3, // reversed tilde with underline\n    '\\u223E': MO.REL,        // inverted lazy s\n    '\\u223F': MO.BIN3,       // sine wave\n    '\\u2240': MO.BIN4,       // wreath product\n    '\\u2241': MO.REL,        // not tilde\n    '\\u2242': MO.REL,        // minus tilde\n    '\\u2242\\u0338': MO.REL,  // minus tilde with slash\n    '\\u2243': MO.REL,        // asymptotically equal to\n    '\\u2244': MO.REL,        // not asymptotically equal to\n    '\\u2245': MO.REL,        // approximately equal to\n    '\\u2246': MO.REL,        // approximately but not actually equal to\n    '\\u2247': MO.REL,        // neither approximately nor actually equal to\n    '\\u2248': MO.REL,        // almost equal to\n    '\\u2249': MO.REL,        // not almost equal to\n    '\\u224A': MO.REL,        // almost equal or equal to\n    '\\u224B': MO.REL,        // triple tilde\n    '\\u224C': MO.REL,        // all equal to\n    '\\u224D': MO.REL,        // equivalent to\n    '\\u224E': MO.REL,        // geometrically equivalent to\n    '\\u224E\\u0338': MO.REL,  // geometrically equivalent to with slash\n    '\\u224F': MO.REL,        // difference between\n    '\\u224F\\u0338': MO.REL,  // difference between with slash\n    '\\u2250': MO.REL,        // approaches the limit\n    '\\u2251': MO.REL,        // geometrically equal to\n    '\\u2252': MO.REL,        // approximately equal to or the image of\n    '\\u2253': MO.REL,        // image of or approximately equal to\n    '\\u2254': MO.REL,        // colon equals\n    '\\u2255': MO.REL,        // equals colon\n    '\\u2256': MO.REL,        // ring in equal to\n    '\\u2257': MO.REL,        // ring equal to\n    '\\u2258': MO.REL,        // corresponds to\n    '\\u2259': MO.REL,        // estimates\n    '\\u225A': MO.REL,        // equiangular to\n    '\\u225B': MO.REL,        // star equals\n    '\\u225C': MO.REL,        // delta equal to\n    '\\u225D': MO.REL,        // equal to by definition\n    '\\u225E': MO.REL,        // measured by\n    '\\u225F': MO.REL,        // questioned equal to\n    '\\u2260': MO.REL,        // not equal to\n    '\\u2261': MO.REL,        // identical to\n    '\\u2262': MO.REL,        // not identical to\n    '\\u2263': MO.REL,        // strictly equivalent to\n    '\\u2264': MO.REL,        // less-than or equal to\n    '\\u2265': MO.REL,        // greater-than or equal to\n    '\\u2266': MO.REL,        // less-than over equal to\n    '\\u2266\\u0338': MO.REL,  // less-than over equal to with slash\n    '\\u2267': MO.REL,        // greater-than over equal to\n    '\\u2268': MO.REL,        // less-than but not equal to\n    '\\u2269': MO.REL,        // greater-than but not equal to\n    '\\u226A': MO.REL,        // much less-than\n    '\\u226A\\u0338': MO.REL,  // much less than with slash\n    '\\u226B': MO.REL,        // much greater-than\n    '\\u226B\\u0338': MO.REL,  // much greater than with slash\n    '\\u226C': MO.REL,        // between\n    '\\u226D': MO.REL,        // not equivalent to\n    '\\u226E': MO.REL,        // not less-than\n    '\\u226F': MO.REL,        // not greater-than\n    '\\u2270': MO.REL,        // neither less-than nor equal to\n    '\\u2271': MO.REL,        // neither greater-than nor equal to\n    '\\u2272': MO.REL,        // less-than or equivalent to\n    '\\u2273': MO.REL,        // greater-than or equivalent to\n    '\\u2274': MO.REL,        // neither less-than nor equivalent to\n    '\\u2275': MO.REL,        // neither greater-than nor equivalent to\n    '\\u2276': MO.REL,        // less-than or greater-than\n    '\\u2277': MO.REL,        // greater-than or less-than\n    '\\u2278': MO.REL,        // neither less-than nor greater-than\n    '\\u2279': MO.REL,        // neither greater-than nor less-than\n    '\\u227A': MO.REL,        // precedes\n    '\\u227B': MO.REL,        // succeeds\n    '\\u227C': MO.REL,        // precedes or equal to\n    '\\u227D': MO.REL,        // succeeds or equal to\n    '\\u227E': MO.REL,        // precedes or equivalent to\n    '\\u227F': MO.REL,        // succeeds or equivalent to\n    '\\u227F\\u0338': MO.REL,  // succeeds or equivalent to with slash\n    '\\u2280': MO.REL,        // does not precede\n    '\\u2281': MO.REL,        // does not succeed\n    '\\u2282': MO.REL,        // subset of\n    '\\u2282\\u20D2': MO.REL,  // subset of with vertical line\n    '\\u2283': MO.REL,        // superset of\n    '\\u2283\\u20D2': MO.REL,  // superset of with vertical line\n    '\\u2284': MO.REL,        // not a subset of\n    '\\u2285': MO.REL,        // not a superset of\n    '\\u2286': MO.REL,        // subset of or equal to\n    '\\u2287': MO.REL,        // superset of or equal to\n    '\\u2288': MO.REL,        // neither a subset of nor equal to\n    '\\u2289': MO.REL,        // neither a superset of nor equal to\n    '\\u228A': MO.REL,        // subset of with not equal to\n    '\\u228B': MO.REL,        // superset of with not equal to\n    '\\u228C': MO.BIN4,       // multiset\n    '\\u228D': MO.BIN4,       // multiset multiplication\n    '\\u228E': MO.BIN4,       // multiset union\n    '\\u228F': MO.REL,        // square image of\n    '\\u228F\\u0338': MO.REL,  // square image of with slash\n    '\\u2290': MO.REL,        // square original of\n    '\\u2290\\u0338': MO.REL,  // square original of with slash\n    '\\u2291': MO.REL,        // square image of or equal to\n    '\\u2292': MO.REL,        // square original of or equal to\n    '\\u2293': MO.BIN4,       // square cap\n    '\\u2294': MO.BIN4,       // square cup\n    '\\u2295': MO.BIN4,       // circled plus\n    '\\u2296': MO.BIN4,       // circled minus\n    '\\u2297': MO.BIN4,       // circled times\n    '\\u2298': MO.BIN4,       // circled division slash\n    '\\u2299': MO.BIN4,       // circled dot operator\n    '\\u229A': MO.BIN4,       // circled ring operator\n    '\\u229B': MO.BIN4,       // circled asterisk operator\n    '\\u229C': MO.BIN4,       // circled equals\n    '\\u229D': MO.BIN4,       // circled dash\n    '\\u229E': MO.BIN4,       // squared plus\n    '\\u229F': MO.BIN4,       // squared minus\n    '\\u22A0': MO.BIN4,       // squared times\n    '\\u22A1': MO.BIN4,       // squared dot operator\n    '\\u22A2': MO.REL,        // right tack\n    '\\u22A3': MO.REL,        // left tack\n    '\\u22A4': MO.ORD55,      // down tack\n    '\\u22A5': MO.REL,        // up tack\n    '\\u22A6': MO.REL,        // assertion\n    '\\u22A7': MO.REL,        // models\n    '\\u22A8': MO.REL,        // true\n    '\\u22A9': MO.REL,        // forces\n    '\\u22AA': MO.REL,        // triple vertical bar right turnstile\n    '\\u22AB': MO.REL,        // double vertical bar double right turnstile\n    '\\u22AC': MO.REL,        // does not prove\n    '\\u22AD': MO.REL,        // not true\n    '\\u22AE': MO.REL,        // does not force\n    '\\u22AF': MO.REL,        // negated double vertical bar double right turnstile\n    '\\u22B0': MO.REL,        // precedes under relation\n    '\\u22B1': MO.REL,        // succeeds under relation\n    '\\u22B2': MO.REL,        // normal subgroup of\n    '\\u22B3': MO.REL,        // contains as normal subgroup\n    '\\u22B4': MO.REL,        // normal subgroup of or equal to\n    '\\u22B5': MO.REL,        // contains as normal subgroup or equal to\n    '\\u22B6': MO.REL,        // original of\n    '\\u22B7': MO.REL,        // image of\n    '\\u22B8': MO.REL,        // multimap\n    '\\u22B9': MO.REL,        // hermitian conjugate matrix\n    '\\u22BA': MO.BIN4,       // intercalate\n    '\\u22BB': MO.BIN4,       // xor\n    '\\u22BC': MO.BIN4,       // nand\n    '\\u22BD': MO.BIN4,       // nor\n    '\\u22BE': MO.BIN3,       // right angle with arc\n    '\\u22BF': MO.BIN3,       // right triangle\n    '\\u22C4': MO.BIN4,       // diamond operator\n    '\\u22C5': MO.BIN4,       // dot operator\n    '\\u22C6': MO.BIN4,       // star operator\n    '\\u22C7': MO.BIN4,       // division times\n    '\\u22C8': MO.REL,        // bowtie\n    '\\u22C9': MO.BIN4,       // left normal factor semidirect product\n    '\\u22CA': MO.BIN4,       // right normal factor semidirect product\n    '\\u22CB': MO.BIN4,       // left semidirect product\n    '\\u22CC': MO.BIN4,       // right semidirect product\n    '\\u22CD': MO.REL,        // reversed tilde equals\n    '\\u22CE': MO.BIN4,       // curly logical or\n    '\\u22CF': MO.BIN4,       // curly logical and\n    '\\u22D0': MO.REL,        // double subset\n    '\\u22D1': MO.REL,        // double superset\n    '\\u22D2': MO.BIN4,       // double intersection\n    '\\u22D3': MO.BIN4,       // double union\n    '\\u22D4': MO.REL,        // pitchfork\n    '\\u22D5': MO.REL,        // equal and parallel to\n    '\\u22D6': MO.REL,        // less-than with dot\n    '\\u22D7': MO.REL,        // greater-than with dot\n    '\\u22D8': MO.REL,        // very much less-than\n    '\\u22D9': MO.REL,        // very much greater-than\n    '\\u22DA': MO.REL,        // less-than equal to or greater-than\n    '\\u22DB': MO.REL,        // greater-than equal to or less-than\n    '\\u22DC': MO.REL,        // equal to or less-than\n    '\\u22DD': MO.REL,        // equal to or greater-than\n    '\\u22DE': MO.REL,        // equal to or precedes\n    '\\u22DF': MO.REL,        // equal to or succeeds\n    '\\u22E0': MO.REL,        // does not precede or equal\n    '\\u22E1': MO.REL,        // does not succeed or equal\n    '\\u22E2': MO.REL,        // not square image of or equal to\n    '\\u22E3': MO.REL,        // not square original of or equal to\n    '\\u22E4': MO.REL,        // square image of or not equal to\n    '\\u22E5': MO.REL,        // square original of or not equal to\n    '\\u22E6': MO.REL,        // less-than but not equivalent to\n    '\\u22E7': MO.REL,        // greater-than but not equivalent to\n    '\\u22E8': MO.REL,        // precedes but not equivalent to\n    '\\u22E9': MO.REL,        // succeeds but not equivalent to\n    '\\u22EA': MO.REL,        // not normal subgroup of\n    '\\u22EB': MO.REL,        // does not contain as normal subgroup\n    '\\u22EC': MO.REL,        // not normal subgroup of or equal to\n    '\\u22ED': MO.REL,        // does not contain as normal subgroup or equal\n    '\\u22EE': MO.ORD55,      // vertical ellipsis\n    '\\u22EF': MO.INNER,      // midline horizontal ellipsis\n    '\\u22F0': MO.REL,        // up right diagonal ellipsis\n    '\\u22F1': [5, 5, TEXCLASS.INNER, null], // down right diagonal ellipsis\n    '\\u22F2': MO.REL,        // element of with long horizontal stroke\n    '\\u22F3': MO.REL,        // element of with vertical bar at end of horizontal stroke\n    '\\u22F4': MO.REL,        // small element of with vertical bar at end of horizontal stroke\n    '\\u22F5': MO.REL,        // element of with dot above\n    '\\u22F6': MO.REL,        // element of with overbar\n    '\\u22F7': MO.REL,        // small element of with overbar\n    '\\u22F8': MO.REL,        // element of with underbar\n    '\\u22F9': MO.REL,        // element of with two horizontal strokes\n    '\\u22FA': MO.REL,        // contains with long horizontal stroke\n    '\\u22FB': MO.REL,        // contains with vertical bar at end of horizontal stroke\n    '\\u22FC': MO.REL,        // small contains with vertical bar at end of horizontal stroke\n    '\\u22FD': MO.REL,        // contains with overbar\n    '\\u22FE': MO.REL,        // small contains with overbar\n    '\\u22FF': MO.REL,        // z notation bag membership\n    '\\u2305': MO.BIN3,       // barwedge\n    '\\u2306': MO.BIN3,       // doublebarwedge\n    '\\u2322': MO.REL4,       // \\frown\n    '\\u2323': MO.REL4,       // \\smile\n    '\\u2329': MO.OPEN,       // langle\n    '\\u232A': MO.CLOSE,      // rangle\n    '\\u23AA': MO.ORD,        // \\bracevert\n    '\\u23AF': [0, 0, TEXCLASS.ORD, {stretchy: true}], // \\underline\n    '\\u23B0': MO.OPEN,       // \\lmoustache\n    '\\u23B1': MO.CLOSE,      // \\rmoustache\n    '\\u2500': MO.ORD,        // horizontal line\n    '\\u25B3': MO.BIN4,       // white up-pointing triangle\n    '\\u25B5': MO.BIN4,       // white up-pointing small triangle\n    '\\u25B9': MO.BIN4,       // white right-pointing small triangle\n    '\\u25BD': MO.BIN4,       // white down-pointing triangle\n    '\\u25BF': MO.BIN4,       // white down-pointing small triangle\n    '\\u25C3': MO.BIN4,       // white left-pointing small triangle\n    '\\u25EF': MO.BIN3,       // \\bigcirc\n    '\\u2660': MO.ORD,        // \\spadesuit\n    '\\u2661': MO.ORD,        // \\heartsuit\n    '\\u2662': MO.ORD,        // \\diamondsuit\n    '\\u2663': MO.ORD,        // \\clubsuit\n    '\\u2758': MO.REL,        // light vertical bar\n    '\\u27F0': MO.RELSTRETCH, // upwards quadruple arrow\n    '\\u27F1': MO.RELSTRETCH, // downwards quadruple arrow\n    '\\u27F5': MO.WIDEREL,    // long leftwards arrow\n    '\\u27F6': MO.WIDEREL,    // long rightwards arrow\n    '\\u27F7': MO.WIDEREL,    // long left right arrow\n    '\\u27F8': MO.WIDEREL,    // long leftwards double arrow\n    '\\u27F9': MO.WIDEREL,    // long rightwards double arrow\n    '\\u27FA': MO.WIDEREL,    // long left right double arrow\n    '\\u27FB': MO.WIDEREL,    // long leftwards arrow from bar\n    '\\u27FC': MO.WIDEREL,    // long rightwards arrow from bar\n    '\\u27FD': MO.WIDEREL,    // long leftwards double arrow from bar\n    '\\u27FE': MO.WIDEREL,    // long rightwards double arrow from bar\n    '\\u27FF': MO.WIDEREL,    // long rightwards squiggle arrow\n    '\\u2900': MO.RELACCENT,  // rightwards two-headed arrow with vertical stroke\n    '\\u2901': MO.RELACCENT,  // rightwards two-headed arrow with double vertical stroke\n    '\\u2902': MO.RELACCENT,  // leftwards double arrow with vertical stroke\n    '\\u2903': MO.RELACCENT,  // rightwards double arrow with vertical stroke\n    '\\u2904': MO.RELACCENT,  // left right double arrow with vertical stroke\n    '\\u2905': MO.RELACCENT,  // rightwards two-headed arrow from bar\n    '\\u2906': MO.RELACCENT,  // leftwards double arrow from bar\n    '\\u2907': MO.RELACCENT,  // rightwards double arrow from bar\n    '\\u2908': MO.REL,        // downwards arrow with horizontal stroke\n    '\\u2909': MO.REL,        // upwards arrow with horizontal stroke\n    '\\u290A': MO.RELSTRETCH, // upwards triple arrow\n    '\\u290B': MO.RELSTRETCH, // downwards triple arrow\n    '\\u290C': MO.WIDEREL,    // leftwards double dash arrow\n    '\\u290D': MO.WIDEREL,    // rightwards double dash arrow\n    '\\u290E': MO.WIDEREL,    // leftwards triple dash arrow\n    '\\u290F': MO.WIDEREL,    // rightwards triple dash arrow\n    '\\u2910': MO.WIDEREL,    // rightwards two-headed triple dash arrow\n    '\\u2911': MO.RELACCENT,  // rightwards arrow with dotted stem\n    '\\u2912': MO.RELSTRETCH, // upwards arrow to bar\n    '\\u2913': MO.RELSTRETCH, // downwards arrow to bar\n    '\\u2914': MO.RELACCENT,  // rightwards arrow with tail with vertical stroke\n    '\\u2915': MO.RELACCENT,  // rightwards arrow with tail with double vertical stroke\n    '\\u2916': MO.RELACCENT,  // rightwards two-headed arrow with tail\n    '\\u2917': MO.RELACCENT,  // rightwards two-headed arrow with tail with vertical stroke\n    '\\u2918': MO.RELACCENT,  // rightwards two-headed arrow with tail with double vertical stroke\n    '\\u2919': MO.RELACCENT,  // leftwards arrow-tail\n    '\\u291A': MO.RELACCENT,  // rightwards arrow-tail\n    '\\u291B': MO.RELACCENT,  // leftwards double arrow-tail\n    '\\u291C': MO.RELACCENT,  // rightwards double arrow-tail\n    '\\u291D': MO.RELACCENT,  // leftwards arrow to black diamond\n    '\\u291E': MO.RELACCENT,  // rightwards arrow to black diamond\n    '\\u291F': MO.RELACCENT,  // leftwards arrow from bar to black diamond\n    '\\u2920': MO.RELACCENT,  // rightwards arrow from bar to black diamond\n    '\\u2921': MO.RELSTRETCH, // north west and south east arrow\n    '\\u2922': MO.RELSTRETCH, // north east and south west arrow\n    '\\u2923': MO.REL,        // north west arrow with hook\n    '\\u2924': MO.REL,        // north east arrow with hook\n    '\\u2925': MO.REL,        // south east arrow with hook\n    '\\u2926': MO.REL,        // south west arrow with hook\n    '\\u2927': MO.REL,        // north west arrow and north east arrow\n    '\\u2928': MO.REL,        // north east arrow and south east arrow\n    '\\u2929': MO.REL,        // south east arrow and south west arrow\n    '\\u292A': MO.REL,        // south west arrow and north west arrow\n    '\\u292B': MO.REL,        // rising diagonal crossing falling diagonal\n    '\\u292C': MO.REL,        // falling diagonal crossing rising diagonal\n    '\\u292D': MO.REL,        // south east arrow crossing north east arrow\n    '\\u292E': MO.REL,        // north east arrow crossing south east arrow\n    '\\u292F': MO.REL,        // falling diagonal crossing north east arrow\n    '\\u2930': MO.REL,        // rising diagonal crossing south east arrow\n    '\\u2931': MO.REL,        // north east arrow crossing north west arrow\n    '\\u2932': MO.REL,        // north west arrow crossing north east arrow\n    '\\u2933': MO.RELACCENT,  // wave arrow pointing directly right\n    '\\u2934': MO.REL,        // arrow pointing rightwards then curving upwards\n    '\\u2935': MO.REL,        // arrow pointing rightwards then curving downwards\n    '\\u2936': MO.REL,        // arrow pointing downwards then curving leftwards\n    '\\u2937': MO.REL,        // arrow pointing downwards then curving rightwards\n    '\\u2938': MO.REL,        // right-side arc clockwise arrow\n    '\\u2939': MO.REL,        // left-side arc anticlockwise arrow\n    '\\u293A': MO.RELACCENT,  // top arc anticlockwise arrow\n    '\\u293B': MO.RELACCENT,  // bottom arc anticlockwise arrow\n    '\\u293C': MO.RELACCENT,  // top arc clockwise arrow with minus\n    '\\u293D': MO.RELACCENT,  // top arc anticlockwise arrow with plus\n    '\\u293E': MO.REL,        // lower right semicircular clockwise arrow\n    '\\u293F': MO.REL,        // lower left semicircular anticlockwise arrow\n    '\\u2940': MO.REL,        // anticlockwise closed circle arrow\n    '\\u2941': MO.REL,        // clockwise closed circle arrow\n    '\\u2942': MO.RELACCENT,  // rightwards arrow above short leftwards arrow\n    '\\u2943': MO.RELACCENT,  // leftwards arrow above short rightwards arrow\n    '\\u2944': MO.RELACCENT,  // short rightwards arrow above leftwards arrow\n    '\\u2945': MO.RELACCENT,  // rightwards arrow with plus below\n    '\\u2946': MO.RELACCENT,  // leftwards arrow with plus below\n    '\\u2947': MO.RELACCENT,  // rightwards arrow through x\n    '\\u2948': MO.RELACCENT,  // left right arrow through small circle\n    '\\u2949': MO.REL,        // upwards two-headed arrow from small circle\n    '\\u294A': MO.RELACCENT,  // left barb up right barb down harpoon\n    '\\u294B': MO.RELACCENT,  // left barb down right barb up harpoon\n    '\\u294C': MO.REL,        // up barb right down barb left harpoon\n    '\\u294D': MO.REL,        // up barb left down barb right harpoon\n    '\\u294E': MO.WIDEREL,    // left barb up right barb up harpoon\n    '\\u294F': MO.RELSTRETCH, // up barb right down barb right harpoon\n    '\\u2950': MO.WIDEREL,    // left barb down right barb down harpoon\n    '\\u2951': MO.RELSTRETCH, // up barb left down barb left harpoon\n    '\\u2952': MO.WIDEREL,    // leftwards harpoon with barb up to bar\n    '\\u2953': MO.WIDEREL,    // rightwards harpoon with barb up to bar\n    '\\u2954': MO.RELSTRETCH, // upwards harpoon with barb right to bar\n    '\\u2955': MO.RELSTRETCH, // downwards harpoon with barb right to bar\n    '\\u2956': MO.RELSTRETCH, // leftwards harpoon with barb down to bar\n    '\\u2957': MO.RELSTRETCH, // rightwards harpoon with barb down to bar\n    '\\u2958': MO.RELSTRETCH, // upwards harpoon with barb left to bar\n    '\\u2959': MO.RELSTRETCH, // downwards harpoon with barb left to bar\n    '\\u295A': MO.WIDEREL,    // leftwards harpoon with barb up from bar\n    '\\u295B': MO.WIDEREL,    // rightwards harpoon with barb up from bar\n    '\\u295C': MO.RELSTRETCH, // upwards harpoon with barb right from bar\n    '\\u295D': MO.RELSTRETCH, // downwards harpoon with barb right from bar\n    '\\u295E': MO.WIDEREL,    // leftwards harpoon with barb down from bar\n    '\\u295F': MO.WIDEREL,    // rightwards harpoon with barb down from bar\n    '\\u2960': MO.RELSTRETCH, // upwards harpoon with barb left from bar\n    '\\u2961': MO.RELSTRETCH, // downwards harpoon with barb left from bar\n    '\\u2962': MO.RELACCENT,  // leftwards harpoon with barb up above leftwards harpoon with barb down\n    '\\u2963': MO.REL,        // upwards harpoon with barb left beside upwards harpoon with barb right\n    '\\u2964': MO.RELACCENT,  // rightwards harpoon with barb up above rightwards harpoon with barb down\n    '\\u2965': MO.REL,        // downwards harpoon with barb left beside downwards harpoon with barb right\n    '\\u2966': MO.RELACCENT,  // leftwards harpoon with barb up above rightwards harpoon with barb up\n    '\\u2967': MO.RELACCENT,  // leftwards harpoon with barb down above rightwards harpoon with barb down\n    '\\u2968': MO.RELACCENT,  // rightwards harpoon with barb up above leftwards harpoon with barb up\n    '\\u2969': MO.RELACCENT,  // rightwards harpoon with barb down above leftwards harpoon with barb down\n    '\\u296A': MO.RELACCENT,  // leftwards harpoon with barb up above long dash\n    '\\u296B': MO.RELACCENT,  // leftwards harpoon with barb down below long dash\n    '\\u296C': MO.RELACCENT,  // rightwards harpoon with barb up above long dash\n    '\\u296D': MO.RELACCENT,  // rightwards harpoon with barb down below long dash\n    '\\u296E': MO.RELSTRETCH, // upwards harpoon with barb left beside downwards harpoon with barb right\n    '\\u296F': MO.RELSTRETCH, // downwards harpoon with barb left beside upwards harpoon with barb right\n    '\\u2970': MO.RELACCENT,  // right double arrow with rounded head\n    '\\u2971': MO.RELACCENT,  // equals sign above rightwards arrow\n    '\\u2972': MO.RELACCENT,  // tilde operator above rightwards arrow\n    '\\u2973': MO.RELACCENT,  // leftwards arrow above tilde operator\n    '\\u2974': MO.RELACCENT,  // rightwards arrow above tilde operator\n    '\\u2975': MO.RELACCENT,  // rightwards arrow above almost equal to\n    '\\u2976': MO.RELACCENT,  // less-than above leftwards arrow\n    '\\u2977': MO.RELACCENT,  // leftwards arrow through less-than\n    '\\u2978': MO.RELACCENT,  // greater-than above rightwards arrow\n    '\\u2979': MO.RELACCENT,  // subset above rightwards arrow\n    '\\u297A': MO.RELACCENT,  // leftwards arrow through subset\n    '\\u297B': MO.RELACCENT,  // superset above leftwards arrow\n    '\\u297C': MO.RELACCENT,  // left fish tail\n    '\\u297D': MO.RELACCENT,  // right fish tail\n    '\\u297E': MO.REL,        // up fish tail\n    '\\u297F': MO.REL,        // down fish tail\n    '\\u2981': MO.BIN3,       // z notation spot\n    '\\u2982': MO.BIN3,       // z notation type colon\n    '\\u2999': MO.BIN3,       // dotted fence\n    '\\u299A': MO.BIN3,       // vertical zigzag line\n    '\\u299B': MO.BIN3,       // measured angle opening left\n    '\\u299C': MO.BIN3,       // right angle variant with square\n    '\\u299D': MO.BIN3,       // measured right angle with dot\n    '\\u299E': MO.BIN3,       // angle with s inside\n    '\\u299F': MO.BIN3,       // acute angle\n    '\\u29A0': MO.BIN3,       // spherical angle opening left\n    '\\u29A1': MO.BIN3,       // spherical angle opening up\n    '\\u29A2': MO.BIN3,       // turned angle\n    '\\u29A3': MO.BIN3,       // reversed angle\n    '\\u29A4': MO.BIN3,       // angle with underbar\n    '\\u29A5': MO.BIN3,       // reversed angle with underbar\n    '\\u29A6': MO.BIN3,       // oblique angle opening up\n    '\\u29A7': MO.BIN3,       // oblique angle opening down\n    '\\u29A8': MO.BIN3,       // measured angle with open arm ending in arrow pointing up and right\n    '\\u29A9': MO.BIN3,       // measured angle with open arm ending in arrow pointing up and left\n    '\\u29AA': MO.BIN3,       // measured angle with open arm ending in arrow pointing down and right\n    '\\u29AB': MO.BIN3,       // measured angle with open arm ending in arrow pointing down and left\n    '\\u29AC': MO.BIN3,       // measured angle with open arm ending in arrow pointing right and up\n    '\\u29AD': MO.BIN3,       // measured angle with open arm ending in arrow pointing left and up\n    '\\u29AE': MO.BIN3,       // measured angle with open arm ending in arrow pointing right and down\n    '\\u29AF': MO.BIN3,       // measured angle with open arm ending in arrow pointing left and down\n    '\\u29B0': MO.BIN3,       // reversed empty set\n    '\\u29B1': MO.BIN3,       // empty set with overbar\n    '\\u29B2': MO.BIN3,       // empty set with small circle above\n    '\\u29B3': MO.BIN3,       // empty set with right arrow above\n    '\\u29B4': MO.BIN3,       // empty set with left arrow above\n    '\\u29B5': MO.BIN3,       // circle with horizontal bar\n    '\\u29B6': MO.BIN4,       // circled vertical bar\n    '\\u29B7': MO.BIN4,       // circled parallel\n    '\\u29B8': MO.BIN4,       // circled reverse solidus\n    '\\u29B9': MO.BIN4,       // circled perpendicular\n    '\\u29BA': MO.BIN4,       // circle divided by horizontal bar and top half divided by vertical bar\n    '\\u29BB': MO.BIN4,       // circle with superimposed x\n    '\\u29BC': MO.BIN4,       // circled anticlockwise-rotated division sign\n    '\\u29BD': MO.BIN4,       // up arrow through circle\n    '\\u29BE': MO.BIN4,       // circled white bullet\n    '\\u29BF': MO.BIN4,       // circled bullet\n    '\\u29C0': MO.REL,        // circled less-than\n    '\\u29C1': MO.REL,        // circled greater-than\n    '\\u29C2': MO.BIN3,       // circle with small circle to the right\n    '\\u29C3': MO.BIN3,       // circle with two horizontal strokes to the right\n    '\\u29C4': MO.BIN4,       // squared rising diagonal slash\n    '\\u29C5': MO.BIN4,       // squared falling diagonal slash\n    '\\u29C6': MO.BIN4,       // squared asterisk\n    '\\u29C7': MO.BIN4,       // squared small circle\n    '\\u29C8': MO.BIN4,       // squared square\n    '\\u29C9': MO.BIN3,       // two joined squares\n    '\\u29CA': MO.BIN3,       // triangle with dot above\n    '\\u29CB': MO.BIN3,       // triangle with underbar\n    '\\u29CC': MO.BIN3,       // s in triangle\n    '\\u29CD': MO.BIN3,       // triangle with serifs at bottom\n    '\\u29CE': MO.REL,        // right triangle above left triangle\n    '\\u29CF': MO.REL,        // left triangle beside vertical bar\n    '\\u29CF\\u0338': MO.REL,  // left triangle beside vertical bar with slash\n    '\\u29D0': MO.REL,        // vertical bar beside right triangle\n    '\\u29D0\\u0338': MO.REL,  // vertical bar beside right triangle with slash\n    '\\u29D1': MO.REL,        // bowtie with left half black\n    '\\u29D2': MO.REL,        // bowtie with right half black\n    '\\u29D3': MO.REL,        // black bowtie\n    '\\u29D4': MO.REL,        // times with left half black\n    '\\u29D5': MO.REL,        // times with right half black\n    '\\u29D6': MO.BIN4,       // white hourglass\n    '\\u29D7': MO.BIN4,       // black hourglass\n    '\\u29D8': MO.BIN3,       // left wiggly fence\n    '\\u29D9': MO.BIN3,       // right wiggly fence\n    '\\u29DB': MO.BIN3,       // right double wiggly fence\n    '\\u29DC': MO.BIN3,       // incomplete infinity\n    '\\u29DD': MO.BIN3,       // tie over infinity\n    '\\u29DE': MO.REL,        // infinity negated with vertical bar\n    '\\u29DF': MO.BIN3,       // double-ended multimap\n    '\\u29E0': MO.BIN3,       // square with contoured outline\n    '\\u29E1': MO.REL,        // increases as\n    '\\u29E2': MO.BIN4,       // shuffle product\n    '\\u29E3': MO.REL,        // equals sign and slanted parallel\n    '\\u29E4': MO.REL,        // equals sign and slanted parallel with tilde above\n    '\\u29E5': MO.REL,        // identical to and slanted parallel\n    '\\u29E6': MO.REL,        // gleich stark\n    '\\u29E7': MO.BIN3,       // thermodynamic\n    '\\u29E8': MO.BIN3,       // down-pointing triangle with left half black\n    '\\u29E9': MO.BIN3,       // down-pointing triangle with right half black\n    '\\u29EA': MO.BIN3,       // black diamond with down arrow\n    '\\u29EB': MO.BIN3,       // black lozenge\n    '\\u29EC': MO.BIN3,       // white circle with down arrow\n    '\\u29ED': MO.BIN3,       // black circle with down arrow\n    '\\u29EE': MO.BIN3,       // error-barred white square\n    '\\u29EF': MO.BIN3,       // error-barred black square\n    '\\u29F0': MO.BIN3,       // error-barred white diamond\n    '\\u29F1': MO.BIN3,       // error-barred black diamond\n    '\\u29F2': MO.BIN3,       // error-barred white circle\n    '\\u29F3': MO.BIN3,       // error-barred black circle\n    '\\u29F4': MO.REL,        // rule-delayed\n    '\\u29F5': MO.BIN4,       // reverse solidus operator\n    '\\u29F6': MO.BIN4,       // solidus with overbar\n    '\\u29F7': MO.BIN4,       // reverse solidus with horizontal stroke\n    '\\u29F8': MO.BIN3,       // big solidus\n    '\\u29F9': MO.BIN3,       // big reverse solidus\n    '\\u29FA': MO.BIN3,       // double plus\n    '\\u29FB': MO.BIN3,       // triple plus\n    '\\u29FE': MO.BIN4,       // tiny\n    '\\u29FF': MO.BIN4,       // miny\n    '\\u2A1D': MO.BIN3,       // join\n    '\\u2A1E': MO.BIN3,       // large left triangle operator\n    '\\u2A1F': MO.BIN3,       // z notation schema composition\n    '\\u2A20': MO.BIN3,       // z notation schema piping\n    '\\u2A21': MO.BIN3,       // z notation schema projection\n    '\\u2A22': MO.BIN4,       // plus sign with small circle above\n    '\\u2A23': MO.BIN4,       // plus sign with circumflex accent above\n    '\\u2A24': MO.BIN4,       // plus sign with tilde above\n    '\\u2A25': MO.BIN4,       // plus sign with dot below\n    '\\u2A26': MO.BIN4,       // plus sign with tilde below\n    '\\u2A27': MO.BIN4,       // plus sign with subscript two\n    '\\u2A28': MO.BIN4,       // plus sign with black triangle\n    '\\u2A29': MO.BIN4,       // minus sign with comma above\n    '\\u2A2A': MO.BIN4,       // minus sign with dot below\n    '\\u2A2B': MO.BIN4,       // minus sign with falling dots\n    '\\u2A2C': MO.BIN4,       // minus sign with rising dots\n    '\\u2A2D': MO.BIN4,       // plus sign in left half circle\n    '\\u2A2E': MO.BIN4,       // plus sign in right half circle\n    '\\u2A2F': MO.BIN4,       // vector or cross product\n    '\\u2A30': MO.BIN4,       // multiplication sign with dot above\n    '\\u2A31': MO.BIN4,       // multiplication sign with underbar\n    '\\u2A32': MO.BIN4,       // semidirect product with bottom closed\n    '\\u2A33': MO.BIN4,       // smash product\n    '\\u2A34': MO.BIN4,       // multiplication sign in left half circle\n    '\\u2A35': MO.BIN4,       // multiplication sign in right half circle\n    '\\u2A36': MO.BIN4,       // circled multiplication sign with circumflex accent\n    '\\u2A37': MO.BIN4,       // multiplication sign in double circle\n    '\\u2A38': MO.BIN4,       // circled division sign\n    '\\u2A39': MO.BIN4,       // plus sign in triangle\n    '\\u2A3A': MO.BIN4,       // minus sign in triangle\n    '\\u2A3B': MO.BIN4,       // multiplication sign in triangle\n    '\\u2A3C': MO.BIN4,       // interior product\n    '\\u2A3D': MO.BIN4,       // righthand interior product\n    '\\u2A3E': MO.BIN4,       // z notation relational composition\n    '\\u2A3F': MO.BIN4,       // amalgamation or coproduct\n    '\\u2A40': MO.BIN4,       // intersection with dot\n    '\\u2A41': MO.BIN4,       // union with minus sign\n    '\\u2A42': MO.BIN4,       // union with overbar\n    '\\u2A43': MO.BIN4,       // intersection with overbar\n    '\\u2A44': MO.BIN4,       // intersection with logical and\n    '\\u2A45': MO.BIN4,       // union with logical or\n    '\\u2A46': MO.BIN4,       // union above intersection\n    '\\u2A47': MO.BIN4,       // intersection above union\n    '\\u2A48': MO.BIN4,       // union above bar above intersection\n    '\\u2A49': MO.BIN4,       // intersection above bar above union\n    '\\u2A4A': MO.BIN4,       // union beside and joined with union\n    '\\u2A4B': MO.BIN4,       // intersection beside and joined with intersection\n    '\\u2A4C': MO.BIN4,       // closed union with serifs\n    '\\u2A4D': MO.BIN4,       // closed intersection with serifs\n    '\\u2A4E': MO.BIN4,       // double square intersection\n    '\\u2A4F': MO.BIN4,       // double square union\n    '\\u2A50': MO.BIN4,       // closed union with serifs and smash product\n    '\\u2A51': MO.BIN4,       // logical and with dot above\n    '\\u2A52': MO.BIN4,       // logical or with dot above\n    '\\u2A53': MO.BIN4,       // double logical and\n    '\\u2A54': MO.BIN4,       // double logical or\n    '\\u2A55': MO.BIN4,       // two intersecting logical and\n    '\\u2A56': MO.BIN4,       // two intersecting logical or\n    '\\u2A57': MO.BIN4,       // sloping large or\n    '\\u2A58': MO.BIN4,       // sloping large and\n    '\\u2A59': MO.REL,        // logical or overlapping logical and\n    '\\u2A5A': MO.BIN4,       // logical and with middle stem\n    '\\u2A5B': MO.BIN4,       // logical or with middle stem\n    '\\u2A5C': MO.BIN4,       // logical and with horizontal dash\n    '\\u2A5D': MO.BIN4,       // logical or with horizontal dash\n    '\\u2A5E': MO.BIN4,       // logical and with double overbar\n    '\\u2A5F': MO.BIN4,       // logical and with underbar\n    '\\u2A60': MO.BIN4,       // logical and with double underbar\n    '\\u2A61': MO.BIN4,       // small vee with underbar\n    '\\u2A62': MO.BIN4,       // logical or with double overbar\n    '\\u2A63': MO.BIN4,       // logical or with double underbar\n    '\\u2A64': MO.BIN4,       // z notation domain antirestriction\n    '\\u2A65': MO.BIN4,       // z notation range antirestriction\n    '\\u2A66': MO.REL,        // equals sign with dot below\n    '\\u2A67': MO.REL,        // identical with dot above\n    '\\u2A68': MO.REL,        // triple horizontal bar with double vertical stroke\n    '\\u2A69': MO.REL,        // triple horizontal bar with triple vertical stroke\n    '\\u2A6A': MO.REL,        // tilde operator with dot above\n    '\\u2A6B': MO.REL,        // tilde operator with rising dots\n    '\\u2A6C': MO.REL,        // similar minus similar\n    '\\u2A6D': MO.REL,        // congruent with dot above\n    '\\u2A6E': MO.REL,        // equals with asterisk\n    '\\u2A6F': MO.REL,        // almost equal to with circumflex accent\n    '\\u2A70': MO.REL,        // approximately equal or equal to\n    '\\u2A71': MO.BIN4,       // equals sign above plus sign\n    '\\u2A72': MO.BIN4,       // plus sign above equals sign\n    '\\u2A73': MO.REL,        // equals sign above tilde operator\n    '\\u2A74': MO.REL,        // double colon equal\n    '\\u2A75': MO.REL,        // two consecutive equals signs\n    '\\u2A76': MO.REL,        // three consecutive equals signs\n    '\\u2A77': MO.REL,        // equals sign with two dots above and two dots below\n    '\\u2A78': MO.REL,        // equivalent with four dots above\n    '\\u2A79': MO.REL,        // less-than with circle inside\n    '\\u2A7A': MO.REL,        // greater-than with circle inside\n    '\\u2A7B': MO.REL,        // less-than with question mark above\n    '\\u2A7C': MO.REL,        // greater-than with question mark above\n    '\\u2A7D': MO.REL,        // less-than or slanted equal to\n    '\\u2A7D\\u0338': MO.REL,  // less-than or slanted equal to with slash\n    '\\u2A7E': MO.REL,        // greater-than or slanted equal to\n    '\\u2A7E\\u0338': MO.REL,  // greater-than or slanted equal to with slash\n    '\\u2A7F': MO.REL,        // less-than or slanted equal to with dot inside\n    '\\u2A80': MO.REL,        // greater-than or slanted equal to with dot inside\n    '\\u2A81': MO.REL,        // less-than or slanted equal to with dot above\n    '\\u2A82': MO.REL,        // greater-than or slanted equal to with dot above\n    '\\u2A83': MO.REL,        // less-than or slanted equal to with dot above right\n    '\\u2A84': MO.REL,        // greater-than or slanted equal to with dot above left\n    '\\u2A85': MO.REL,        // less-than or approximate\n    '\\u2A86': MO.REL,        // greater-than or approximate\n    '\\u2A87': MO.REL,        // less-than and single-line not equal to\n    '\\u2A88': MO.REL,        // greater-than and single-line not equal to\n    '\\u2A89': MO.REL,        // less-than and not approximate\n    '\\u2A8A': MO.REL,        // greater-than and not approximate\n    '\\u2A8B': MO.REL,        // less-than above double-line equal above greater-than\n    '\\u2A8C': MO.REL,        // greater-than above double-line equal above less-than\n    '\\u2A8D': MO.REL,        // less-than above similar or equal\n    '\\u2A8E': MO.REL,        // greater-than above similar or equal\n    '\\u2A8F': MO.REL,        // less-than above similar above greater-than\n    '\\u2A90': MO.REL,        // greater-than above similar above less-than\n    '\\u2A91': MO.REL,        // less-than above greater-than above double-line equal\n    '\\u2A92': MO.REL,        // greater-than above less-than above double-line equal\n    '\\u2A93': MO.REL,        // less-than above slanted equal above greater-than above slanted equal\n    '\\u2A94': MO.REL,        // greater-than above slanted equal above less-than above slanted equal\n    '\\u2A95': MO.REL,        // slanted equal to or less-than\n    '\\u2A96': MO.REL,        // slanted equal to or greater-than\n    '\\u2A97': MO.REL,        // slanted equal to or less-than with dot inside\n    '\\u2A98': MO.REL,        // slanted equal to or greater-than with dot inside\n    '\\u2A99': MO.REL,        // double-line equal to or less-than\n    '\\u2A9A': MO.REL,        // double-line equal to or greater-than\n    '\\u2A9B': MO.REL,        // double-line slanted equal to or less-than\n    '\\u2A9C': MO.REL,        // double-line slanted equal to or greater-than\n    '\\u2A9D': MO.REL,        // similar or less-than\n    '\\u2A9E': MO.REL,        // similar or greater-than\n    '\\u2A9F': MO.REL,        // similar above less-than above equals sign\n    '\\u2AA0': MO.REL,        // similar above greater-than above equals sign\n    '\\u2AA1': MO.REL,        // double nested less-than\n    '\\u2AA1\\u0338': MO.REL,  // double nested less-than with slash\n    '\\u2AA2': MO.REL,        // double nested greater-than\n    '\\u2AA2\\u0338': MO.REL,  // double nested greater-than with slash\n    '\\u2AA3': MO.REL,        // double nested less-than with underbar\n    '\\u2AA4': MO.REL,        // greater-than overlapping less-than\n    '\\u2AA5': MO.REL,        // greater-than beside less-than\n    '\\u2AA6': MO.REL,        // less-than closed by curve\n    '\\u2AA7': MO.REL,        // greater-than closed by curve\n    '\\u2AA8': MO.REL,        // less-than closed by curve above slanted equal\n    '\\u2AA9': MO.REL,        // greater-than closed by curve above slanted equal\n    '\\u2AAA': MO.REL,        // smaller than\n    '\\u2AAB': MO.REL,        // larger than\n    '\\u2AAC': MO.REL,        // smaller than or equal to\n    '\\u2AAD': MO.REL,        // larger than or equal to\n    '\\u2AAE': MO.REL,        // equals sign with bumpy above\n    '\\u2AAF': MO.REL,        // precedes above single-line equals sign\n    '\\u2AAF\\u0338': MO.REL,  // precedes above single-line equals sign with slash\n    '\\u2AB0': MO.REL,        // succeeds above single-line equals sign\n    '\\u2AB0\\u0338': MO.REL,  // succeeds above single-line equals sign with slash\n    '\\u2AB1': MO.REL,        // precedes above single-line not equal to\n    '\\u2AB2': MO.REL,        // succeeds above single-line not equal to\n    '\\u2AB3': MO.REL,        // precedes above equals sign\n    '\\u2AB4': MO.REL,        // succeeds above equals sign\n    '\\u2AB5': MO.REL,        // precedes above not equal to\n    '\\u2AB6': MO.REL,        // succeeds above not equal to\n    '\\u2AB7': MO.REL,        // precedes above almost equal to\n    '\\u2AB8': MO.REL,        // succeeds above almost equal to\n    '\\u2AB9': MO.REL,        // precedes above not almost equal to\n    '\\u2ABA': MO.REL,        // succeeds above not almost equal to\n    '\\u2ABB': MO.REL,        // double precedes\n    '\\u2ABC': MO.REL,        // double succeeds\n    '\\u2ABD': MO.REL,        // subset with dot\n    '\\u2ABE': MO.REL,        // superset with dot\n    '\\u2ABF': MO.REL,        // subset with plus sign below\n    '\\u2AC0': MO.REL,        // superset with plus sign below\n    '\\u2AC1': MO.REL,        // subset with multiplication sign below\n    '\\u2AC2': MO.REL,        // superset with multiplication sign below\n    '\\u2AC3': MO.REL,        // subset of or equal to with dot above\n    '\\u2AC4': MO.REL,        // superset of or equal to with dot above\n    '\\u2AC5': MO.REL,        // subset of above equals sign\n    '\\u2AC6': MO.REL,        // superset of above equals sign\n    '\\u2AC7': MO.REL,        // subset of above tilde operator\n    '\\u2AC8': MO.REL,        // superset of above tilde operator\n    '\\u2AC9': MO.REL,        // subset of above almost equal to\n    '\\u2ACA': MO.REL,        // superset of above almost equal to\n    '\\u2ACB': MO.REL,        // subset of above not equal to\n    '\\u2ACC': MO.REL,        // superset of above not equal to\n    '\\u2ACD': MO.REL,        // square left open box operator\n    '\\u2ACE': MO.REL,        // square right open box operator\n    '\\u2ACF': MO.REL,        // closed subset\n    '\\u2AD0': MO.REL,        // closed superset\n    '\\u2AD1': MO.REL,        // closed subset or equal to\n    '\\u2AD2': MO.REL,        // closed superset or equal to\n    '\\u2AD3': MO.REL,        // subset above superset\n    '\\u2AD4': MO.REL,        // superset above subset\n    '\\u2AD5': MO.REL,        // subset above subset\n    '\\u2AD6': MO.REL,        // superset above superset\n    '\\u2AD7': MO.REL,        // superset beside subset\n    '\\u2AD8': MO.REL,        // superset beside and joined by dash with subset\n    '\\u2AD9': MO.REL,        // element of opening downwards\n    '\\u2ADA': MO.REL,        // pitchfork with tee top\n    '\\u2ADB': MO.REL,        // transversal intersection\n    '\\u2ADD': MO.REL,        // nonforking\n    '\\u2ADD\\u0338': MO.REL,  // nonforking with slash\n    '\\u2ADE': MO.REL,        // short left tack\n    '\\u2ADF': MO.REL,        // short down tack\n    '\\u2AE0': MO.REL,        // short up tack\n    '\\u2AE1': MO.REL,        // perpendicular with s\n    '\\u2AE2': MO.REL,        // vertical bar triple right turnstile\n    '\\u2AE3': MO.REL,        // double vertical bar left turnstile\n    '\\u2AE4': MO.REL,        // vertical bar double left turnstile\n    '\\u2AE5': MO.REL,        // double vertical bar double left turnstile\n    '\\u2AE6': MO.REL,        // long dash from left member of double vertical\n    '\\u2AE7': MO.REL,        // short down tack with overbar\n    '\\u2AE8': MO.REL,        // short up tack with underbar\n    '\\u2AE9': MO.REL,        // short up tack above short down tack\n    '\\u2AEA': MO.REL,        // double down tack\n    '\\u2AEB': MO.REL,        // double up tack\n    '\\u2AEC': MO.REL,        // double stroke not sign\n    '\\u2AED': MO.REL,        // reversed double stroke not sign\n    '\\u2AEE': MO.REL,        // does not divide with reversed negation slash\n    '\\u2AEF': MO.REL,        // vertical line with circle above\n    '\\u2AF0': MO.REL,        // vertical line with circle below\n    '\\u2AF1': MO.REL,        // down tack with circle below\n    '\\u2AF2': MO.REL,        // parallel with horizontal stroke\n    '\\u2AF3': MO.REL,        // parallel with tilde operator\n    '\\u2AF4': MO.BIN4,       // triple vertical bar binary relation\n    '\\u2AF5': MO.BIN4,       // triple vertical bar with horizontal stroke\n    '\\u2AF6': MO.BIN4,       // triple colon operator\n    '\\u2AF7': MO.REL,        // triple nested less-than\n    '\\u2AF8': MO.REL,        // triple nested greater-than\n    '\\u2AF9': MO.REL,        // double-line slanted less-than or equal to\n    '\\u2AFA': MO.REL,        // double-line slanted greater-than or equal to\n    '\\u2AFB': MO.BIN4,       // triple solidus binary relation\n    '\\u2AFD': MO.BIN4,       // double solidus operator\n    '\\u2AFE': MO.BIN3,       // white vertical bar\n    '\\u2B45': MO.RELSTRETCH, // leftwards quadruple arrow\n    '\\u2B46': MO.RELSTRETCH, // rightwards quadruple arrow\n    '\\u3008': MO.OPEN,       // langle\n    '\\u3009': MO.CLOSE,      // rangle\n    '\\uFE37': MO.WIDEACCENT, // horizontal brace down\n    '\\uFE38': MO.WIDEACCENT, // horizontal brace up\n  }\n};\n\n//\n//  These are not in the W3C table, but we need them for \\widehat and \\underline\n//\nOPTABLE.infix['^'] = MO.WIDEREL;\nOPTABLE.infix['_'] = MO.WIDEREL;\n\n//\n//  Remove from Appendix C, but perhaps that was a mistake?\n//\nOPTABLE.infix['\\u2ADC'] = MO.REL;\n","/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview Generic Node classes for node trees\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {NodeFactory} from './NodeFactory.js';\n\n/**\n *  PropertyList and Property are for string data like\n *  attributes and other properties\n */\nexport type Property = string | number | boolean;\nexport type PropertyList = {[key: string]: Property};\n\n/*********************************************************/\n/**\n *  The generic Node interface\n */\n\nexport interface Node {\n  readonly kind: string;\n  /**\n   * The NodeFactory to use to create additional nodes, as needed\n   */\n  readonly factory: NodeFactory<Node, NodeClass>;\n  parent: Node;\n  childNodes: Node[];\n\n  /**\n   * @param {string} name     The name of the property to set\n   * @param {Property} value  The value to which the property will be set\n   */\n  setProperty(name: string, value: Property): void;\n\n  /**\n   * @param {string} name  The name of the property to get\n   * @return {Property}   The value of the named property\n   */\n  getProperty(name: string): Property;\n\n  /**\n   * @return {string[]}  An array of the names of every property currently defined\n   */\n  getPropertyNames(): string[];\n\n  /**\n   * @return {PropertyList}  The propery list containing all the properties of the node\n   */\n  getAllProperties(): PropertyList;\n\n  /**\n   * @param {string[]} names  The names of the properties to be removed\n   */\n  removeProperty(...names: string[]): void;\n\n\n  /**\n   * @param {string} kind  The type of node to test for\n   * @return {boolean}     True when the node is of the given type\n   */\n  isKind(kind: string): boolean;\n\n  /**\n   * @param {Node[]} children  The child nodes to add to this node\n   */\n  setChildren(children: Node[]): void;\n\n  /**\n   * @param {Node} child  A node to add to this node's children\n   * @return {Node}       The child node that was added\n   */\n  appendChild(child: Node): Node;\n\n  /**\n   * @param {Node} newChild  A child node to be inserted\n   * @param {Node} oldChild  A child node to be replaced\n   * @return {Node}          The old child node that was removed\n   */\n  replaceChild(newChild: Node, oldChild: Node): Node;\n\n  /**\n   * @param {Node} child   Child node to be removed\n   * @return {Node}        The old child node that was removed\n   */\n  removeChild(child: Node): Node;\n\n  /**\n   * @param {Node} child  A child node whose index in childNodes is desired\n   * @return {number}     The index of the child in childNodes, or null if not found\n   */\n  childIndex(child: Node): number;\n\n  /**\n   * Make a deep copy of the node (but with no parent).\n   */\n  copy(): Node;\n\n  /**\n   * @param {string} kind  The kind of nodes to be located in the tree\n   * @return {Node[]}      An array of nodes that are children (at any depth) of the given kind\n   */\n  findNodes(kind: string): Node[];\n\n  /**\n   * @param {Function} func  A function to apply to each node in the tree rooted at this node\n   * @param {any} data       Data to pass to the function (as state information)\n   */\n  walkTree(func: (node: Node, data?: any) => void, data?: any): void;\n}\n\n/*********************************************************/\n/**\n *  The generic Node class interface\n */\n\nexport interface NodeClass {\n  /**\n   * @param {NodeFactory} factory  The NodeFactory to use to create new nodes when needed\n   * @param {PropertyList} properties  Any properties to be added to the node, if any\n   * @param {Node[]} children  The initial child nodes, if any\n   * @return {Node}  The newly created node\n   */\n  new (factory: NodeFactory<Node, NodeClass>, properties?: PropertyList, children?: Node[]): Node;\n}\n\n/*********************************************************/\n/**\n *  The abstract Node class\n */\n\nexport abstract class AbstractNode implements Node {\n\n  /**\n   * The parent node for this one\n   */\n  public parent: Node = null;\n\n  /**\n   * The properties for this node\n   */\n  protected properties: PropertyList = {};\n\n  /**\n   * The children for this node\n   */\n  public childNodes: Node[] = [];\n\n  /**\n   * @param {NodeFactory} factory  The NodeFactory to use to create new nodes when needed\n   * @param {PropertyList} properties  Any properties to be added to the node, if any\n   * @param {Node[]} children  The initial child nodes, if any\n   *\n   * @constructor\n   * @implements {Node}\n   */\n  constructor(readonly factory: NodeFactory<Node, NodeClass>, properties: PropertyList = {}, children: Node[] = []) {\n    for (const name of Object.keys(properties)) {\n      this.setProperty(name, properties[name]);\n    }\n    if (children.length) {\n      this.setChildren(children);\n    }\n  }\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'unknown';\n  }\n\n  /**\n   * @override\n   */\n  public setProperty(name: string, value: Property) {\n    this.properties[name] = value;\n  }\n\n  /**\n   * @override\n   */\n  public getProperty(name: string) {\n    return this.properties[name];\n  }\n\n  /**\n   * @override\n   */\n  public getPropertyNames() {\n    return Object.keys(this.properties);\n  }\n\n  /**\n   * @override\n   */\n  public getAllProperties() {\n    return this.properties;\n  }\n\n  /**\n   * @override\n   */\n  public removeProperty(...names: string[]) {\n    for (const name of names) {\n      delete this.properties[name];\n    }\n  }\n\n\n  /**\n   * @override\n   */\n  public isKind(kind: string): boolean {\n    return this.factory.nodeIsKind(this, kind);\n  }\n\n\n  /**\n   * @override\n   */\n  public setChildren(children: Node[]) {\n    this.childNodes = [];\n    for (let child of children) {\n      this.appendChild(child);\n    }\n  }\n\n  /**\n   * @override\n   */\n  public appendChild(child: Node) {\n    this.childNodes.push(child);\n    child.parent = this;\n    return child;\n  }\n\n  /**\n   * @override\n   */\n  public replaceChild(newChild: Node, oldChild: Node) {\n    let i = this.childIndex(oldChild);\n    // If i === null should we error?  return null?  silently fail?\n    if (i !== null) {\n      this.childNodes[i] = newChild;\n      newChild.parent = this;\n      oldChild.parent = null;\n    }\n    return newChild;\n  }\n\n  /**\n   * @override\n   */\n  public removeChild(child: Node) {\n    const i = this.childIndex(child);\n    if (i !== null) {\n      this.childNodes.splice(i, 1);\n      child.parent = null;\n    }\n    return child;\n  }\n\n\n  /**\n   * @override\n   */\n  public childIndex(node: Node) {\n    let i = this.childNodes.indexOf(node);\n    return (i === -1 ? null : i);\n  }\n\n\n  /**\n   * @override\n   */\n  public copy() {\n    const node = (this as AbstractNode).factory.create(this.kind) as AbstractNode;\n    node.properties = {...this.properties};\n    for (const child of this.childNodes || []) {\n      if (child) {\n        node.appendChild(child.copy());\n      }\n    }\n    return node;\n  }\n\n  /**\n   * @override\n   */\n  public findNodes(kind: string) {\n    let nodes: Node[] = [];\n    this.walkTree((node: Node) => {\n      if (node.isKind(kind)) {\n        nodes.push(node);\n      }\n    });\n    return nodes;\n  }\n\n\n  /**\n   * @override\n   */\n  public walkTree(func: (node: Node, data?: any) => void, data?: any) {\n    func(this, data);\n    for (const child of this.childNodes) {\n      if (child) {\n        child.walkTree(func, data);\n      }\n    }\n    return data;\n  }\n\n  /**\n   * Simple string version for debugging, just to get the structure.\n   */\n  public toString() {\n    return this.kind + '(' + this.childNodes.join(',') + ')';\n  }\n\n}\n\n/*********************************************************/\n/**\n *  The abstract EmptyNode class\n */\n\nexport abstract class AbstractEmptyNode extends AbstractNode {\n  /**\n   *  We don't have children, so ignore these methods\n   */\n\n  /**\n   * @override\n   */\n  public setChildren(_children: Node[]) {\n  }\n\n  /**\n   * @override\n   */\n  public appendChild(child: Node) {\n    return child;\n  }\n\n  /**\n   * @override\n   */\n  public replaceChild(_newChild: Node, oldChild: Node) {\n    return oldChild;\n  }\n\n  /**\n   * @override\n   */\n  public childIndex(_node: Node) {\n    return null as number;\n  }\n\n  /**\n   * Don't step into children (there aren't any)\n   *\n   * @override\n   */\n  public walkTree(func: (node: Node, data?: any) => void, data?: any) {\n    func(this, data);\n    return data;\n  }\n\n  /**\n   * Simple string version for debugging, just to get the structure.\n   */\n  public toString() {\n    return this.kind;\n  }\n\n}\n","/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements functions for handling option lists\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\n\n/*****************************************************************/\n/* tslint:disable-next-line:jsdoc-require */\nconst OBJECT = {}.constructor;\n\n/**\n *  Check if an object is an object literal (as opposed to an instance of a class)\n */\nexport function isObject(obj: any) {\n  return typeof obj === 'object' && obj !== null &&\n    (obj.constructor === OBJECT || obj.constructor === Expandable);\n}\n\n/*****************************************************************/\n/**\n * Generic list of options\n */\nexport type OptionList = {[name: string]: any};\n\n/*****************************************************************/\n/**\n *  Used to append an array to an array in default options\n *  E.g., an option of the form\n *\n *    {\n *      name: {[APPEND]: [1, 2, 3]}\n *    }\n *\n *  where 'name' is an array in the default options would end up with name having its\n *  original value with 1, 2, and 3 appended.\n */\nexport const APPEND = '[+]';\n\n/**\n *  Used to remove elements from an array in default options\n *  E.g., an option of the form\n *\n *    {\n *      name: {[REMOVE]: [2]}\n *    }\n *\n *  where 'name' is an array in the default options would end up with name having its\n *  original value but with any entry of 2 removed  So if the original value was [1, 2, 3, 2],\n *  then the final value will be [1, 3] instead.\n */\nexport const REMOVE = '[-]';\n\n\n/**\n *  Provides options for the option utlities.\n */\nexport const OPTIONS = {\n  invalidOption: 'warn' as ('fatal' | 'warn'),\n  /**\n   * Function to report messages for invalid options\n   *\n   * @param {string} message   The message for the invalid parameter.\n   * @param {string} key       The invalid key itself.\n   */\n  optionError: (message: string, _key: string) => {\n    if (OPTIONS.invalidOption === 'fatal') {\n      throw new Error(message);\n    }\n    console.warn('MathJax: ' + message);\n  }\n};\n\n\n/**\n * A Class to use for options that should not produce warnings if an undefined key is used\n */\nexport class Expandable {}\n\n/**\n * Produces an instance of Expandable with the given values (to be used in defining options\n * that can use keys that don't have default values).  E.g., default options of the form:\n *\n *  OPTIONS = {\n *     types: expandable({\n *       a: 1,\n *       b: 2\n *     })\n *  }\n *\n *  would allow user options of\n *\n *  {\n *     types: {\n *       c: 3\n *     }\n *  }\n *\n *  without reporting an error.\n */\nexport function expandable(def: OptionList) {\n  return Object.assign(Object.create(Expandable.prototype), def);\n}\n\n/*****************************************************************/\n/**\n *  Make sure an option is an Array\n */\nexport function makeArray(x: any): any[] {\n  return Array.isArray(x) ? x : [x];\n}\n\n/*****************************************************************/\n/**\n * Get all keys and symbols from an object\n *\n * @param {Optionlist} def        The object whose keys are to be returned\n * @return {(string | symbol)[]}  The list of keys for the object\n */\nexport function keys(def: OptionList): (string | symbol)[] {\n  if (!def) {\n    return [];\n  }\n  return (Object.keys(def) as (string | symbol)[]).concat(Object.getOwnPropertySymbols(def));\n}\n\n/*****************************************************************/\n/**\n * Make a deep copy of an object\n *\n * @param {OptionList} def  The object to be copied\n * @return {OptionList}     The copy of the object\n */\nexport function copy(def: OptionList): OptionList {\n  let props: OptionList = {};\n  for (const key of keys(def)) {\n    let prop = Object.getOwnPropertyDescriptor(def, key);\n    let value = prop.value;\n    if (Array.isArray(value)) {\n      prop.value = insert([], value, false);\n    } else if (isObject(value)) {\n      prop.value = copy(value);\n    }\n    if (prop.enumerable) {\n      props[key as string] = prop;\n    }\n  }\n  return Object.defineProperties(def.constructor === Expandable ? expandable({}) : {}, props);\n}\n\n/*****************************************************************/\n/**\n * Insert one object into another (with optional warnings about\n * keys that aren't in the original)\n *\n * @param {OptionList} dst  The option list to merge into\n * @param {OptionList} src  The options to be merged\n * @param {boolean} warn    True if a warning should be issued for a src option that isn't already in dst\n * @return {OptionList}     The modified destination option list (dst)\n */\nexport function insert(dst: OptionList, src: OptionList, warn: boolean = true): OptionList {\n  for (let key of keys(src) as string[]) {\n    //\n    // Check if the key is valid (i.e., is in the defaults or in an expandable block)\n    //\n    if (warn && dst[key] === undefined && dst.constructor !== Expandable) {\n      if (typeof key === 'symbol') {\n        key = (key as symbol).toString();\n      }\n      OPTIONS.optionError(`Invalid option \"${key}\" (no default value).`, key);\n      continue;\n    }\n    //\n    // Shorthands for the source and destination values\n    //\n    let sval = src[key], dval = dst[key];\n    //\n    // If the source is an object literal and the destination exists and is either an\n    //   object or a function (so can have properties added to it)...\n    //\n    if (isObject(sval) && dval !== null &&\n        (typeof dval === 'object' || typeof dval === 'function')) {\n      const ids = keys(sval);\n      //\n      // Check for APPEND or REMOVE objects:\n      //\n      if (\n        //\n        // If the destination value is an array...\n        //\n        Array.isArray(dval) &&\n          (\n            //\n            // If there is only one key and it is APPEND or REMOVE and the keys value is an array...\n            //\n            (ids.length === 1 && (ids[0] === APPEND || ids[0] === REMOVE) && Array.isArray(sval[ids[0]])) ||\n              //\n              // Or if there are two keys and they are APPEND and REMOVE and both keys' values\n              //   are arrays...\n              //\n              (ids.length === 2 && ids.sort().join(',') === APPEND + ',' + REMOVE &&\n               Array.isArray(sval[APPEND]) && Array.isArray(sval[REMOVE]))\n          )\n      ) {\n        //\n        // Then remove any values to be removed\n        //\n        if (sval[REMOVE]) {\n          dval = dst[key] = dval.filter(x => sval[REMOVE].indexOf(x) < 0);\n        }\n        //\n        // And append any values to be added (make a copy so as not to modify the original)\n        //\n        if (sval[APPEND]) {\n          dst[key] = [...dval, ...sval[APPEND]];\n        }\n      } else {\n        //\n        // Otherwise insert the values of the source object into the destination object\n        //\n        insert(dval, sval, warn);\n      }\n    } else if (Array.isArray(sval)) {\n      //\n      // If the source is an array, replace the destination with an empty array\n      //   and copy the source values into it.\n      //\n      dst[key] = [];\n      insert(dst[key], sval, false);\n    } else if (isObject(sval)) {\n      //\n      // If the source is an object literal, set the destination to a copy of it\n      //\n      dst[key] = copy(sval);\n    } else {\n      //\n      // Otherwise set the destination to the source value\n      //\n      dst[key] = sval;\n    }\n  }\n  return dst;\n}\n\n/*****************************************************************/\n/**\n * Merge options without warnings (so we can add new default values into an\n * existing default list)\n *\n * @param {OptionList} options  The option list to be merged into\n * @param {OptionList[]} defs   The option lists to merge into the first one\n * @return {OptionList}         The modified options list\n */\nexport function defaultOptions(options: OptionList, ...defs: OptionList[]): OptionList {\n  defs.forEach(def => insert(options, def, false));\n  return options;\n}\n\n/*****************************************************************/\n/**\n * Merge options with warnings about undefined ones (so we can merge\n * user options into the default list)\n *\n * @param {OptionList} options  The option list to be merged into\n * @param {OptionList[]} defs   The option lists to merge into the first one\n * @return {OptionList}         The modified options list\n */\nexport function userOptions(options: OptionList, ...defs: OptionList[]): OptionList {\n  defs.forEach(def => insert(options, def, true));\n  return options;\n}\n\n/*****************************************************************/\n/**\n * Select a subset of options by key name\n *\n * @param {OptionList} options  The option list from which option values will be taken\n * @param {string[]} keys       The names of the options to extract\n * @return {OptionList}         The option list consisting of only the ones whose keys were given\n */\nexport function selectOptions(options: OptionList, ...keys: string[]): OptionList {\n  let subset: OptionList = {};\n  for (const key of keys) {\n    if (options.hasOwnProperty(key)) {\n      subset[key] = options[key];\n    }\n  }\n  return subset;\n}\n\n/*****************************************************************/\n/**\n * Select a subset of options by keys from an object\n *\n * @param {OptionList} options  The option list from which the option values will be taken\n * @param {OptionList} object   The option list whose keys will be used to select the options\n * @return {OptionList}         The option list consisting of the option values from the first\n *                               list whose keys are those from the second list.\n */\nexport function selectOptionsFromKeys(options: OptionList, object: OptionList): OptionList {\n  return selectOptions(options, ...Object.keys(object));\n}\n\n/*****************************************************************/\n/**\n *  Separate options into sets: the ones having the same keys\n *  as the second object, the third object, etc, and the ones that don't.\n *  (Used to separate an option list into the options needed for several\n *   subobjects.)\n *\n * @param {OptionList} options    The option list to be split into parts\n * @param {OptionList[]} objects  The list of option lists whose keys are used to break up\n *                                 the original options into separate pieces.\n * @return {OptionList[]}         The option lists taken from the original based on the\n *                                 keys of the other objects.  The first one in the list\n *                                 consists of the values not appearing in any of the others\n *                                 (i.e., whose keys were not in any of the others).\n */\nexport function separateOptions(options: OptionList, ...objects: OptionList[]): OptionList[] {\n  let results: OptionList[] = [];\n  for (const object of objects) {\n    let exists: OptionList = {}, missing: OptionList = {};\n    for (const key of Object.keys(options || {})) {\n      (object[key] === undefined ? missing : exists)[key] = options[key];\n    }\n    results.push(exists);\n    options = missing;\n  }\n  results.unshift(options);\n  return results;\n}\n\n\n/*****************************************************************/\n/**\n *  Look up a value from object literal, being sure it is an\n *  actual property (not inherited), with a default if not found.\n *\n * @param {string} name         The name of the key to look up.\n * @param {OptionList} lookup   The list of options to check.\n * @param {any} def             The default value if the key isn't found.\n */\nexport function lookup(name: string, lookup: OptionList, def: any = null) {\n  return (lookup.hasOwnProperty(name) ? lookup[name] : def);\n}\n\n","/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements some string utility functions\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\n\n/**\n * Sort strings by length\n *\n * @param {string} a  First string to be compared\n * @param {string} b  Second string to be compared\n * @return {number}  -1 id a < b, 0 of a === b, 1 if a > b\n */\nexport function sortLength(a: string, b: string): number {\n  return a.length !== b.length ? b.length - a.length : a === b ? 0 : a < b ? -1 : 1;\n}\n\n/**\n * Quote a string for use in regular expressions\n *\n * @param {string} text  The text whose regex characters are to be quoted\n * @return {string}  The quoted string\n */\nexport function quotePattern(text: string): string {\n  return text.replace(/([\\^$(){}+*?\\-|\\[\\]\\:\\\\])/g, '\\\\$1');\n}\n\n/**\n * Convert a UTF-8 string to an array of unicode code points\n *\n * @param {string} text  The string to be turned into unicode positions\n * @return {number[]}  Array of numbers representing the string's unicode character positions\n */\nexport function unicodeChars(text: string): number[] {\n  return Array.from(text).map((c) => c.codePointAt(0));\n}\n\n/**\n * Convert an array of unicode code points to a string\n *\n * @param {number[]} data   The array of unicode code points\n * @return {string}         The string consisting of the characters at those points\n */\nexport function unicodeString(data: number[]): string {\n  return String.fromCodePoint(...data);\n}\n\n/**\n * Test if a value is a percentage\n *\n * @param {string} x   The string to test\n * @return {boolean}   True if the string ends with a percent sign\n */\nexport function isPercent(x: string): boolean {\n  return !!x.match(/%\\s*$/);\n}\n\n/**\n * Split a space-separated string of values\n *\n * @param {string} x   The string to be split\n * @return {string[]}  The list of white-space-separated \"words\" in the string\n */\nexport function split(x: string): string[] {\n  return x.trim().split(/\\s+/);\n}\n"],"names":["INHERIT","defaults","global","this","Object","create","inherited","attributes","assign","set","name","value","setList","list","get","getExplicit","hasOwnProperty","getList","values","names","setInherited","getInherited","getDefault","isSet","hasDefault","getExplicitNames","keys","getInheritedNames","getDefaultNames","getGlobalNames","getAllAttributes","getAllInherited","getAllDefaults","getAllGlobals","Attributes","TEXCLASS","ORD","OP","BIN","REL","OPEN","CLOSE","PUNCT","INNER","VCENTER","NONE","TEXCLASSNAMES","TEXSPACELENGTH","TEXSPACE","indentAttributes","factory","children","prevClass","prevLevel","texclass","arity","childNodes","parent","setChildren","getNodeClass","kind","copy","keepIds","node","properties","length","isInferred","child","appendChild","push","texClass","Infinity","notParent","Parent","forEach","original","getPropertyNames","setProperty","getProperty","replaceChild","newChild","oldChild","core","coreMO","coreIndex","childPosition","i","setTeXclass","prev","getPrevClass","updateTeXclass","texSpacing","space","Math","abs","hasSpacingAttributes","isEmbellished","setInheritedAttributes","display","level","prime","key","AbstractMmlNode","alwaysInherit","noInherit","undefined","slice","setChildInheritedAttributes","addInheritedAttributes","current","updated","inheritAttributesFrom","scriptlevel","mathsize","verifyTree","options","verifyAttributes","mError","verifyChildren","bad","substr","match","join","message","short","isKind","merror","mtext","text","setText","mathbackground","mathcolor","dir","mstyle","mpadded","width","height","depth","lspace","voffset","mtable","align","maligngroup","mrow","groupalign","scriptminsize","scriptsizemultiplier","verifyDefaults","checkArity","checkAttributes","fullErrors","fixMmultiscripts","fixMtables","AbstractNode","getText","TextNode","walkTree","func","data","mathvariant","AbstractMmlTokenNode","isSpacelike","AbstractMmlLayoutNode","base","AbstractMmlBaseNode","_attributes","_display","_level","_prime","_node","_options","_message","_short","AbstractEmptyNode","AbstractMmlEmptyNode","toString","xml","adaptor","getXML","setXML","getSerializedXML","serializeXML","clone","XMLNode","_texClass","rspace","mo","handleExplicitForm","getForms","form1","form2","form3","constructor","OPTABLE","def","coreParent","embellished","math","coreText","isToken","accent","over","under","form","fence","adjustTeXclass","checkOperatorTable","checkPseudoScripts","checkPrimes","checkMathAccent","range","getRange","spacing","MMLSPACING","nonSpaceLength","firstNonSpace","lastNonSpace","forms","concat","filter","PSEUDOSCRIPTS","pseudoScripts","isPseudo","PRIMES","primes","REMAP","remapPrimes","unicodeString","unicodeChars","map","c","MATHACCENT","mathaccents","separator","stretchy","symmetric","maxsize","minsize","largeop","movablelimits","linebreak","lineleading","linebreakstyle","indentalign","indentshift","indenttarget","indentalignfirst","indentshiftfirst","indentalignlast","indentshiftlast","RegExp","MmlMo","OPDEF","MO","ORD11","ORD21","ORD02","ORD55","OPFIXED","INTEGRAL","INTEGRAL2","BIN3","BIN4","BIN01","BIN5","TALLBIN","BINOP","REL1","REL4","RELSTRETCH","RELACCENT","WIDEREL","ACCENT","WIDEACCENT","RANGES","n","codePointAt","prefix","postfix","infix","getAllProperties","removeProperty","nodeIsKind","childIndex","removeChild","splice","indexOf","findNodes","nodes","_children","_newChild","OBJECT","isObject","obj","Expandable","APPEND","REMOVE","OPTIONS","invalidOption","optionError","_key","Error","console","warn","expandable","prototype","getOwnPropertySymbols","props","prop","getOwnPropertyDescriptor","Array","isArray","insert","enumerable","defineProperties","dst","src","sval","dval","ids","sort","x","selectOptions","subset","defs","object","results","objects","exists","missing","unshift","lookup","a","b","replace","from","String","fromCodePoint","trim","split"],"sourceRoot":""}